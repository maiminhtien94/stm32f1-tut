
stm32f1-spi-sdcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ebc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  080090a0  080090a0  000190a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b0  080099b0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099b8  080099b8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099bc  080099bc  000199bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080099c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004488  20000088  08009a48  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004510  08009a48  00024510  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0f4  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002515  00000000  00000000  0002e1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  000306c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  000312a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020831  00000000  00000000  00031d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f040  00000000  00000000  000525b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5dd5  00000000  00000000  000615f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001173ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034dc  00000000  00000000  00117424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000088 	.word	0x20000088
 8000200:	00000000 	.word	0x00000000
 8000204:	08009088 	.word	0x08009088

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000008c 	.word	0x2000008c
 8000220:	08009088 	.word	0x08009088

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_dmul>:
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000242:	bf1d      	ittte	ne
 8000244:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000248:	ea94 0f0c 	teqne	r4, ip
 800024c:	ea95 0f0c 	teqne	r5, ip
 8000250:	f000 f8de 	bleq	8000410 <__aeabi_dmul+0x1dc>
 8000254:	442c      	add	r4, r5
 8000256:	ea81 0603 	eor.w	r6, r1, r3
 800025a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000262:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000266:	bf18      	it	ne
 8000268:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800026c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000274:	d038      	beq.n	80002e8 <__aeabi_dmul+0xb4>
 8000276:	fba0 ce02 	umull	ip, lr, r0, r2
 800027a:	f04f 0500 	mov.w	r5, #0
 800027e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000282:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000286:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028a:	f04f 0600 	mov.w	r6, #0
 800028e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000292:	f09c 0f00 	teq	ip, #0
 8000296:	bf18      	it	ne
 8000298:	f04e 0e01 	orrne.w	lr, lr, #1
 800029c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a8:	d204      	bcs.n	80002b4 <__aeabi_dmul+0x80>
 80002aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ae:	416d      	adcs	r5, r5
 80002b0:	eb46 0606 	adc.w	r6, r6, r6
 80002b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002cc:	bf88      	it	hi
 80002ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002d2:	d81e      	bhi.n	8000312 <__aeabi_dmul+0xde>
 80002d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d8:	bf08      	it	eq
 80002da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002de:	f150 0000 	adcs.w	r0, r0, #0
 80002e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002ec:	ea46 0101 	orr.w	r1, r6, r1
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	ea81 0103 	eor.w	r1, r1, r3
 80002f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002fc:	bfc2      	ittt	gt
 80002fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000302:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000306:	bd70      	popgt	{r4, r5, r6, pc}
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800030c:	f04f 0e00 	mov.w	lr, #0
 8000310:	3c01      	subs	r4, #1
 8000312:	f300 80ab 	bgt.w	800046c <__aeabi_dmul+0x238>
 8000316:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800031a:	bfde      	ittt	le
 800031c:	2000      	movle	r0, #0
 800031e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000322:	bd70      	pople	{r4, r5, r6, pc}
 8000324:	f1c4 0400 	rsb	r4, r4, #0
 8000328:	3c20      	subs	r4, #32
 800032a:	da35      	bge.n	8000398 <__aeabi_dmul+0x164>
 800032c:	340c      	adds	r4, #12
 800032e:	dc1b      	bgt.n	8000368 <__aeabi_dmul+0x134>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f305 	lsl.w	r3, r0, r5
 800033c:	fa20 f004 	lsr.w	r0, r0, r4
 8000340:	fa01 f205 	lsl.w	r2, r1, r5
 8000344:	ea40 0002 	orr.w	r0, r0, r2
 8000348:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800034c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	fa21 f604 	lsr.w	r6, r1, r4
 8000358:	eb42 0106 	adc.w	r1, r2, r6
 800035c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000360:	bf08      	it	eq
 8000362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f1c4 040c 	rsb	r4, r4, #12
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f304 	lsl.w	r3, r0, r4
 8000374:	fa20 f005 	lsr.w	r0, r0, r5
 8000378:	fa01 f204 	lsl.w	r2, r1, r4
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000384:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000390:	bf08      	it	eq
 8000392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f1c4 0520 	rsb	r5, r4, #32
 800039c:	fa00 f205 	lsl.w	r2, r0, r5
 80003a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a4:	fa20 f304 	lsr.w	r3, r0, r4
 80003a8:	fa01 f205 	lsl.w	r2, r1, r5
 80003ac:	ea43 0302 	orr.w	r3, r3, r2
 80003b0:	fa21 f004 	lsr.w	r0, r1, r4
 80003b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	fa21 f204 	lsr.w	r2, r1, r4
 80003bc:	ea20 0002 	bic.w	r0, r0, r2
 80003c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c8:	bf08      	it	eq
 80003ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	f094 0f00 	teq	r4, #0
 80003d4:	d10f      	bne.n	80003f6 <__aeabi_dmul+0x1c2>
 80003d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003da:	0040      	lsls	r0, r0, #1
 80003dc:	eb41 0101 	adc.w	r1, r1, r1
 80003e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e4:	bf08      	it	eq
 80003e6:	3c01      	subeq	r4, #1
 80003e8:	d0f7      	beq.n	80003da <__aeabi_dmul+0x1a6>
 80003ea:	ea41 0106 	orr.w	r1, r1, r6
 80003ee:	f095 0f00 	teq	r5, #0
 80003f2:	bf18      	it	ne
 80003f4:	4770      	bxne	lr
 80003f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003fa:	0052      	lsls	r2, r2, #1
 80003fc:	eb43 0303 	adc.w	r3, r3, r3
 8000400:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000404:	bf08      	it	eq
 8000406:	3d01      	subeq	r5, #1
 8000408:	d0f7      	beq.n	80003fa <__aeabi_dmul+0x1c6>
 800040a:	ea43 0306 	orr.w	r3, r3, r6
 800040e:	4770      	bx	lr
 8000410:	ea94 0f0c 	teq	r4, ip
 8000414:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000418:	bf18      	it	ne
 800041a:	ea95 0f0c 	teqne	r5, ip
 800041e:	d00c      	beq.n	800043a <__aeabi_dmul+0x206>
 8000420:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000424:	bf18      	it	ne
 8000426:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042a:	d1d1      	bne.n	80003d0 <__aeabi_dmul+0x19c>
 800042c:	ea81 0103 	eor.w	r1, r1, r3
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043e:	bf06      	itte	eq
 8000440:	4610      	moveq	r0, r2
 8000442:	4619      	moveq	r1, r3
 8000444:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000448:	d019      	beq.n	800047e <__aeabi_dmul+0x24a>
 800044a:	ea94 0f0c 	teq	r4, ip
 800044e:	d102      	bne.n	8000456 <__aeabi_dmul+0x222>
 8000450:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000454:	d113      	bne.n	800047e <__aeabi_dmul+0x24a>
 8000456:	ea95 0f0c 	teq	r5, ip
 800045a:	d105      	bne.n	8000468 <__aeabi_dmul+0x234>
 800045c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000460:	bf1c      	itt	ne
 8000462:	4610      	movne	r0, r2
 8000464:	4619      	movne	r1, r3
 8000466:	d10a      	bne.n	800047e <__aeabi_dmul+0x24a>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd70      	pop	{r4, r5, r6, pc}
 800047e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000482:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000486:	bd70      	pop	{r4, r5, r6, pc}

08000488 <__aeabi_drsub>:
 8000488:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800048c:	e002      	b.n	8000494 <__adddf3>
 800048e:	bf00      	nop

08000490 <__aeabi_dsub>:
 8000490:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000494 <__adddf3>:
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800049a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049e:	ea94 0f05 	teq	r4, r5
 80004a2:	bf08      	it	eq
 80004a4:	ea90 0f02 	teqeq	r0, r2
 80004a8:	bf1f      	itttt	ne
 80004aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ba:	f000 80e2 	beq.w	8000682 <__adddf3+0x1ee>
 80004be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c6:	bfb8      	it	lt
 80004c8:	426d      	neglt	r5, r5
 80004ca:	dd0c      	ble.n	80004e6 <__adddf3+0x52>
 80004cc:	442c      	add	r4, r5
 80004ce:	ea80 0202 	eor.w	r2, r0, r2
 80004d2:	ea81 0303 	eor.w	r3, r1, r3
 80004d6:	ea82 0000 	eor.w	r0, r2, r0
 80004da:	ea83 0101 	eor.w	r1, r3, r1
 80004de:	ea80 0202 	eor.w	r2, r0, r2
 80004e2:	ea81 0303 	eor.w	r3, r1, r3
 80004e6:	2d36      	cmp	r5, #54	; 0x36
 80004e8:	bf88      	it	hi
 80004ea:	bd30      	pophi	{r4, r5, pc}
 80004ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004fc:	d002      	beq.n	8000504 <__adddf3+0x70>
 80004fe:	4240      	negs	r0, r0
 8000500:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000504:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000508:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800050c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000510:	d002      	beq.n	8000518 <__adddf3+0x84>
 8000512:	4252      	negs	r2, r2
 8000514:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000518:	ea94 0f05 	teq	r4, r5
 800051c:	f000 80a7 	beq.w	800066e <__adddf3+0x1da>
 8000520:	f1a4 0401 	sub.w	r4, r4, #1
 8000524:	f1d5 0e20 	rsbs	lr, r5, #32
 8000528:	db0d      	blt.n	8000546 <__adddf3+0xb2>
 800052a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052e:	fa22 f205 	lsr.w	r2, r2, r5
 8000532:	1880      	adds	r0, r0, r2
 8000534:	f141 0100 	adc.w	r1, r1, #0
 8000538:	fa03 f20e 	lsl.w	r2, r3, lr
 800053c:	1880      	adds	r0, r0, r2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	4159      	adcs	r1, r3
 8000544:	e00e      	b.n	8000564 <__adddf3+0xd0>
 8000546:	f1a5 0520 	sub.w	r5, r5, #32
 800054a:	f10e 0e20 	add.w	lr, lr, #32
 800054e:	2a01      	cmp	r2, #1
 8000550:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000554:	bf28      	it	cs
 8000556:	f04c 0c02 	orrcs.w	ip, ip, #2
 800055a:	fa43 f305 	asr.w	r3, r3, r5
 800055e:	18c0      	adds	r0, r0, r3
 8000560:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	d507      	bpl.n	800057a <__adddf3+0xe6>
 800056a:	f04f 0e00 	mov.w	lr, #0
 800056e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000572:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000576:	eb6e 0101 	sbc.w	r1, lr, r1
 800057a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057e:	d31b      	bcc.n	80005b8 <__adddf3+0x124>
 8000580:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000584:	d30c      	bcc.n	80005a0 <__adddf3+0x10c>
 8000586:	0849      	lsrs	r1, r1, #1
 8000588:	ea5f 0030 	movs.w	r0, r0, rrx
 800058c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000590:	f104 0401 	add.w	r4, r4, #1
 8000594:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000598:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800059c:	f080 809a 	bcs.w	80006d4 <__adddf3+0x240>
 80005a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	ea41 0105 	orr.w	r1, r1, r5
 80005b6:	bd30      	pop	{r4, r5, pc}
 80005b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005bc:	4140      	adcs	r0, r0
 80005be:	eb41 0101 	adc.w	r1, r1, r1
 80005c2:	3c01      	subs	r4, #1
 80005c4:	bf28      	it	cs
 80005c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ca:	d2e9      	bcs.n	80005a0 <__adddf3+0x10c>
 80005cc:	f091 0f00 	teq	r1, #0
 80005d0:	bf04      	itt	eq
 80005d2:	4601      	moveq	r1, r0
 80005d4:	2000      	moveq	r0, #0
 80005d6:	fab1 f381 	clz	r3, r1
 80005da:	bf08      	it	eq
 80005dc:	3320      	addeq	r3, #32
 80005de:	f1a3 030b 	sub.w	r3, r3, #11
 80005e2:	f1b3 0220 	subs.w	r2, r3, #32
 80005e6:	da0c      	bge.n	8000602 <__adddf3+0x16e>
 80005e8:	320c      	adds	r2, #12
 80005ea:	dd08      	ble.n	80005fe <__adddf3+0x16a>
 80005ec:	f102 0c14 	add.w	ip, r2, #20
 80005f0:	f1c2 020c 	rsb	r2, r2, #12
 80005f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f8:	fa21 f102 	lsr.w	r1, r1, r2
 80005fc:	e00c      	b.n	8000618 <__adddf3+0x184>
 80005fe:	f102 0214 	add.w	r2, r2, #20
 8000602:	bfd8      	it	le
 8000604:	f1c2 0c20 	rsble	ip, r2, #32
 8000608:	fa01 f102 	lsl.w	r1, r1, r2
 800060c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000610:	bfdc      	itt	le
 8000612:	ea41 010c 	orrle.w	r1, r1, ip
 8000616:	4090      	lslle	r0, r2
 8000618:	1ae4      	subs	r4, r4, r3
 800061a:	bfa2      	ittt	ge
 800061c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000620:	4329      	orrge	r1, r5
 8000622:	bd30      	popge	{r4, r5, pc}
 8000624:	ea6f 0404 	mvn.w	r4, r4
 8000628:	3c1f      	subs	r4, #31
 800062a:	da1c      	bge.n	8000666 <__adddf3+0x1d2>
 800062c:	340c      	adds	r4, #12
 800062e:	dc0e      	bgt.n	800064e <__adddf3+0x1ba>
 8000630:	f104 0414 	add.w	r4, r4, #20
 8000634:	f1c4 0220 	rsb	r2, r4, #32
 8000638:	fa20 f004 	lsr.w	r0, r0, r4
 800063c:	fa01 f302 	lsl.w	r3, r1, r2
 8000640:	ea40 0003 	orr.w	r0, r0, r3
 8000644:	fa21 f304 	lsr.w	r3, r1, r4
 8000648:	ea45 0103 	orr.w	r1, r5, r3
 800064c:	bd30      	pop	{r4, r5, pc}
 800064e:	f1c4 040c 	rsb	r4, r4, #12
 8000652:	f1c4 0220 	rsb	r2, r4, #32
 8000656:	fa20 f002 	lsr.w	r0, r0, r2
 800065a:	fa01 f304 	lsl.w	r3, r1, r4
 800065e:	ea40 0003 	orr.w	r0, r0, r3
 8000662:	4629      	mov	r1, r5
 8000664:	bd30      	pop	{r4, r5, pc}
 8000666:	fa21 f004 	lsr.w	r0, r1, r4
 800066a:	4629      	mov	r1, r5
 800066c:	bd30      	pop	{r4, r5, pc}
 800066e:	f094 0f00 	teq	r4, #0
 8000672:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000676:	bf06      	itte	eq
 8000678:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800067c:	3401      	addeq	r4, #1
 800067e:	3d01      	subne	r5, #1
 8000680:	e74e      	b.n	8000520 <__adddf3+0x8c>
 8000682:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000686:	bf18      	it	ne
 8000688:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800068c:	d029      	beq.n	80006e2 <__adddf3+0x24e>
 800068e:	ea94 0f05 	teq	r4, r5
 8000692:	bf08      	it	eq
 8000694:	ea90 0f02 	teqeq	r0, r2
 8000698:	d005      	beq.n	80006a6 <__adddf3+0x212>
 800069a:	ea54 0c00 	orrs.w	ip, r4, r0
 800069e:	bf04      	itt	eq
 80006a0:	4619      	moveq	r1, r3
 80006a2:	4610      	moveq	r0, r2
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	ea91 0f03 	teq	r1, r3
 80006aa:	bf1e      	ittt	ne
 80006ac:	2100      	movne	r1, #0
 80006ae:	2000      	movne	r0, #0
 80006b0:	bd30      	popne	{r4, r5, pc}
 80006b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b6:	d105      	bne.n	80006c4 <__adddf3+0x230>
 80006b8:	0040      	lsls	r0, r0, #1
 80006ba:	4149      	adcs	r1, r1
 80006bc:	bf28      	it	cs
 80006be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006c2:	bd30      	pop	{r4, r5, pc}
 80006c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c8:	bf3c      	itt	cc
 80006ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ce:	bd30      	popcc	{r4, r5, pc}
 80006d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e6:	bf1a      	itte	ne
 80006e8:	4619      	movne	r1, r3
 80006ea:	4610      	movne	r0, r2
 80006ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f0:	bf1c      	itt	ne
 80006f2:	460b      	movne	r3, r1
 80006f4:	4602      	movne	r2, r0
 80006f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006fa:	bf06      	itte	eq
 80006fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000700:	ea91 0f03 	teqeq	r1, r3
 8000704:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	bf00      	nop

0800070c <__aeabi_ui2d>:
 800070c:	f090 0f00 	teq	r0, #0
 8000710:	bf04      	itt	eq
 8000712:	2100      	moveq	r1, #0
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800071c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000720:	f04f 0500 	mov.w	r5, #0
 8000724:	f04f 0100 	mov.w	r1, #0
 8000728:	e750      	b.n	80005cc <__adddf3+0x138>
 800072a:	bf00      	nop

0800072c <__aeabi_i2d>:
 800072c:	f090 0f00 	teq	r0, #0
 8000730:	bf04      	itt	eq
 8000732:	2100      	moveq	r1, #0
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800073c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000740:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000744:	bf48      	it	mi
 8000746:	4240      	negmi	r0, r0
 8000748:	f04f 0100 	mov.w	r1, #0
 800074c:	e73e      	b.n	80005cc <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_f2d>:
 8000750:	0042      	lsls	r2, r0, #1
 8000752:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000756:	ea4f 0131 	mov.w	r1, r1, rrx
 800075a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075e:	bf1f      	itttt	ne
 8000760:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000764:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000768:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800076c:	4770      	bxne	lr
 800076e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000772:	bf08      	it	eq
 8000774:	4770      	bxeq	lr
 8000776:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800077a:	bf04      	itt	eq
 800077c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000788:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800078c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000790:	e71c      	b.n	80005cc <__adddf3+0x138>
 8000792:	bf00      	nop

08000794 <__aeabi_ul2d>:
 8000794:	ea50 0201 	orrs.w	r2, r0, r1
 8000798:	bf08      	it	eq
 800079a:	4770      	bxeq	lr
 800079c:	b530      	push	{r4, r5, lr}
 800079e:	f04f 0500 	mov.w	r5, #0
 80007a2:	e00a      	b.n	80007ba <__aeabi_l2d+0x16>

080007a4 <__aeabi_l2d>:
 80007a4:	ea50 0201 	orrs.w	r2, r0, r1
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	b530      	push	{r4, r5, lr}
 80007ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007b2:	d502      	bpl.n	80007ba <__aeabi_l2d+0x16>
 80007b4:	4240      	negs	r0, r0
 80007b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c6:	f43f aed8 	beq.w	800057a <__adddf3+0xe6>
 80007ca:	f04f 0203 	mov.w	r2, #3
 80007ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d2:	bf18      	it	ne
 80007d4:	3203      	addne	r2, #3
 80007d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007da:	bf18      	it	ne
 80007dc:	3203      	addne	r2, #3
 80007de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80007f2:	ea40 000e 	orr.w	r0, r0, lr
 80007f6:	fa21 f102 	lsr.w	r1, r1, r2
 80007fa:	4414      	add	r4, r2
 80007fc:	e6bd      	b.n	800057a <__adddf3+0xe6>
 80007fe:	bf00      	nop

08000800 <__aeabi_d2uiz>:
 8000800:	004a      	lsls	r2, r1, #1
 8000802:	d211      	bcs.n	8000828 <__aeabi_d2uiz+0x28>
 8000804:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000808:	d211      	bcs.n	800082e <__aeabi_d2uiz+0x2e>
 800080a:	d50d      	bpl.n	8000828 <__aeabi_d2uiz+0x28>
 800080c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000810:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000814:	d40e      	bmi.n	8000834 <__aeabi_d2uiz+0x34>
 8000816:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800081e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000822:	fa23 f002 	lsr.w	r0, r3, r2
 8000826:	4770      	bx	lr
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	4770      	bx	lr
 800082e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000832:	d102      	bne.n	800083a <__aeabi_d2uiz+0x3a>
 8000834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000838:	4770      	bx	lr
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	4770      	bx	lr

08000840 <__aeabi_uldivmod>:
 8000840:	b953      	cbnz	r3, 8000858 <__aeabi_uldivmod+0x18>
 8000842:	b94a      	cbnz	r2, 8000858 <__aeabi_uldivmod+0x18>
 8000844:	2900      	cmp	r1, #0
 8000846:	bf08      	it	eq
 8000848:	2800      	cmpeq	r0, #0
 800084a:	bf1c      	itt	ne
 800084c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000850:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000854:	f000 b96e 	b.w	8000b34 <__aeabi_idiv0>
 8000858:	f1ad 0c08 	sub.w	ip, sp, #8
 800085c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000860:	f000 f806 	bl	8000870 <__udivmoddi4>
 8000864:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800086c:	b004      	add	sp, #16
 800086e:	4770      	bx	lr

08000870 <__udivmoddi4>:
 8000870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000874:	9e08      	ldr	r6, [sp, #32]
 8000876:	460d      	mov	r5, r1
 8000878:	4604      	mov	r4, r0
 800087a:	468e      	mov	lr, r1
 800087c:	2b00      	cmp	r3, #0
 800087e:	f040 8083 	bne.w	8000988 <__udivmoddi4+0x118>
 8000882:	428a      	cmp	r2, r1
 8000884:	4617      	mov	r7, r2
 8000886:	d947      	bls.n	8000918 <__udivmoddi4+0xa8>
 8000888:	fab2 f382 	clz	r3, r2
 800088c:	b14b      	cbz	r3, 80008a2 <__udivmoddi4+0x32>
 800088e:	f1c3 0120 	rsb	r1, r3, #32
 8000892:	fa05 fe03 	lsl.w	lr, r5, r3
 8000896:	fa20 f101 	lsr.w	r1, r0, r1
 800089a:	409f      	lsls	r7, r3
 800089c:	ea41 0e0e 	orr.w	lr, r1, lr
 80008a0:	409c      	lsls	r4, r3
 80008a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008a6:	fbbe fcf8 	udiv	ip, lr, r8
 80008aa:	fa1f f987 	uxth.w	r9, r7
 80008ae:	fb08 e21c 	mls	r2, r8, ip, lr
 80008b2:	fb0c f009 	mul.w	r0, ip, r9
 80008b6:	0c21      	lsrs	r1, r4, #16
 80008b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80008bc:	4290      	cmp	r0, r2
 80008be:	d90a      	bls.n	80008d6 <__udivmoddi4+0x66>
 80008c0:	18ba      	adds	r2, r7, r2
 80008c2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80008c6:	f080 8118 	bcs.w	8000afa <__udivmoddi4+0x28a>
 80008ca:	4290      	cmp	r0, r2
 80008cc:	f240 8115 	bls.w	8000afa <__udivmoddi4+0x28a>
 80008d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80008d4:	443a      	add	r2, r7
 80008d6:	1a12      	subs	r2, r2, r0
 80008d8:	fbb2 f0f8 	udiv	r0, r2, r8
 80008dc:	fb08 2210 	mls	r2, r8, r0, r2
 80008e0:	fb00 f109 	mul.w	r1, r0, r9
 80008e4:	b2a4      	uxth	r4, r4
 80008e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008ea:	42a1      	cmp	r1, r4
 80008ec:	d909      	bls.n	8000902 <__udivmoddi4+0x92>
 80008ee:	193c      	adds	r4, r7, r4
 80008f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80008f4:	f080 8103 	bcs.w	8000afe <__udivmoddi4+0x28e>
 80008f8:	42a1      	cmp	r1, r4
 80008fa:	f240 8100 	bls.w	8000afe <__udivmoddi4+0x28e>
 80008fe:	3802      	subs	r0, #2
 8000900:	443c      	add	r4, r7
 8000902:	1a64      	subs	r4, r4, r1
 8000904:	2100      	movs	r1, #0
 8000906:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800090a:	b11e      	cbz	r6, 8000914 <__udivmoddi4+0xa4>
 800090c:	2200      	movs	r2, #0
 800090e:	40dc      	lsrs	r4, r3
 8000910:	e9c6 4200 	strd	r4, r2, [r6]
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	b902      	cbnz	r2, 800091c <__udivmoddi4+0xac>
 800091a:	deff      	udf	#255	; 0xff
 800091c:	fab2 f382 	clz	r3, r2
 8000920:	2b00      	cmp	r3, #0
 8000922:	d14f      	bne.n	80009c4 <__udivmoddi4+0x154>
 8000924:	1a8d      	subs	r5, r1, r2
 8000926:	2101      	movs	r1, #1
 8000928:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800092c:	fa1f f882 	uxth.w	r8, r2
 8000930:	fbb5 fcfe 	udiv	ip, r5, lr
 8000934:	fb0e 551c 	mls	r5, lr, ip, r5
 8000938:	fb08 f00c 	mul.w	r0, r8, ip
 800093c:	0c22      	lsrs	r2, r4, #16
 800093e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000942:	42a8      	cmp	r0, r5
 8000944:	d907      	bls.n	8000956 <__udivmoddi4+0xe6>
 8000946:	197d      	adds	r5, r7, r5
 8000948:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800094c:	d202      	bcs.n	8000954 <__udivmoddi4+0xe4>
 800094e:	42a8      	cmp	r0, r5
 8000950:	f200 80e9 	bhi.w	8000b26 <__udivmoddi4+0x2b6>
 8000954:	4694      	mov	ip, r2
 8000956:	1a2d      	subs	r5, r5, r0
 8000958:	fbb5 f0fe 	udiv	r0, r5, lr
 800095c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000960:	fb08 f800 	mul.w	r8, r8, r0
 8000964:	b2a4      	uxth	r4, r4
 8000966:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800096a:	45a0      	cmp	r8, r4
 800096c:	d907      	bls.n	800097e <__udivmoddi4+0x10e>
 800096e:	193c      	adds	r4, r7, r4
 8000970:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000974:	d202      	bcs.n	800097c <__udivmoddi4+0x10c>
 8000976:	45a0      	cmp	r8, r4
 8000978:	f200 80d9 	bhi.w	8000b2e <__udivmoddi4+0x2be>
 800097c:	4610      	mov	r0, r2
 800097e:	eba4 0408 	sub.w	r4, r4, r8
 8000982:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000986:	e7c0      	b.n	800090a <__udivmoddi4+0x9a>
 8000988:	428b      	cmp	r3, r1
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x12e>
 800098c:	2e00      	cmp	r6, #0
 800098e:	f000 80b1 	beq.w	8000af4 <__udivmoddi4+0x284>
 8000992:	2100      	movs	r1, #0
 8000994:	e9c6 0500 	strd	r0, r5, [r6]
 8000998:	4608      	mov	r0, r1
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f183 	clz	r1, r3
 80009a2:	2900      	cmp	r1, #0
 80009a4:	d14b      	bne.n	8000a3e <__udivmoddi4+0x1ce>
 80009a6:	42ab      	cmp	r3, r5
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0x140>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80b9 	bhi.w	8000b22 <__udivmoddi4+0x2b2>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb65 0303 	sbc.w	r3, r5, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2e00      	cmp	r6, #0
 80009bc:	d0aa      	beq.n	8000914 <__udivmoddi4+0xa4>
 80009be:	e9c6 4e00 	strd	r4, lr, [r6]
 80009c2:	e7a7      	b.n	8000914 <__udivmoddi4+0xa4>
 80009c4:	409f      	lsls	r7, r3
 80009c6:	f1c3 0220 	rsb	r2, r3, #32
 80009ca:	40d1      	lsrs	r1, r2
 80009cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009dc:	fa24 f202 	lsr.w	r2, r4, r2
 80009e0:	409d      	lsls	r5, r3
 80009e2:	fb00 fc08 	mul.w	ip, r0, r8
 80009e6:	432a      	orrs	r2, r5
 80009e8:	0c15      	lsrs	r5, r2, #16
 80009ea:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80009ee:	45ac      	cmp	ip, r5
 80009f0:	fa04 f403 	lsl.w	r4, r4, r3
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0x19a>
 80009f6:	197d      	adds	r5, r7, r5
 80009f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009fc:	f080 808f 	bcs.w	8000b1e <__udivmoddi4+0x2ae>
 8000a00:	45ac      	cmp	ip, r5
 8000a02:	f240 808c 	bls.w	8000b1e <__udivmoddi4+0x2ae>
 8000a06:	3802      	subs	r0, #2
 8000a08:	443d      	add	r5, r7
 8000a0a:	eba5 050c 	sub.w	r5, r5, ip
 8000a0e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000a12:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000a16:	fb01 f908 	mul.w	r9, r1, r8
 8000a1a:	b295      	uxth	r5, r2
 8000a1c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a20:	45a9      	cmp	r9, r5
 8000a22:	d907      	bls.n	8000a34 <__udivmoddi4+0x1c4>
 8000a24:	197d      	adds	r5, r7, r5
 8000a26:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000a2a:	d274      	bcs.n	8000b16 <__udivmoddi4+0x2a6>
 8000a2c:	45a9      	cmp	r9, r5
 8000a2e:	d972      	bls.n	8000b16 <__udivmoddi4+0x2a6>
 8000a30:	3902      	subs	r1, #2
 8000a32:	443d      	add	r5, r7
 8000a34:	eba5 0509 	sub.w	r5, r5, r9
 8000a38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a3c:	e778      	b.n	8000930 <__udivmoddi4+0xc0>
 8000a3e:	f1c1 0720 	rsb	r7, r1, #32
 8000a42:	408b      	lsls	r3, r1
 8000a44:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a48:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4c:	fa25 f407 	lsr.w	r4, r5, r7
 8000a50:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a54:	fbb4 f9fe 	udiv	r9, r4, lr
 8000a58:	fa1f f88c 	uxth.w	r8, ip
 8000a5c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000a60:	fa20 f307 	lsr.w	r3, r0, r7
 8000a64:	fb09 fa08 	mul.w	sl, r9, r8
 8000a68:	408d      	lsls	r5, r1
 8000a6a:	431d      	orrs	r5, r3
 8000a6c:	0c2b      	lsrs	r3, r5, #16
 8000a6e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000a72:	45a2      	cmp	sl, r4
 8000a74:	fa02 f201 	lsl.w	r2, r2, r1
 8000a78:	fa00 f301 	lsl.w	r3, r0, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0x222>
 8000a7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a82:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a86:	d248      	bcs.n	8000b1a <__udivmoddi4+0x2aa>
 8000a88:	45a2      	cmp	sl, r4
 8000a8a:	d946      	bls.n	8000b1a <__udivmoddi4+0x2aa>
 8000a8c:	f1a9 0902 	sub.w	r9, r9, #2
 8000a90:	4464      	add	r4, ip
 8000a92:	eba4 040a 	sub.w	r4, r4, sl
 8000a96:	fbb4 f0fe 	udiv	r0, r4, lr
 8000a9a:	fb0e 4410 	mls	r4, lr, r0, r4
 8000a9e:	fb00 fa08 	mul.w	sl, r0, r8
 8000aa2:	b2ad      	uxth	r5, r5
 8000aa4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000aa8:	45a2      	cmp	sl, r4
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x24e>
 8000aac:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000ab4:	d22d      	bcs.n	8000b12 <__udivmoddi4+0x2a2>
 8000ab6:	45a2      	cmp	sl, r4
 8000ab8:	d92b      	bls.n	8000b12 <__udivmoddi4+0x2a2>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4464      	add	r4, ip
 8000abe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ac2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ac6:	eba4 040a 	sub.w	r4, r4, sl
 8000aca:	454c      	cmp	r4, r9
 8000acc:	46c6      	mov	lr, r8
 8000ace:	464d      	mov	r5, r9
 8000ad0:	d319      	bcc.n	8000b06 <__udivmoddi4+0x296>
 8000ad2:	d016      	beq.n	8000b02 <__udivmoddi4+0x292>
 8000ad4:	b15e      	cbz	r6, 8000aee <__udivmoddi4+0x27e>
 8000ad6:	ebb3 020e 	subs.w	r2, r3, lr
 8000ada:	eb64 0405 	sbc.w	r4, r4, r5
 8000ade:	fa04 f707 	lsl.w	r7, r4, r7
 8000ae2:	fa22 f301 	lsr.w	r3, r2, r1
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	40cc      	lsrs	r4, r1
 8000aea:	e9c6 7400 	strd	r7, r4, [r6]
 8000aee:	2100      	movs	r1, #0
 8000af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af4:	4631      	mov	r1, r6
 8000af6:	4630      	mov	r0, r6
 8000af8:	e70c      	b.n	8000914 <__udivmoddi4+0xa4>
 8000afa:	468c      	mov	ip, r1
 8000afc:	e6eb      	b.n	80008d6 <__udivmoddi4+0x66>
 8000afe:	4610      	mov	r0, r2
 8000b00:	e6ff      	b.n	8000902 <__udivmoddi4+0x92>
 8000b02:	4543      	cmp	r3, r8
 8000b04:	d2e6      	bcs.n	8000ad4 <__udivmoddi4+0x264>
 8000b06:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b0a:	eb69 050c 	sbc.w	r5, r9, ip
 8000b0e:	3801      	subs	r0, #1
 8000b10:	e7e0      	b.n	8000ad4 <__udivmoddi4+0x264>
 8000b12:	4628      	mov	r0, r5
 8000b14:	e7d3      	b.n	8000abe <__udivmoddi4+0x24e>
 8000b16:	4611      	mov	r1, r2
 8000b18:	e78c      	b.n	8000a34 <__udivmoddi4+0x1c4>
 8000b1a:	4681      	mov	r9, r0
 8000b1c:	e7b9      	b.n	8000a92 <__udivmoddi4+0x222>
 8000b1e:	4608      	mov	r0, r1
 8000b20:	e773      	b.n	8000a0a <__udivmoddi4+0x19a>
 8000b22:	4608      	mov	r0, r1
 8000b24:	e749      	b.n	80009ba <__udivmoddi4+0x14a>
 8000b26:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b2a:	443d      	add	r5, r7
 8000b2c:	e713      	b.n	8000956 <__udivmoddi4+0xe6>
 8000b2e:	3802      	subs	r0, #2
 8000b30:	443c      	add	r4, r7
 8000b32:	e724      	b.n	800097e <__udivmoddi4+0x10e>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2110      	movs	r1, #16
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <SELECT+0x18>)
 8000b42:	f001 fc17 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f001 f988 	bl	8001e5c <HAL_Delay>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40010800 	.word	0x40010800

08000b54 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <DESELECT+0x18>)
 8000b5e:	f001 fc09 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f001 f97a 	bl	8001e5c <HAL_Delay>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40010800 	.word	0x40010800

08000b70 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b7a:	bf00      	nop
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <SPI_TxByte+0x30>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d1f8      	bne.n	8000b7c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000b8a:	1df9      	adds	r1, r7, #7
 8000b8c:	2364      	movs	r3, #100	; 0x64
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <SPI_TxByte+0x30>)
 8000b92:	f002 f997 	bl	8002ec4 <HAL_SPI_Transmit>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20001410 	.word	0x20001410

08000ba4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bb0:	bf00      	nop
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <SPI_TxBuffer+0x30>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d1f8      	bne.n	8000bb2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000bc0:	887a      	ldrh	r2, [r7, #2]
 8000bc2:	2364      	movs	r3, #100	; 0x64
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <SPI_TxBuffer+0x30>)
 8000bc8:	f002 f97c 	bl	8002ec4 <HAL_SPI_Transmit>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20001410 	.word	0x20001410

08000bd8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000bde:	23ff      	movs	r3, #255	; 0xff
 8000be0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000be2:	bf00      	nop
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <SPI_RxByte+0x34>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d1f8      	bne.n	8000be4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000bf2:	1dba      	adds	r2, r7, #6
 8000bf4:	1df9      	adds	r1, r7, #7
 8000bf6:	2364      	movs	r3, #100	; 0x64
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <SPI_RxByte+0x34>)
 8000bfe:	f002 fa9d 	bl	800313c <HAL_SPI_TransmitReceive>

	return data;
 8000c02:	79bb      	ldrb	r3, [r7, #6]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20001410 	.word	0x20001410

08000c10 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c18:	f7ff ffde 	bl	8000bd8 <SPI_RxByte>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461a      	mov	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	701a      	strb	r2, [r3, #0]
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <SD_ReadyWait+0x30>)
 8000c34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c38:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000c3a:	f7ff ffcd 	bl	8000bd8 <SPI_RxByte>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2bff      	cmp	r3, #255	; 0xff
 8000c46:	d003      	beq.n	8000c50 <SD_ReadyWait+0x24>
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SD_ReadyWait+0x30>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f4      	bne.n	8000c3a <SD_ReadyWait+0xe>

	return res;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200002e0 	.word	0x200002e0

08000c60 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000c66:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c6a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000c6c:	f7ff ff72 	bl	8000b54 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	e005      	b.n	8000c82 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000c76:	20ff      	movs	r0, #255	; 0xff
 8000c78:	f7ff ff7a 	bl	8000b70 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b09      	cmp	r3, #9
 8000c86:	ddf6      	ble.n	8000c76 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000c88:	f7ff ff56 	bl	8000b38 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000c8c:	2340      	movs	r3, #64	; 0x40
 8000c8e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ca0:	2395      	movs	r3, #149	; 0x95
 8000ca2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2106      	movs	r1, #6
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff7b 	bl	8000ba4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000cae:	e002      	b.n	8000cb6 <SD_PowerOn+0x56>
	{
		cnt--;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000cb6:	f7ff ff8f 	bl	8000bd8 <SPI_RxByte>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d002      	beq.n	8000cc6 <SD_PowerOn+0x66>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1f4      	bne.n	8000cb0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000cc6:	f7ff ff45 	bl	8000b54 <DESELECT>
	SPI_TxByte(0XFF);
 8000cca:	20ff      	movs	r0, #255	; 0xff
 8000ccc:	f7ff ff50 	bl	8000b70 <SPI_TxByte>

	PowerFlag = 1;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <SD_PowerOn+0x80>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000a5 	.word	0x200000a5

08000ce4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <SD_PowerOff+0x14>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	200000a5 	.word	0x200000a5

08000cfc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d00:	4b02      	ldr	r3, [pc, #8]	; (8000d0c <SD_CheckPower+0x10>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	200000a5 	.word	0x200000a5

08000d10 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <SD_RxDataBlock+0x58>)
 8000d1c:	22c8      	movs	r2, #200	; 0xc8
 8000d1e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d20:	f7ff ff5a 	bl	8000bd8 <SPI_RxByte>
 8000d24:	4603      	mov	r3, r0
 8000d26:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	2bff      	cmp	r3, #255	; 0xff
 8000d2c:	d103      	bne.n	8000d36 <SD_RxDataBlock+0x26>
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <SD_RxDataBlock+0x58>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f4      	bne.n	8000d20 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	2bfe      	cmp	r3, #254	; 0xfe
 8000d3a:	d001      	beq.n	8000d40 <SD_RxDataBlock+0x30>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e00f      	b.n	8000d60 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff62 	bl	8000c10 <SPI_RxBytePtr>
	} while(len--);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	603a      	str	r2, [r7, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f4      	bne.n	8000d40 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000d56:	f7ff ff3f 	bl	8000bd8 <SPI_RxByte>
	SPI_RxByte();
 8000d5a:	f7ff ff3d 	bl	8000bd8 <SPI_RxByte>

	return TRUE;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200002e2 	.word	0x200002e2

08000d6c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000d7c:	f7ff ff56 	bl	8000c2c <SD_ReadyWait>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2bff      	cmp	r3, #255	; 0xff
 8000d84:	d001      	beq.n	8000d8a <SD_TxDataBlock+0x1e>
 8000d86:	2300      	movs	r3, #0
 8000d88:	e02f      	b.n	8000dea <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000d8a:	78fb      	ldrb	r3, [r7, #3]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff feef 	bl	8000b70 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000d92:	78fb      	ldrb	r3, [r7, #3]
 8000d94:	2bfd      	cmp	r3, #253	; 0xfd
 8000d96:	d020      	beq.n	8000dda <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff01 	bl	8000ba4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000da2:	f7ff ff19 	bl	8000bd8 <SPI_RxByte>
		SPI_RxByte();
 8000da6:	f7ff ff17 	bl	8000bd8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000daa:	e00b      	b.n	8000dc4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000dac:	f7ff ff14 	bl	8000bd8 <SPI_RxByte>
 8000db0:	4603      	mov	r3, r0
 8000db2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	2b05      	cmp	r3, #5
 8000dbc:	d006      	beq.n	8000dcc <SD_TxDataBlock+0x60>
			i++;
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	2b40      	cmp	r3, #64	; 0x40
 8000dc8:	d9f0      	bls.n	8000dac <SD_TxDataBlock+0x40>
 8000dca:	e000      	b.n	8000dce <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000dcc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000dce:	bf00      	nop
 8000dd0:	f7ff ff02 	bl	8000bd8 <SPI_RxByte>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0fa      	beq.n	8000dd0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	f003 031f 	and.w	r3, r3, #31
 8000de0:	2b05      	cmp	r3, #5
 8000de2:	d101      	bne.n	8000de8 <SD_TxDataBlock+0x7c>
 8000de4:	2301      	movs	r3, #1
 8000de6:	e000      	b.n	8000dea <SD_TxDataBlock+0x7e>

	return FALSE;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	6039      	str	r1, [r7, #0]
 8000dfc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000dfe:	f7ff ff15 	bl	8000c2c <SD_ReadyWait>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2bff      	cmp	r3, #255	; 0xff
 8000e06:	d001      	beq.n	8000e0c <SD_SendCmd+0x1a>
 8000e08:	23ff      	movs	r3, #255	; 0xff
 8000e0a:	e042      	b.n	8000e92 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff feae 	bl	8000b70 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	0e1b      	lsrs	r3, r3, #24
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fea8 	bl	8000b70 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fea2 	bl	8000b70 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	0a1b      	lsrs	r3, r3, #8
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fe9c 	bl	8000b70 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe97 	bl	8000b70 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b40      	cmp	r3, #64	; 0x40
 8000e46:	d102      	bne.n	8000e4e <SD_SendCmd+0x5c>
 8000e48:	2395      	movs	r3, #149	; 0x95
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e007      	b.n	8000e5e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b48      	cmp	r3, #72	; 0x48
 8000e52:	d102      	bne.n	8000e5a <SD_SendCmd+0x68>
 8000e54:	2387      	movs	r3, #135	; 0x87
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	e001      	b.n	8000e5e <SD_SendCmd+0x6c>
	else crc = 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fe85 	bl	8000b70 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b4c      	cmp	r3, #76	; 0x4c
 8000e6a:	d101      	bne.n	8000e70 <SD_SendCmd+0x7e>
 8000e6c:	f7ff feb4 	bl	8000bd8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000e70:	230a      	movs	r3, #10
 8000e72:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000e74:	f7ff feb0 	bl	8000bd8 <SPI_RxByte>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000e7c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	da05      	bge.n	8000e90 <SD_SendCmd+0x9e>
 8000e84:	7bbb      	ldrb	r3, [r7, #14]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	73bb      	strb	r3, [r7, #14]
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f1      	bne.n	8000e74 <SD_SendCmd+0x82>

	return res;
 8000e90:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SD_disk_initialize+0x14>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e0d1      	b.n	8001054 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000eb0:	4b6a      	ldr	r3, [pc, #424]	; (800105c <SD_disk_initialize+0x1c0>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <SD_disk_initialize+0x2a>
 8000ebe:	4b67      	ldr	r3, [pc, #412]	; (800105c <SD_disk_initialize+0x1c0>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	e0c6      	b.n	8001054 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000ec6:	f7ff fecb 	bl	8000c60 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000eca:	f7ff fe35 	bl	8000b38 <SELECT>

	/* check disk type */
	type = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2040      	movs	r0, #64	; 0x40
 8000ed6:	f7ff ff8c 	bl	8000df2 <SD_SendCmd>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	f040 80a1 	bne.w	8001024 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000ee2:	4b5f      	ldr	r3, [pc, #380]	; (8001060 <SD_disk_initialize+0x1c4>)
 8000ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ee8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000eea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000eee:	2048      	movs	r0, #72	; 0x48
 8000ef0:	f7ff ff7f 	bl	8000df2 <SD_SendCmd>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d155      	bne.n	8000fa6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e00c      	b.n	8000f1a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f00:	7bfc      	ldrb	r4, [r7, #15]
 8000f02:	f7ff fe69 	bl	8000bd8 <SPI_RxByte>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4423      	add	r3, r4
 8000f10:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	3301      	adds	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d9ef      	bls.n	8000f00 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f20:	7abb      	ldrb	r3, [r7, #10]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d17e      	bne.n	8001024 <SD_disk_initialize+0x188>
 8000f26:	7afb      	ldrb	r3, [r7, #11]
 8000f28:	2baa      	cmp	r3, #170	; 0xaa
 8000f2a:	d17b      	bne.n	8001024 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2077      	movs	r0, #119	; 0x77
 8000f30:	f7ff ff5f 	bl	8000df2 <SD_SendCmd>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d807      	bhi.n	8000f4a <SD_disk_initialize+0xae>
 8000f3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f3e:	2069      	movs	r0, #105	; 0x69
 8000f40:	f7ff ff57 	bl	8000df2 <SD_SendCmd>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d004      	beq.n	8000f54 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000f4a:	4b45      	ldr	r3, [pc, #276]	; (8001060 <SD_disk_initialize+0x1c4>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1ec      	bne.n	8000f2c <SD_disk_initialize+0x90>
 8000f52:	e000      	b.n	8000f56 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f54:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000f56:	4b42      	ldr	r3, [pc, #264]	; (8001060 <SD_disk_initialize+0x1c4>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d062      	beq.n	8001024 <SD_disk_initialize+0x188>
 8000f5e:	2100      	movs	r1, #0
 8000f60:	207a      	movs	r0, #122	; 0x7a
 8000f62:	f7ff ff46 	bl	8000df2 <SD_SendCmd>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d15b      	bne.n	8001024 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e00c      	b.n	8000f8c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000f72:	7bfc      	ldrb	r4, [r7, #15]
 8000f74:	f7ff fe30 	bl	8000bd8 <SPI_RxByte>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4423      	add	r3, r4
 8000f82:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d9ef      	bls.n	8000f72 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000f92:	7a3b      	ldrb	r3, [r7, #8]
 8000f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SD_disk_initialize+0x104>
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	e000      	b.n	8000fa2 <SD_disk_initialize+0x106>
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	73bb      	strb	r3, [r7, #14]
 8000fa4:	e03e      	b.n	8001024 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2077      	movs	r0, #119	; 0x77
 8000faa:	f7ff ff22 	bl	8000df2 <SD_SendCmd>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d808      	bhi.n	8000fc6 <SD_disk_initialize+0x12a>
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2069      	movs	r0, #105	; 0x69
 8000fb8:	f7ff ff1b 	bl	8000df2 <SD_SendCmd>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d801      	bhi.n	8000fc6 <SD_disk_initialize+0x12a>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e000      	b.n	8000fc8 <SD_disk_initialize+0x12c>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d10e      	bne.n	8000fee <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2077      	movs	r0, #119	; 0x77
 8000fd4:	f7ff ff0d 	bl	8000df2 <SD_SendCmd>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d80e      	bhi.n	8000ffc <SD_disk_initialize+0x160>
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2069      	movs	r0, #105	; 0x69
 8000fe2:	f7ff ff06 	bl	8000df2 <SD_SendCmd>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d107      	bne.n	8000ffc <SD_disk_initialize+0x160>
 8000fec:	e00c      	b.n	8001008 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2041      	movs	r0, #65	; 0x41
 8000ff2:	f7ff fefe 	bl	8000df2 <SD_SendCmd>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d004      	beq.n	8001006 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <SD_disk_initialize+0x1c4>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1e2      	bne.n	8000fca <SD_disk_initialize+0x12e>
 8001004:	e000      	b.n	8001008 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001006:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <SD_disk_initialize+0x1c4>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d007      	beq.n	8001020 <SD_disk_initialize+0x184>
 8001010:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001014:	2050      	movs	r0, #80	; 0x50
 8001016:	f7ff feec 	bl	8000df2 <SD_SendCmd>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SD_disk_initialize+0x188>
 8001020:	2300      	movs	r3, #0
 8001022:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001024:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <SD_disk_initialize+0x1c8>)
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800102a:	f7ff fd93 	bl	8000b54 <DESELECT>
	SPI_RxByte();
 800102e:	f7ff fdd3 	bl	8000bd8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d008      	beq.n	800104a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <SD_disk_initialize+0x1c0>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f023 0301 	bic.w	r3, r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SD_disk_initialize+0x1c0>)
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e001      	b.n	800104e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800104a:	f7ff fe4b 	bl	8000ce4 <SD_PowerOff>
	}

	return Stat;
 800104e:	4b03      	ldr	r3, [pc, #12]	; (800105c <SD_disk_initialize+0x1c0>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b2db      	uxtb	r3, r3
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	200002e2 	.word	0x200002e2
 8001064:	200000a4 	.word	0x200000a4

08001068 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SD_disk_status+0x14>
 8001078:	2301      	movs	r3, #1
 800107a:	e002      	b.n	8001082 <SD_disk_status+0x1a>
	return Stat;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <SD_disk_status+0x24>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	20000000 	.word	0x20000000

08001090 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d102      	bne.n	80010ac <SD_disk_read+0x1c>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <SD_disk_read+0x20>
 80010ac:	2304      	movs	r3, #4
 80010ae:	e051      	b.n	8001154 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <SD_disk_read+0xcc>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SD_disk_read+0x32>
 80010be:	2303      	movs	r3, #3
 80010c0:	e048      	b.n	8001154 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80010c2:	4b27      	ldr	r3, [pc, #156]	; (8001160 <SD_disk_read+0xd0>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <SD_disk_read+0x44>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	025b      	lsls	r3, r3, #9
 80010d2:	607b      	str	r3, [r7, #4]

	SELECT();
 80010d4:	f7ff fd30 	bl	8000b38 <SELECT>

	if (count == 1)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d111      	bne.n	8001102 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	2051      	movs	r0, #81	; 0x51
 80010e2:	f7ff fe86 	bl	8000df2 <SD_SendCmd>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d129      	bne.n	8001140 <SD_disk_read+0xb0>
 80010ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f0:	68b8      	ldr	r0, [r7, #8]
 80010f2:	f7ff fe0d 	bl	8000d10 <SD_RxDataBlock>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d021      	beq.n	8001140 <SD_disk_read+0xb0>
 80010fc:	2300      	movs	r3, #0
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	e01e      	b.n	8001140 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	2052      	movs	r0, #82	; 0x52
 8001106:	f7ff fe74 	bl	8000df2 <SD_SendCmd>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d117      	bne.n	8001140 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001114:	68b8      	ldr	r0, [r7, #8]
 8001116:	f7ff fdfb 	bl	8000d10 <SD_RxDataBlock>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00a      	beq.n	8001136 <SD_disk_read+0xa6>
				buff += 512;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001126:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	3b01      	subs	r3, #1
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1ed      	bne.n	8001110 <SD_disk_read+0x80>
 8001134:	e000      	b.n	8001138 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001136:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001138:	2100      	movs	r1, #0
 800113a:	204c      	movs	r0, #76	; 0x4c
 800113c:	f7ff fe59 	bl	8000df2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001140:	f7ff fd08 	bl	8000b54 <DESELECT>
	SPI_RxByte();
 8001144:	f7ff fd48 	bl	8000bd8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	bf14      	ite	ne
 800114e:	2301      	movne	r3, #1
 8001150:	2300      	moveq	r3, #0
 8001152:	b2db      	uxtb	r3, r3
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	200000a4 	.word	0x200000a4

08001164 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <SD_disk_write+0x1c>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <SD_disk_write+0x20>
 8001180:	2304      	movs	r3, #4
 8001182:	e06b      	b.n	800125c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <SD_disk_write+0x100>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SD_disk_write+0x32>
 8001192:	2303      	movs	r3, #3
 8001194:	e062      	b.n	800125c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001196:	4b33      	ldr	r3, [pc, #204]	; (8001264 <SD_disk_write+0x100>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SD_disk_write+0x44>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e059      	b.n	800125c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <SD_disk_write+0x104>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <SD_disk_write+0x56>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	607b      	str	r3, [r7, #4]

	SELECT();
 80011ba:	f7ff fcbd 	bl	8000b38 <SELECT>

	if (count == 1)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d110      	bne.n	80011e6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	2058      	movs	r0, #88	; 0x58
 80011c8:	f7ff fe13 	bl	8000df2 <SD_SendCmd>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d13a      	bne.n	8001248 <SD_disk_write+0xe4>
 80011d2:	21fe      	movs	r1, #254	; 0xfe
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f7ff fdc9 	bl	8000d6c <SD_TxDataBlock>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d033      	beq.n	8001248 <SD_disk_write+0xe4>
			count = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	e030      	b.n	8001248 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <SD_disk_write+0x104>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80011f2:	2100      	movs	r1, #0
 80011f4:	2077      	movs	r0, #119	; 0x77
 80011f6:	f7ff fdfc 	bl	8000df2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80011fa:	6839      	ldr	r1, [r7, #0]
 80011fc:	2057      	movs	r0, #87	; 0x57
 80011fe:	f7ff fdf8 	bl	8000df2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2059      	movs	r0, #89	; 0x59
 8001206:	f7ff fdf4 	bl	8000df2 <SD_SendCmd>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d11b      	bne.n	8001248 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001210:	21fc      	movs	r1, #252	; 0xfc
 8001212:	68b8      	ldr	r0, [r7, #8]
 8001214:	f7ff fdaa 	bl	8000d6c <SD_TxDataBlock>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00a      	beq.n	8001234 <SD_disk_write+0xd0>
				buff += 512;
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001224:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3b01      	subs	r3, #1
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1ee      	bne.n	8001210 <SD_disk_write+0xac>
 8001232:	e000      	b.n	8001236 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001234:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001236:	21fd      	movs	r1, #253	; 0xfd
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fd97 	bl	8000d6c <SD_TxDataBlock>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <SD_disk_write+0xe4>
			{
				count = 1;
 8001244:	2301      	movs	r3, #1
 8001246:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001248:	f7ff fc84 	bl	8000b54 <DESELECT>
	SPI_RxByte();
 800124c:	f7ff fcc4 	bl	8000bd8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	200000a4 	.word	0x200000a4

0800126c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b08b      	sub	sp, #44	; 0x2c
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	603a      	str	r2, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	460b      	mov	r3, r1
 800127a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SD_disk_ioctl+0x1e>
 8001286:	2304      	movs	r3, #4
 8001288:	e115      	b.n	80014b6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	2b05      	cmp	r3, #5
 8001294:	d124      	bne.n	80012e0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d012      	beq.n	80012c4 <SD_disk_ioctl+0x58>
 800129e:	2b02      	cmp	r3, #2
 80012a0:	dc1a      	bgt.n	80012d8 <SD_disk_ioctl+0x6c>
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <SD_disk_ioctl+0x40>
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d006      	beq.n	80012b8 <SD_disk_ioctl+0x4c>
 80012aa:	e015      	b.n	80012d8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80012ac:	f7ff fd1a 	bl	8000ce4 <SD_PowerOff>
			res = RES_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012b6:	e0fc      	b.n	80014b2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80012b8:	f7ff fcd2 	bl	8000c60 <SD_PowerOn>
			res = RES_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012c2:	e0f6      	b.n	80014b2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	1c5c      	adds	r4, r3, #1
 80012c8:	f7ff fd18 	bl	8000cfc <SD_CheckPower>
 80012cc:	4603      	mov	r3, r0
 80012ce:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012d6:	e0ec      	b.n	80014b2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80012d8:	2304      	movs	r3, #4
 80012da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012de:	e0e8      	b.n	80014b2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012e0:	4b77      	ldr	r3, [pc, #476]	; (80014c0 <SD_disk_ioctl+0x254>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SD_disk_ioctl+0x86>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e0e1      	b.n	80014b6 <SD_disk_ioctl+0x24a>

		SELECT();
 80012f2:	f7ff fc21 	bl	8000b38 <SELECT>

		switch (ctrl)
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	2b0d      	cmp	r3, #13
 80012fa:	f200 80cb 	bhi.w	8001494 <SD_disk_ioctl+0x228>
 80012fe:	a201      	add	r2, pc, #4	; (adr r2, 8001304 <SD_disk_ioctl+0x98>)
 8001300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001304:	080013ff 	.word	0x080013ff
 8001308:	0800133d 	.word	0x0800133d
 800130c:	080013ef 	.word	0x080013ef
 8001310:	08001495 	.word	0x08001495
 8001314:	08001495 	.word	0x08001495
 8001318:	08001495 	.word	0x08001495
 800131c:	08001495 	.word	0x08001495
 8001320:	08001495 	.word	0x08001495
 8001324:	08001495 	.word	0x08001495
 8001328:	08001495 	.word	0x08001495
 800132c:	08001495 	.word	0x08001495
 8001330:	08001411 	.word	0x08001411
 8001334:	08001435 	.word	0x08001435
 8001338:	08001459 	.word	0x08001459
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800133c:	2100      	movs	r1, #0
 800133e:	2049      	movs	r0, #73	; 0x49
 8001340:	f7ff fd57 	bl	8000df2 <SD_SendCmd>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 80a8 	bne.w	800149c <SD_disk_ioctl+0x230>
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2110      	movs	r1, #16
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fcdc 	bl	8000d10 <SD_RxDataBlock>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 809e 	beq.w	800149c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	099b      	lsrs	r3, r3, #6
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d10e      	bne.n	8001388 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800136a:	7d7b      	ldrb	r3, [r7, #21]
 800136c:	b29a      	uxth	r2, r3
 800136e:	7d3b      	ldrb	r3, [r7, #20]
 8001370:	b29b      	uxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b29b      	uxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b29b      	uxth	r3, r3
 800137a:	3301      	adds	r3, #1
 800137c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800137e:	8bfb      	ldrh	r3, [r7, #30]
 8001380:	029a      	lsls	r2, r3, #10
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e02e      	b.n	80013e6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001388:	7c7b      	ldrb	r3, [r7, #17]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	b2da      	uxtb	r2, r3
 8001390:	7dbb      	ldrb	r3, [r7, #22]
 8001392:	09db      	lsrs	r3, r3, #7
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	b2da      	uxtb	r2, r3
 800139a:	7d7b      	ldrb	r3, [r7, #21]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f003 0306 	and.w	r3, r3, #6
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	3302      	adds	r3, #2
 80013ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80013b0:	7d3b      	ldrb	r3, [r7, #20]
 80013b2:	099b      	lsrs	r3, r3, #6
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	7cfb      	ldrb	r3, [r7, #19]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	7cbb      	ldrb	r3, [r7, #18]
 80013c6:	029b      	lsls	r3, r3, #10
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80013d8:	8bfa      	ldrh	r2, [r7, #30]
 80013da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013de:	3b09      	subs	r3, #9
 80013e0:	409a      	lsls	r2, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80013ec:	e056      	b.n	800149c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013fc:	e055      	b.n	80014aa <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80013fe:	f7ff fc15 	bl	8000c2c <SD_ReadyWait>
 8001402:	4603      	mov	r3, r0
 8001404:	2bff      	cmp	r3, #255	; 0xff
 8001406:	d14b      	bne.n	80014a0 <SD_disk_ioctl+0x234>
 8001408:	2300      	movs	r3, #0
 800140a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800140e:	e047      	b.n	80014a0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001410:	2100      	movs	r1, #0
 8001412:	2049      	movs	r0, #73	; 0x49
 8001414:	f7ff fced 	bl	8000df2 <SD_SendCmd>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d142      	bne.n	80014a4 <SD_disk_ioctl+0x238>
 800141e:	2110      	movs	r1, #16
 8001420:	6a38      	ldr	r0, [r7, #32]
 8001422:	f7ff fc75 	bl	8000d10 <SD_RxDataBlock>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d03b      	beq.n	80014a4 <SD_disk_ioctl+0x238>
 800142c:	2300      	movs	r3, #0
 800142e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001432:	e037      	b.n	80014a4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001434:	2100      	movs	r1, #0
 8001436:	204a      	movs	r0, #74	; 0x4a
 8001438:	f7ff fcdb 	bl	8000df2 <SD_SendCmd>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d132      	bne.n	80014a8 <SD_disk_ioctl+0x23c>
 8001442:	2110      	movs	r1, #16
 8001444:	6a38      	ldr	r0, [r7, #32]
 8001446:	f7ff fc63 	bl	8000d10 <SD_RxDataBlock>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d02b      	beq.n	80014a8 <SD_disk_ioctl+0x23c>
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001456:	e027      	b.n	80014a8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001458:	2100      	movs	r1, #0
 800145a:	207a      	movs	r0, #122	; 0x7a
 800145c:	f7ff fcc9 	bl	8000df2 <SD_SendCmd>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d116      	bne.n	8001494 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001466:	2300      	movs	r3, #0
 8001468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800146c:	e00b      	b.n	8001486 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800146e:	6a3c      	ldr	r4, [r7, #32]
 8001470:	1c63      	adds	r3, r4, #1
 8001472:	623b      	str	r3, [r7, #32]
 8001474:	f7ff fbb0 	bl	8000bd8 <SPI_RxByte>
 8001478:	4603      	mov	r3, r0
 800147a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800147c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001480:	3301      	adds	r3, #1
 8001482:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001486:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800148a:	2b03      	cmp	r3, #3
 800148c:	d9ef      	bls.n	800146e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001494:	2304      	movs	r3, #4
 8001496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800149a:	e006      	b.n	80014aa <SD_disk_ioctl+0x23e>
			break;
 800149c:	bf00      	nop
 800149e:	e004      	b.n	80014aa <SD_disk_ioctl+0x23e>
			break;
 80014a0:	bf00      	nop
 80014a2:	e002      	b.n	80014aa <SD_disk_ioctl+0x23e>
			break;
 80014a4:	bf00      	nop
 80014a6:	e000      	b.n	80014aa <SD_disk_ioctl+0x23e>
			break;
 80014a8:	bf00      	nop
		}

		DESELECT();
 80014aa:	f7ff fb53 	bl	8000b54 <DESELECT>
		SPI_RxByte();
 80014ae:	f7ff fb93 	bl	8000bd8 <SPI_RxByte>
	}

	return res;
 80014b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	372c      	adds	r7, #44	; 0x2c
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000000 	.word	0x20000000

080014c4 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	int i=0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 80014d0:	e002      	b.n	80014d8 <bufsize+0x14>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3301      	adds	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f6      	bne.n	80014d2 <bufsize+0xe>
	return i;
 80014e4:	68fb      	ldr	r3, [r7, #12]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <clear_buffer>:

void clear_buffer (void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	e007      	b.n	800150c <clear_buffer+0x1c>
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <clear_buffer+0x30>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3301      	adds	r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b7f      	cmp	r3, #127	; 0x7f
 8001510:	ddf4      	ble.n	80014fc <clear_buffer+0xc>
}
 8001512:	bf00      	nop
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20001384 	.word	0x20001384

08001524 <send_uart>:

void send_uart (char *string)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7fe fe79 	bl	8000224 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	b29a      	uxth	r2, r3
 800153a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <send_uart+0x2c>)
 8001542:	f002 f890 	bl	8003666 <HAL_UART_Transmit>
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20001340 	.word	0x20001340

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f000 fc1e 	bl	8001d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f9c6 	bl	80018ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001560:	f000 fa78 	bl	8001a54 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001564:	f000 fa16 	bl	8001994 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001568:	f000 fa4a 	bl	8001a00 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800156c:	f002 f9e6 	bl	800393c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  fresult = f_mount(&fs, "/", 1);
 8001570:	2201      	movs	r2, #1
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <main+0x40>)
 8001574:	4808      	ldr	r0, [pc, #32]	; (8001598 <main+0x44>)
 8001576:	f005 f8fb 	bl	8006770 <f_mount>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <main+0x48>)
 8001580:	701a      	strb	r2, [r3, #0]
  	if (fresult != FR_OK){
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <main+0x48>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00c      	beq.n	80015a4 <main+0x50>
  		send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <main+0x4c>)
 800158c:	f7ff ffca 	bl	8001524 <send_uart>
 8001590:	e16b      	b.n	800186a <main+0x316>
 8001592:	bf00      	nop
 8001594:	080090a0 	.word	0x080090a0
 8001598:	20000308 	.word	0x20000308
 800159c:	2000140c 	.word	0x2000140c
 80015a0:	080090a4 	.word	0x080090a4
  	}
  	else{
  		send_uart("SD CARD mounted successfully...\n\n");
 80015a4:	48b1      	ldr	r0, [pc, #708]	; (800186c <main+0x318>)
 80015a6:	f7ff ffbd 	bl	8001524 <send_uart>


  	/*************** Card capacity details ********************/

  	/* Check free space */
  	f_getfree("", &fre_clust, &pfs);
 80015aa:	4ab1      	ldr	r2, [pc, #708]	; (8001870 <main+0x31c>)
 80015ac:	49b1      	ldr	r1, [pc, #708]	; (8001874 <main+0x320>)
 80015ae:	48b2      	ldr	r0, [pc, #712]	; (8001878 <main+0x324>)
 80015b0:	f006 fd28 	bl	8008004 <f_getfree>

  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80015b4:	4bae      	ldr	r3, [pc, #696]	; (8001870 <main+0x31c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015bc:	3314      	adds	r3, #20
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	1e9a      	subs	r2, r3, #2
 80015c2:	4bab      	ldr	r3, [pc, #684]	; (8001870 <main+0x31c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ca:	3302      	adds	r3, #2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	fb03 f302 	mul.w	r3, r3, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f89a 	bl	800070c <__aeabi_ui2d>
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4ba7      	ldr	r3, [pc, #668]	; (800187c <main+0x328>)
 80015de:	f7fe fe29 	bl	8000234 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff f909 	bl	8000800 <__aeabi_d2uiz>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4aa3      	ldr	r2, [pc, #652]	; (8001880 <main+0x32c>)
 80015f2:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 80015f4:	4ba2      	ldr	r3, [pc, #648]	; (8001880 <main+0x32c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	49a2      	ldr	r1, [pc, #648]	; (8001884 <main+0x330>)
 80015fc:	48a2      	ldr	r0, [pc, #648]	; (8001888 <main+0x334>)
 80015fe:	f007 f917 	bl	8008830 <siprintf>
  	send_uart(buffer);
 8001602:	48a1      	ldr	r0, [pc, #644]	; (8001888 <main+0x334>)
 8001604:	f7ff ff8e 	bl	8001524 <send_uart>
  	clear_buffer();
 8001608:	f7ff ff72 	bl	80014f0 <clear_buffer>
  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800160c:	4b98      	ldr	r3, [pc, #608]	; (8001870 <main+0x31c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001614:	3302      	adds	r3, #2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b96      	ldr	r3, [pc, #600]	; (8001874 <main+0x320>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fb03 f302 	mul.w	r3, r3, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f872 	bl	800070c <__aeabi_ui2d>
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4b93      	ldr	r3, [pc, #588]	; (800187c <main+0x328>)
 800162e:	f7fe fe01 	bl	8000234 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff f8e1 	bl	8000800 <__aeabi_d2uiz>
 800163e:	4603      	mov	r3, r0
 8001640:	4a92      	ldr	r2, [pc, #584]	; (800188c <main+0x338>)
 8001642:	6013      	str	r3, [r2, #0]
  	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8001644:	4b91      	ldr	r3, [pc, #580]	; (800188c <main+0x338>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4991      	ldr	r1, [pc, #580]	; (8001890 <main+0x33c>)
 800164c:	488e      	ldr	r0, [pc, #568]	; (8001888 <main+0x334>)
 800164e:	f007 f8ef 	bl	8008830 <siprintf>
  	send_uart(buffer);
 8001652:	488d      	ldr	r0, [pc, #564]	; (8001888 <main+0x334>)
 8001654:	f7ff ff66 	bl	8001524 <send_uart>
  	clear_buffer();
 8001658:	f7ff ff4a 	bl	80014f0 <clear_buffer>


  	/************* The following operation is using PUTS and GETS *********************/

  	/* Open file to write/ create a file if it doesn't exist */
      fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800165c:	2213      	movs	r2, #19
 800165e:	498d      	ldr	r1, [pc, #564]	; (8001894 <main+0x340>)
 8001660:	488d      	ldr	r0, [pc, #564]	; (8001898 <main+0x344>)
 8001662:	f005 f8cf 	bl	8006804 <f_open>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	4b8c      	ldr	r3, [pc, #560]	; (800189c <main+0x348>)
 800166c:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 800166e:	498a      	ldr	r1, [pc, #552]	; (8001898 <main+0x344>)
 8001670:	488b      	ldr	r0, [pc, #556]	; (80018a0 <main+0x34c>)
 8001672:	f006 ffa1 	bl	80085b8 <f_puts>

  	/* Close file */
  	fresult = f_close(&fil);
 8001676:	4888      	ldr	r0, [pc, #544]	; (8001898 <main+0x344>)
 8001678:	f006 f965 	bl	8007946 <f_close>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	4b86      	ldr	r3, [pc, #536]	; (800189c <main+0x348>)
 8001682:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)send_uart ("File1.txt created and the data is written \n");
 8001684:	4b85      	ldr	r3, [pc, #532]	; (800189c <main+0x348>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <main+0x13e>
 800168c:	4885      	ldr	r0, [pc, #532]	; (80018a4 <main+0x350>)
 800168e:	f7ff ff49 	bl	8001524 <send_uart>

  	/* Open file to read */
  	fresult = f_open(&fil, "file1.txt", FA_READ);
 8001692:	2201      	movs	r2, #1
 8001694:	497f      	ldr	r1, [pc, #508]	; (8001894 <main+0x340>)
 8001696:	4880      	ldr	r0, [pc, #512]	; (8001898 <main+0x344>)
 8001698:	f005 f8b4 	bl	8006804 <f_open>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b7e      	ldr	r3, [pc, #504]	; (800189c <main+0x348>)
 80016a2:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	f_gets(buffer, f_size(&fil), &fil);
 80016a4:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <main+0x344>)
 80016a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016aa:	330c      	adds	r3, #12
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a7a      	ldr	r2, [pc, #488]	; (8001898 <main+0x344>)
 80016b0:	4619      	mov	r1, r3
 80016b2:	4875      	ldr	r0, [pc, #468]	; (8001888 <main+0x334>)
 80016b4:	f006 ff06 	bl	80084c4 <f_gets>

  	send_uart("File1.txt is opened and it contains the data as shown below\n");
 80016b8:	487b      	ldr	r0, [pc, #492]	; (80018a8 <main+0x354>)
 80016ba:	f7ff ff33 	bl	8001524 <send_uart>
  	send_uart(buffer);
 80016be:	4872      	ldr	r0, [pc, #456]	; (8001888 <main+0x334>)
 80016c0:	f7ff ff30 	bl	8001524 <send_uart>
  	send_uart("\n\n");
 80016c4:	4879      	ldr	r0, [pc, #484]	; (80018ac <main+0x358>)
 80016c6:	f7ff ff2d 	bl	8001524 <send_uart>

  	/* Close file */
  	f_close(&fil);
 80016ca:	4873      	ldr	r0, [pc, #460]	; (8001898 <main+0x344>)
 80016cc:	f006 f93b 	bl	8007946 <f_close>

  	clear_buffer();
 80016d0:	f7ff ff0e 	bl	80014f0 <clear_buffer>


  	/**************** The following operation is using f_write and f_read **************************/

  	/* Create second file with read write access and open it */
  	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80016d4:	220a      	movs	r2, #10
 80016d6:	4976      	ldr	r1, [pc, #472]	; (80018b0 <main+0x35c>)
 80016d8:	486f      	ldr	r0, [pc, #444]	; (8001898 <main+0x344>)
 80016da:	f005 f893 	bl	8006804 <f_open>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b6e      	ldr	r3, [pc, #440]	; (800189c <main+0x348>)
 80016e4:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");
 80016e6:	4a68      	ldr	r2, [pc, #416]	; (8001888 <main+0x334>)
 80016e8:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <main+0x360>)
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	2357      	movs	r3, #87	; 0x57
 80016f0:	461a      	mov	r2, r3
 80016f2:	f007 f887 	bl	8008804 <memcpy>

  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80016f6:	4864      	ldr	r0, [pc, #400]	; (8001888 <main+0x334>)
 80016f8:	f7ff fee4 	bl	80014c4 <bufsize>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b6d      	ldr	r3, [pc, #436]	; (80018b8 <main+0x364>)
 8001702:	4961      	ldr	r1, [pc, #388]	; (8001888 <main+0x334>)
 8001704:	4864      	ldr	r0, [pc, #400]	; (8001898 <main+0x344>)
 8001706:	f005 fdcd 	bl	80072a4 <f_write>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	4b63      	ldr	r3, [pc, #396]	; (800189c <main+0x348>)
 8001710:	701a      	strb	r2, [r3, #0]

  	send_uart ("File2.txt created and data is written\n");
 8001712:	486a      	ldr	r0, [pc, #424]	; (80018bc <main+0x368>)
 8001714:	f7ff ff06 	bl	8001524 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8001718:	485f      	ldr	r0, [pc, #380]	; (8001898 <main+0x344>)
 800171a:	f006 f914 	bl	8007946 <f_close>



  	// clearing buffer to show that result obtained is from the file
  	clear_buffer();
 800171e:	f7ff fee7 	bl	80014f0 <clear_buffer>

  	/* Open second file to read */
  	fresult = f_open(&fil, "file2.txt", FA_READ);
 8001722:	2201      	movs	r2, #1
 8001724:	4962      	ldr	r1, [pc, #392]	; (80018b0 <main+0x35c>)
 8001726:	485c      	ldr	r0, [pc, #368]	; (8001898 <main+0x344>)
 8001728:	f005 f86c 	bl	8006804 <f_open>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	4b5a      	ldr	r3, [pc, #360]	; (800189c <main+0x348>)
 8001732:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)send_uart ("file2.txt is open and the data is shown below\n");
 8001734:	4b59      	ldr	r3, [pc, #356]	; (800189c <main+0x348>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <main+0x1ee>
 800173c:	4860      	ldr	r0, [pc, #384]	; (80018c0 <main+0x36c>)
 800173e:	f7ff fef1 	bl	8001524 <send_uart>

  	/* Read data from the file
  	 * Please see the function details for the arguments */
  	f_read (&fil, buffer, f_size(&fil), &br);
 8001742:	4b55      	ldr	r3, [pc, #340]	; (8001898 <main+0x344>)
 8001744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001748:	330c      	adds	r3, #12
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b5d      	ldr	r3, [pc, #372]	; (80018c4 <main+0x370>)
 800174e:	494e      	ldr	r1, [pc, #312]	; (8001888 <main+0x334>)
 8001750:	4851      	ldr	r0, [pc, #324]	; (8001898 <main+0x344>)
 8001752:	f005 fb91 	bl	8006e78 <f_read>
  	send_uart(buffer);
 8001756:	484c      	ldr	r0, [pc, #304]	; (8001888 <main+0x334>)
 8001758:	f7ff fee4 	bl	8001524 <send_uart>
  	send_uart("\n\n");
 800175c:	4853      	ldr	r0, [pc, #332]	; (80018ac <main+0x358>)
 800175e:	f7ff fee1 	bl	8001524 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8001762:	484d      	ldr	r0, [pc, #308]	; (8001898 <main+0x344>)
 8001764:	f006 f8ef 	bl	8007946 <f_close>

  	clear_buffer();
 8001768:	f7ff fec2 	bl	80014f0 <clear_buffer>


  	/*********************UPDATING an existing file ***************************/

  	/* Open the file with write access */
  	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800176c:	2203      	movs	r2, #3
 800176e:	4950      	ldr	r1, [pc, #320]	; (80018b0 <main+0x35c>)
 8001770:	4849      	ldr	r0, [pc, #292]	; (8001898 <main+0x344>)
 8001772:	f005 f847 	bl	8006804 <f_open>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	4b48      	ldr	r3, [pc, #288]	; (800189c <main+0x348>)
 800177c:	701a      	strb	r2, [r3, #0]

  	/* Move to offset to the end of the file */
  	fresult = f_lseek(&fil, f_size(&fil));
 800177e:	4b46      	ldr	r3, [pc, #280]	; (8001898 <main+0x344>)
 8001780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001784:	330c      	adds	r3, #12
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	4843      	ldr	r0, [pc, #268]	; (8001898 <main+0x344>)
 800178c:	f006 f906 	bl	800799c <f_lseek>
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	4b41      	ldr	r3, [pc, #260]	; (800189c <main+0x348>)
 8001796:	701a      	strb	r2, [r3, #0]

  	if (fresult == FR_OK)send_uart ("About to update the file2.txt\n");
 8001798:	4b40      	ldr	r3, [pc, #256]	; (800189c <main+0x348>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <main+0x252>
 80017a0:	4849      	ldr	r0, [pc, #292]	; (80018c8 <main+0x374>)
 80017a2:	f7ff febf 	bl	8001524 <send_uart>

  	/* write the string to the file */
  	fresult = f_puts("This is updated data and it should be in the end", &fil);
 80017a6:	493c      	ldr	r1, [pc, #240]	; (8001898 <main+0x344>)
 80017a8:	4848      	ldr	r0, [pc, #288]	; (80018cc <main+0x378>)
 80017aa:	f006 ff05 	bl	80085b8 <f_puts>
 80017ae:	4603      	mov	r3, r0
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b3a      	ldr	r3, [pc, #232]	; (800189c <main+0x348>)
 80017b4:	701a      	strb	r2, [r3, #0]

  	f_close (&fil);
 80017b6:	4838      	ldr	r0, [pc, #224]	; (8001898 <main+0x344>)
 80017b8:	f006 f8c5 	bl	8007946 <f_close>

  	clear_buffer();
 80017bc:	f7ff fe98 	bl	80014f0 <clear_buffer>

  	/* Open to read the file */
  	fresult = f_open (&fil, "file2.txt", FA_READ);
 80017c0:	2201      	movs	r2, #1
 80017c2:	493b      	ldr	r1, [pc, #236]	; (80018b0 <main+0x35c>)
 80017c4:	4834      	ldr	r0, [pc, #208]	; (8001898 <main+0x344>)
 80017c6:	f005 f81d 	bl	8006804 <f_open>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b33      	ldr	r3, [pc, #204]	; (800189c <main+0x348>)
 80017d0:	701a      	strb	r2, [r3, #0]

  	/* Read string from the file */
  	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80017d2:	4b31      	ldr	r3, [pc, #196]	; (8001898 <main+0x344>)
 80017d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d8:	330c      	adds	r3, #12
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <main+0x370>)
 80017de:	492a      	ldr	r1, [pc, #168]	; (8001888 <main+0x334>)
 80017e0:	482d      	ldr	r0, [pc, #180]	; (8001898 <main+0x344>)
 80017e2:	f005 fb49 	bl	8006e78 <f_read>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <main+0x348>)
 80017ec:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <main+0x348>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <main+0x2a8>
 80017f6:	4836      	ldr	r0, [pc, #216]	; (80018d0 <main+0x37c>)
 80017f8:	f7ff fe94 	bl	8001524 <send_uart>
  	send_uart(buffer);
 80017fc:	4822      	ldr	r0, [pc, #136]	; (8001888 <main+0x334>)
 80017fe:	f7ff fe91 	bl	8001524 <send_uart>
  	send_uart("\n\n");
 8001802:	482a      	ldr	r0, [pc, #168]	; (80018ac <main+0x358>)
 8001804:	f7ff fe8e 	bl	8001524 <send_uart>

  	/* Close file */
  	f_close(&fil);
 8001808:	4823      	ldr	r0, [pc, #140]	; (8001898 <main+0x344>)
 800180a:	f006 f89c 	bl	8007946 <f_close>

  	clear_buffer();
 800180e:	f7ff fe6f 	bl	80014f0 <clear_buffer>


  	/*************************REMOVING FILES FROM THE DIRECTORY ****************************/

  	fresult = f_unlink("/file1.txt");
 8001812:	4830      	ldr	r0, [pc, #192]	; (80018d4 <main+0x380>)
 8001814:	f006 fcd8 	bl	80081c8 <f_unlink>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <main+0x348>)
 800181e:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart("file1.txt removed successfully...\n");
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <main+0x348>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <main+0x2da>
 8001828:	482b      	ldr	r0, [pc, #172]	; (80018d8 <main+0x384>)
 800182a:	f7ff fe7b 	bl	8001524 <send_uart>

  	fresult = f_unlink("/file2.txt");
 800182e:	482b      	ldr	r0, [pc, #172]	; (80018dc <main+0x388>)
 8001830:	f006 fcca 	bl	80081c8 <f_unlink>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <main+0x348>)
 800183a:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart("file2.txt removed successfully...\n");
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <main+0x348>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <main+0x2f6>
 8001844:	4826      	ldr	r0, [pc, #152]	; (80018e0 <main+0x38c>)
 8001846:	f7ff fe6d 	bl	8001524 <send_uart>

  	/* Unmount SDCARD */
  	fresult = f_mount(NULL, "/", 1);
 800184a:	2201      	movs	r2, #1
 800184c:	4925      	ldr	r1, [pc, #148]	; (80018e4 <main+0x390>)
 800184e:	2000      	movs	r0, #0
 8001850:	f004 ff8e 	bl	8006770 <f_mount>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <main+0x348>)
 800185a:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <main+0x348>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <main+0x316>
 8001864:	4820      	ldr	r0, [pc, #128]	; (80018e8 <main+0x394>)
 8001866:	f7ff fe5d 	bl	8001524 <send_uart>
  	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800186a:	e7fe      	b.n	800186a <main+0x316>
 800186c:	080090c8 	.word	0x080090c8
 8001870:	20001408 	.word	0x20001408
 8001874:	200002e4 	.word	0x200002e4
 8001878:	080090ec 	.word	0x080090ec
 800187c:	3fe00000 	.word	0x3fe00000
 8001880:	20001468 	.word	0x20001468
 8001884:	080090f0 	.word	0x080090f0
 8001888:	20001384 	.word	0x20001384
 800188c:	2000133c 	.word	0x2000133c
 8001890:	0800910c 	.word	0x0800910c
 8001894:	08009128 	.word	0x08009128
 8001898:	2000146c 	.word	0x2000146c
 800189c:	2000140c 	.word	0x2000140c
 80018a0:	08009134 	.word	0x08009134
 80018a4:	0800917c 	.word	0x0800917c
 80018a8:	080091a8 	.word	0x080091a8
 80018ac:	080091e8 	.word	0x080091e8
 80018b0:	080091ec 	.word	0x080091ec
 80018b4:	080091f8 	.word	0x080091f8
 80018b8:	20001404 	.word	0x20001404
 80018bc:	08009250 	.word	0x08009250
 80018c0:	08009278 	.word	0x08009278
 80018c4:	20001338 	.word	0x20001338
 80018c8:	080092a8 	.word	0x080092a8
 80018cc:	080092c8 	.word	0x080092c8
 80018d0:	080092fc 	.word	0x080092fc
 80018d4:	08009328 	.word	0x08009328
 80018d8:	08009334 	.word	0x08009334
 80018dc:	08009358 	.word	0x08009358
 80018e0:	08009364 	.word	0x08009364
 80018e4:	080090a0 	.word	0x080090a0
 80018e8:	08009388 	.word	0x08009388

080018ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b094      	sub	sp, #80	; 0x50
 80018f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f2:	f107 0318 	add.w	r3, r7, #24
 80018f6:	2238      	movs	r2, #56	; 0x38
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f006 ff90 	bl	8008820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800190e:	2301      	movs	r3, #1
 8001910:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8001918:	2304      	movs	r3, #4
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191c:	2301      	movs	r3, #1
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8001920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001924:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001926:	2302      	movs	r3, #2
 8001928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800192a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800192e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001930:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001934:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8001936:	2302      	movs	r3, #2
 8001938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 800193a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8001940:	2340      	movs	r3, #64	; 0x40
 8001942:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001944:	f107 0318 	add.w	r3, r7, #24
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fd2b 	bl	80023a4 <HAL_RCC_OscConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001954:	f000 f8b0 	bl	8001ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001958:	230f      	movs	r3, #15
 800195a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195c:	2302      	movs	r3, #2
 800195e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2102      	movs	r1, #2
 8001972:	4618      	mov	r0, r3
 8001974:	f001 f82c 	bl	80029d0 <HAL_RCC_ClockConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800197e:	f000 f89b 	bl	8001ab8 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001982:	4b03      	ldr	r3, [pc, #12]	; (8001990 <SystemClock_Config+0xa4>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]
}
 8001988:	bf00      	nop
 800198a:	3750      	adds	r7, #80	; 0x50
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	42420070 	.word	0x42420070

08001994 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <MX_SPI1_Init+0x64>)
 800199a:	4a18      	ldr	r2, [pc, #96]	; (80019fc <MX_SPI1_Init+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019c8:	2238      	movs	r2, #56	; 0x38
 80019ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019e0:	220a      	movs	r2, #10
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019e6:	f001 f9e9 	bl	8002dbc <HAL_SPI_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019f0:	f000 f862 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20001410 	.word	0x20001410
 80019fc:	40013000 	.word	0x40013000

08001a00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <MX_USART1_UART_Init+0x50>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a38:	f001 fdc8 	bl	80035cc <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a42:	f000 f839 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20001340 	.word	0x20001340
 8001a50:	40013800 	.word	0x40013800

08001a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_GPIO_Init+0x5c>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <MX_GPIO_Init+0x5c>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_GPIO_Init+0x5c>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2110      	movs	r1, #16
 8001a84:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <MX_GPIO_Init+0x60>)
 8001a86:	f000 fc75 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001a8a:	2310      	movs	r3, #16
 8001a8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2302      	movs	r3, #2
 8001a98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_GPIO_Init+0x60>)
 8001aa2:	f000 fae3 	bl	800206c <HAL_GPIO_Init>

}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010800 	.word	0x40010800

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <Error_Handler+0x8>
	...

08001ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_MspInit+0x5c>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6193      	str	r3, [r2, #24]
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_MspInit+0x5c>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_MspInit+0x60>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_MspInit+0x60>)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000

08001b28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_SPI_MspInit+0x88>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d12f      	bne.n	8001ba8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_SPI_MspInit+0x8c>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_SPI_MspInit+0x8c>)
 8001b4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_SPI_MspInit+0x8c>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_SPI_MspInit+0x8c>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <HAL_SPI_MspInit+0x8c>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_SPI_MspInit+0x8c>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b78:	23a0      	movs	r3, #160	; 0xa0
 8001b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480b      	ldr	r0, [pc, #44]	; (8001bb8 <HAL_SPI_MspInit+0x90>)
 8001b8c:	f000 fa6e 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b90:	2340      	movs	r3, #64	; 0x40
 8001b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <HAL_SPI_MspInit+0x90>)
 8001ba4:	f000 fa62 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40013000 	.word	0x40013000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010800 	.word	0x40010800

08001bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <HAL_UART_MspInit+0x8c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d131      	bne.n	8001c40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_UART_MspInit+0x90>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <HAL_UART_MspInit+0x90>)
 8001be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_UART_MspInit+0x90>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_UART_MspInit+0x90>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <HAL_UART_MspInit+0x90>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_UART_MspInit+0x90>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480b      	ldr	r0, [pc, #44]	; (8001c50 <HAL_UART_MspInit+0x94>)
 8001c22:	f000 fa23 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <HAL_UART_MspInit+0x94>)
 8001c3c:	f000 fa16 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40013800 	.word	0x40013800
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010800 	.word	0x40010800

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <NMI_Handler+0x4>

08001c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <MemManage_Handler+0x4>

08001c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
	...

08001c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <SysTick_Handler+0x34>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <SysTick_Handler+0x18>
		Timer1--;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <SysTick_Handler+0x34>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <SysTick_Handler+0x34>)
 8001cae:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <SysTick_Handler+0x38>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <SysTick_Handler+0x2c>
		Timer2--;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <SysTick_Handler+0x38>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <SysTick_Handler+0x38>)
 8001cc2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc4:	f000 f8ae 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200002e2 	.word	0x200002e2
 8001cd0:	200002e0 	.word	0x200002e0

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f006 fd54 	bl	80087b0 <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20010000 	.word	0x20010000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	200000a8 	.word	0x200000a8
 8001d3c:	20004510 	.word	0x20004510

08001d40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d4c:	480c      	ldr	r0, [pc, #48]	; (8001d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d4e:	490d      	ldr	r1, [pc, #52]	; (8001d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d50:	4a0d      	ldr	r2, [pc, #52]	; (8001d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d54:	e002      	b.n	8001d5c <LoopCopyDataInit>

08001d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5a:	3304      	adds	r3, #4

08001d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d60:	d3f9      	bcc.n	8001d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d64:	4c0a      	ldr	r4, [pc, #40]	; (8001d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d68:	e001      	b.n	8001d6e <LoopFillZerobss>

08001d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d6c:	3204      	adds	r2, #4

08001d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d70:	d3fb      	bcc.n	8001d6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d72:	f7ff ffe5 	bl	8001d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d76:	f006 fd21 	bl	80087bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d7a:	f7ff fbeb 	bl	8001554 <main>
  bx lr
 8001d7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d84:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001d88:	080099c0 	.word	0x080099c0
  ldr r2, =_sbss
 8001d8c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001d90:	20004510 	.word	0x20004510

08001d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC1_2_IRQHandler>
	...

08001d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_Init+0x28>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_Init+0x28>)
 8001da2:	f043 0310 	orr.w	r3, r3, #16
 8001da6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 f92b 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f000 f808 	bl	8001dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db4:	f7ff fe86 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40022000 	.word	0x40022000

08001dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x54>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_InitTick+0x58>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f935 	bl	8002052 <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00e      	b.n	8001e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d80a      	bhi.n	8001e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e00:	f000 f90b 	bl	800201a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e04:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <HAL_InitTick+0x5c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	2000000c 	.word	0x2000000c
 8001e20:	20000008 	.word	0x20000008

08001e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_IncTick+0x1c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_IncTick+0x20>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a03      	ldr	r2, [pc, #12]	; (8001e44 <HAL_IncTick+0x20>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	2000000c 	.word	0x2000000c
 8001e44:	20002498 	.word	0x20002498

08001e48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b02      	ldr	r3, [pc, #8]	; (8001e58 <HAL_GetTick+0x10>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	20002498 	.word	0x20002498

08001e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff fff0 	bl	8001e48 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e74:	d005      	beq.n	8001e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_Delay+0x44>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e82:	bf00      	nop
 8001e84:	f7ff ffe0 	bl	8001e48 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8f7      	bhi.n	8001e84 <HAL_Delay+0x28>
  {
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000000c 	.word	0x2000000c

08001ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	60d3      	str	r3, [r2, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	f003 0307 	and.w	r3, r3, #7
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db0a      	blt.n	8001f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	490c      	ldr	r1, [pc, #48]	; (8001f54 <__NVIC_SetPriority+0x4c>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	0112      	lsls	r2, r2, #4
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f30:	e00a      	b.n	8001f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4908      	ldr	r1, [pc, #32]	; (8001f58 <__NVIC_SetPriority+0x50>)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	3b04      	subs	r3, #4
 8001f40:	0112      	lsls	r2, r2, #4
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	440b      	add	r3, r1
 8001f46:	761a      	strb	r2, [r3, #24]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000e100 	.word	0xe000e100
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f1c3 0307 	rsb	r3, r3, #7
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	bf28      	it	cs
 8001f7a:	2304      	movcs	r3, #4
 8001f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3304      	adds	r3, #4
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d902      	bls.n	8001f8c <NVIC_EncodePriority+0x30>
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3b03      	subs	r3, #3
 8001f8a:	e000      	b.n	8001f8e <NVIC_EncodePriority+0x32>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	43d9      	mvns	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	4313      	orrs	r3, r2
         );
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd0:	d301      	bcc.n	8001fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00f      	b.n	8001ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <SysTick_Config+0x40>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fde:	210f      	movs	r1, #15
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fe4:	f7ff ff90 	bl	8001f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <SysTick_Config+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <SysTick_Config+0x40>)
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010

08002004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff49 	bl	8001ea4 <__NVIC_SetPriorityGrouping>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202c:	f7ff ff5e 	bl	8001eec <__NVIC_GetPriorityGrouping>
 8002030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7ff ff90 	bl	8001f5c <NVIC_EncodePriority>
 800203c:	4602      	mov	r2, r0
 800203e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff5f 	bl	8001f08 <__NVIC_SetPriority>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffb0 	bl	8001fc0 <SysTick_Config>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b08b      	sub	sp, #44	; 0x2c
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207e:	e169      	b.n	8002354 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002080:	2201      	movs	r2, #1
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	429a      	cmp	r2, r3
 800209a:	f040 8158 	bne.w	800234e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a9a      	ldr	r2, [pc, #616]	; (800230c <HAL_GPIO_Init+0x2a0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d05e      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020a8:	4a98      	ldr	r2, [pc, #608]	; (800230c <HAL_GPIO_Init+0x2a0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d875      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020ae:	4a98      	ldr	r2, [pc, #608]	; (8002310 <HAL_GPIO_Init+0x2a4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d058      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020b4:	4a96      	ldr	r2, [pc, #600]	; (8002310 <HAL_GPIO_Init+0x2a4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d86f      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020ba:	4a96      	ldr	r2, [pc, #600]	; (8002314 <HAL_GPIO_Init+0x2a8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d052      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020c0:	4a94      	ldr	r2, [pc, #592]	; (8002314 <HAL_GPIO_Init+0x2a8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d869      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020c6:	4a94      	ldr	r2, [pc, #592]	; (8002318 <HAL_GPIO_Init+0x2ac>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d04c      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020cc:	4a92      	ldr	r2, [pc, #584]	; (8002318 <HAL_GPIO_Init+0x2ac>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d863      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020d2:	4a92      	ldr	r2, [pc, #584]	; (800231c <HAL_GPIO_Init+0x2b0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d046      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020d8:	4a90      	ldr	r2, [pc, #576]	; (800231c <HAL_GPIO_Init+0x2b0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d85d      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d82a      	bhi.n	8002138 <HAL_GPIO_Init+0xcc>
 80020e2:	2b12      	cmp	r3, #18
 80020e4:	d859      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020e6:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <HAL_GPIO_Init+0x80>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	08002167 	.word	0x08002167
 80020f0:	08002141 	.word	0x08002141
 80020f4:	08002153 	.word	0x08002153
 80020f8:	08002195 	.word	0x08002195
 80020fc:	0800219b 	.word	0x0800219b
 8002100:	0800219b 	.word	0x0800219b
 8002104:	0800219b 	.word	0x0800219b
 8002108:	0800219b 	.word	0x0800219b
 800210c:	0800219b 	.word	0x0800219b
 8002110:	0800219b 	.word	0x0800219b
 8002114:	0800219b 	.word	0x0800219b
 8002118:	0800219b 	.word	0x0800219b
 800211c:	0800219b 	.word	0x0800219b
 8002120:	0800219b 	.word	0x0800219b
 8002124:	0800219b 	.word	0x0800219b
 8002128:	0800219b 	.word	0x0800219b
 800212c:	0800219b 	.word	0x0800219b
 8002130:	08002149 	.word	0x08002149
 8002134:	0800215d 	.word	0x0800215d
 8002138:	4a79      	ldr	r2, [pc, #484]	; (8002320 <HAL_GPIO_Init+0x2b4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800213e:	e02c      	b.n	800219a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	623b      	str	r3, [r7, #32]
          break;
 8002146:	e029      	b.n	800219c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	3304      	adds	r3, #4
 800214e:	623b      	str	r3, [r7, #32]
          break;
 8002150:	e024      	b.n	800219c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	3308      	adds	r3, #8
 8002158:	623b      	str	r3, [r7, #32]
          break;
 800215a:	e01f      	b.n	800219c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	330c      	adds	r3, #12
 8002162:	623b      	str	r3, [r7, #32]
          break;
 8002164:	e01a      	b.n	800219c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800216e:	2304      	movs	r3, #4
 8002170:	623b      	str	r3, [r7, #32]
          break;
 8002172:	e013      	b.n	800219c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800217c:	2308      	movs	r3, #8
 800217e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	611a      	str	r2, [r3, #16]
          break;
 8002186:	e009      	b.n	800219c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002188:	2308      	movs	r3, #8
 800218a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	615a      	str	r2, [r3, #20]
          break;
 8002192:	e003      	b.n	800219c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
          break;
 8002198:	e000      	b.n	800219c <HAL_GPIO_Init+0x130>
          break;
 800219a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2bff      	cmp	r3, #255	; 0xff
 80021a0:	d801      	bhi.n	80021a6 <HAL_GPIO_Init+0x13a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	e001      	b.n	80021aa <HAL_GPIO_Init+0x13e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3304      	adds	r3, #4
 80021aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2bff      	cmp	r3, #255	; 0xff
 80021b0:	d802      	bhi.n	80021b8 <HAL_GPIO_Init+0x14c>
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	e002      	b.n	80021be <HAL_GPIO_Init+0x152>
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	3b08      	subs	r3, #8
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	210f      	movs	r1, #15
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	401a      	ands	r2, r3
 80021d0:	6a39      	ldr	r1, [r7, #32]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	431a      	orrs	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80b1 	beq.w	800234e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021ec:	4b4d      	ldr	r3, [pc, #308]	; (8002324 <HAL_GPIO_Init+0x2b8>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a4c      	ldr	r2, [pc, #304]	; (8002324 <HAL_GPIO_Init+0x2b8>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <HAL_GPIO_Init+0x2b8>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002204:	4a48      	ldr	r2, [pc, #288]	; (8002328 <HAL_GPIO_Init+0x2bc>)
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	3302      	adds	r3, #2
 800220c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002210:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a40      	ldr	r2, [pc, #256]	; (800232c <HAL_GPIO_Init+0x2c0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d013      	beq.n	8002258 <HAL_GPIO_Init+0x1ec>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3f      	ldr	r2, [pc, #252]	; (8002330 <HAL_GPIO_Init+0x2c4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00d      	beq.n	8002254 <HAL_GPIO_Init+0x1e8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a3e      	ldr	r2, [pc, #248]	; (8002334 <HAL_GPIO_Init+0x2c8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d007      	beq.n	8002250 <HAL_GPIO_Init+0x1e4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a3d      	ldr	r2, [pc, #244]	; (8002338 <HAL_GPIO_Init+0x2cc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d101      	bne.n	800224c <HAL_GPIO_Init+0x1e0>
 8002248:	2303      	movs	r3, #3
 800224a:	e006      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 800224c:	2304      	movs	r3, #4
 800224e:	e004      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 8002250:	2302      	movs	r3, #2
 8002252:	e002      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 8002258:	2300      	movs	r3, #0
 800225a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225c:	f002 0203 	and.w	r2, r2, #3
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	4093      	lsls	r3, r2
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800226a:	492f      	ldr	r1, [pc, #188]	; (8002328 <HAL_GPIO_Init+0x2bc>)
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002284:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_GPIO_Init+0x2d0>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	492c      	ldr	r1, [pc, #176]	; (800233c <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002292:	4b2a      	ldr	r3, [pc, #168]	; (800233c <HAL_GPIO_Init+0x2d0>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	4928      	ldr	r1, [pc, #160]	; (800233c <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022ac:	4b23      	ldr	r3, [pc, #140]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4922      	ldr	r1, [pc, #136]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	491e      	ldr	r1, [pc, #120]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d006      	beq.n	80022e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	4918      	ldr	r1, [pc, #96]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022e2:	4b16      	ldr	r3, [pc, #88]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	4914      	ldr	r1, [pc, #80]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d021      	beq.n	8002340 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_GPIO_Init+0x2d0>)
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	490e      	ldr	r1, [pc, #56]	; (800233c <HAL_GPIO_Init+0x2d0>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	60cb      	str	r3, [r1, #12]
 8002308:	e021      	b.n	800234e <HAL_GPIO_Init+0x2e2>
 800230a:	bf00      	nop
 800230c:	10320000 	.word	0x10320000
 8002310:	10310000 	.word	0x10310000
 8002314:	10220000 	.word	0x10220000
 8002318:	10210000 	.word	0x10210000
 800231c:	10120000 	.word	0x10120000
 8002320:	10110000 	.word	0x10110000
 8002324:	40021000 	.word	0x40021000
 8002328:	40010000 	.word	0x40010000
 800232c:	40010800 	.word	0x40010800
 8002330:	40010c00 	.word	0x40010c00
 8002334:	40011000 	.word	0x40011000
 8002338:	40011400 	.word	0x40011400
 800233c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_GPIO_Init+0x304>)
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	43db      	mvns	r3, r3
 8002348:	4909      	ldr	r1, [pc, #36]	; (8002370 <HAL_GPIO_Init+0x304>)
 800234a:	4013      	ands	r3, r2
 800234c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	3301      	adds	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	fa22 f303 	lsr.w	r3, r2, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	f47f ae8e 	bne.w	8002080 <HAL_GPIO_Init+0x14>
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	372c      	adds	r7, #44	; 0x2c
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	40010400 	.word	0x40010400

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002390:	e003      	b.n	800239a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	041a      	lsls	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e304      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8087 	beq.w	80024d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c4:	4b92      	ldr	r3, [pc, #584]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d00c      	beq.n	80023ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d0:	4b8f      	ldr	r3, [pc, #572]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d112      	bne.n	8002402 <HAL_RCC_OscConfig+0x5e>
 80023dc:	4b8c      	ldr	r3, [pc, #560]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e8:	d10b      	bne.n	8002402 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ea:	4b89      	ldr	r3, [pc, #548]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d06c      	beq.n	80024d0 <HAL_RCC_OscConfig+0x12c>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d168      	bne.n	80024d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e2de      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x76>
 800240c:	4b80      	ldr	r3, [pc, #512]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a7f      	ldr	r2, [pc, #508]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e02e      	b.n	8002478 <HAL_RCC_OscConfig+0xd4>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x98>
 8002422:	4b7b      	ldr	r3, [pc, #492]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7a      	ldr	r2, [pc, #488]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b78      	ldr	r3, [pc, #480]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a77      	ldr	r2, [pc, #476]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e01d      	b.n	8002478 <HAL_RCC_OscConfig+0xd4>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0xbc>
 8002446:	4b72      	ldr	r3, [pc, #456]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a71      	ldr	r2, [pc, #452]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 800244c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b6f      	ldr	r3, [pc, #444]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6e      	ldr	r2, [pc, #440]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0xd4>
 8002460:	4b6b      	ldr	r3, [pc, #428]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a6a      	ldr	r2, [pc, #424]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b68      	ldr	r3, [pc, #416]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a67      	ldr	r2, [pc, #412]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002476:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff fce2 	bl	8001e48 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002488:	f7ff fcde 	bl	8001e48 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e292      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b5d      	ldr	r3, [pc, #372]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0xe4>
 80024a6:	e014      	b.n	80024d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7ff fcce 	bl	8001e48 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7ff fcca 	bl	8001e48 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e27e      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	4b53      	ldr	r3, [pc, #332]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x10c>
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d063      	beq.n	80025a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024de:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00b      	beq.n	8002502 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024ea:	4b49      	ldr	r3, [pc, #292]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d11c      	bne.n	8002530 <HAL_RCC_OscConfig+0x18c>
 80024f6:	4b46      	ldr	r3, [pc, #280]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d116      	bne.n	8002530 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	4b43      	ldr	r3, [pc, #268]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x176>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e252      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251a:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4939      	ldr	r1, [pc, #228]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	e03a      	b.n	80025a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002538:	4b36      	ldr	r3, [pc, #216]	; (8002614 <HAL_RCC_OscConfig+0x270>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7ff fc83 	bl	8001e48 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002546:	f7ff fc7f 	bl	8001e48 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e233      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4927      	ldr	r1, [pc, #156]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002574:	4313      	orrs	r3, r2
 8002576:	600b      	str	r3, [r1, #0]
 8002578:	e015      	b.n	80025a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <HAL_RCC_OscConfig+0x270>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7ff fc62 	bl	8001e48 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002588:	f7ff fc5e 	bl	8001e48 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e212      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d03a      	beq.n	8002628 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d019      	beq.n	80025ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_RCC_OscConfig+0x274>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c0:	f7ff fc42 	bl	8001e48 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c8:	f7ff fc3e 	bl	8001e48 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1f2      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025e6:	2001      	movs	r0, #1
 80025e8:	f000 fbca 	bl	8002d80 <RCC_Delay>
 80025ec:	e01c      	b.n	8002628 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_RCC_OscConfig+0x274>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f4:	f7ff fc28 	bl	8001e48 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fa:	e00f      	b.n	800261c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fc:	f7ff fc24 	bl	8001e48 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d908      	bls.n	800261c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1d8      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	42420000 	.word	0x42420000
 8002618:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	4b9b      	ldr	r3, [pc, #620]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1e9      	bne.n	80025fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a6 	beq.w	8002782 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263a:	4b94      	ldr	r3, [pc, #592]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	4b91      	ldr	r3, [pc, #580]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	4a90      	ldr	r2, [pc, #576]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800264c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002650:	61d3      	str	r3, [r2, #28]
 8002652:	4b8e      	ldr	r3, [pc, #568]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265e:	2301      	movs	r3, #1
 8002660:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002662:	4b8b      	ldr	r3, [pc, #556]	; (8002890 <HAL_RCC_OscConfig+0x4ec>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d118      	bne.n	80026a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266e:	4b88      	ldr	r3, [pc, #544]	; (8002890 <HAL_RCC_OscConfig+0x4ec>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a87      	ldr	r2, [pc, #540]	; (8002890 <HAL_RCC_OscConfig+0x4ec>)
 8002674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267a:	f7ff fbe5 	bl	8001e48 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002682:	f7ff fbe1 	bl	8001e48 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b64      	cmp	r3, #100	; 0x64
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e195      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	4b7e      	ldr	r3, [pc, #504]	; (8002890 <HAL_RCC_OscConfig+0x4ec>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x312>
 80026a8:	4b78      	ldr	r3, [pc, #480]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4a77      	ldr	r2, [pc, #476]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6213      	str	r3, [r2, #32]
 80026b4:	e02d      	b.n	8002712 <HAL_RCC_OscConfig+0x36e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x334>
 80026be:	4b73      	ldr	r3, [pc, #460]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4a72      	ldr	r2, [pc, #456]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	6213      	str	r3, [r2, #32]
 80026ca:	4b70      	ldr	r3, [pc, #448]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4a6f      	ldr	r2, [pc, #444]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	6213      	str	r3, [r2, #32]
 80026d6:	e01c      	b.n	8002712 <HAL_RCC_OscConfig+0x36e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d10c      	bne.n	80026fa <HAL_RCC_OscConfig+0x356>
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4a69      	ldr	r2, [pc, #420]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026e6:	f043 0304 	orr.w	r3, r3, #4
 80026ea:	6213      	str	r3, [r2, #32]
 80026ec:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	4a66      	ldr	r2, [pc, #408]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6213      	str	r3, [r2, #32]
 80026f8:	e00b      	b.n	8002712 <HAL_RCC_OscConfig+0x36e>
 80026fa:	4b64      	ldr	r3, [pc, #400]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4a63      	ldr	r2, [pc, #396]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	6213      	str	r3, [r2, #32]
 8002706:	4b61      	ldr	r3, [pc, #388]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a60      	ldr	r2, [pc, #384]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800270c:	f023 0304 	bic.w	r3, r3, #4
 8002710:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d015      	beq.n	8002746 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271a:	f7ff fb95 	bl	8001e48 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	e00a      	b.n	8002738 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7ff fb91 	bl	8001e48 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e143      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002738:	4b54      	ldr	r3, [pc, #336]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ee      	beq.n	8002722 <HAL_RCC_OscConfig+0x37e>
 8002744:	e014      	b.n	8002770 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7ff fb7f 	bl	8001e48 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7ff fb7b 	bl	8001e48 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e12d      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002764:	4b49      	ldr	r3, [pc, #292]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1ee      	bne.n	800274e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002770:	7dfb      	ldrb	r3, [r7, #23]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d105      	bne.n	8002782 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002776:	4b45      	ldr	r3, [pc, #276]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4a44      	ldr	r2, [pc, #272]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800277c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002780:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 808c 	beq.w	80028a4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800278c:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002798:	d10e      	bne.n	80027b8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800279a:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d108      	bne.n	80027b8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80027a6:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80027ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e103      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d14e      	bne.n	800285e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80027c0:	4b32      	ldr	r3, [pc, #200]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80027cc:	4b2f      	ldr	r3, [pc, #188]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0ef      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80027e0:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <HAL_RCC_OscConfig+0x4f0>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7ff fb2f 	bl	8001e48 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80027ee:	f7ff fb2b 	bl	8001e48 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b64      	cmp	r3, #100	; 0x64
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e0df      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800280c:	4b1f      	ldr	r3, [pc, #124]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002818:	491c      	ldr	r1, [pc, #112]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4918      	ldr	r1, [pc, #96]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800282c:	4313      	orrs	r3, r2
 800282e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002830:	4b18      	ldr	r3, [pc, #96]	; (8002894 <HAL_RCC_OscConfig+0x4f0>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7ff fb07 	bl	8001e48 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800283e:	f7ff fb03 	bl	8001e48 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b64      	cmp	r3, #100	; 0x64
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0b7      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x49a>
 800285c:	e022      	b.n	80028a4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002868:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_RCC_OscConfig+0x4f0>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7ff faea 	bl	8001e48 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002876:	e00f      	b.n	8002898 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002878:	f7ff fae6 	bl	8001e48 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d908      	bls.n	8002898 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e09a      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	40007000 	.word	0x40007000
 8002894:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002898:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <HAL_RCC_OscConfig+0x624>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1e9      	bne.n	8002878 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8088 	beq.w	80029be <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ae:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <HAL_RCC_OscConfig+0x624>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d068      	beq.n	800298c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d14d      	bne.n	800295e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c2:	4b42      	ldr	r3, [pc, #264]	; (80029cc <HAL_RCC_OscConfig+0x628>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7ff fabe 	bl	8001e48 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d0:	f7ff faba 	bl	8001e48 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e06e      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <HAL_RCC_OscConfig+0x624>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f6:	d10f      	bne.n	8002918 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80028f8:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <HAL_RCC_OscConfig+0x624>)
 80028fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4931      	ldr	r1, [pc, #196]	; (80029c8 <HAL_RCC_OscConfig+0x624>)
 8002902:	4313      	orrs	r3, r2
 8002904:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002906:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_RCC_OscConfig+0x624>)
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	f023 020f 	bic.w	r2, r3, #15
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	492d      	ldr	r1, [pc, #180]	; (80029c8 <HAL_RCC_OscConfig+0x624>)
 8002914:	4313      	orrs	r3, r2
 8002916:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002918:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <HAL_RCC_OscConfig+0x624>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	430b      	orrs	r3, r1
 800292a:	4927      	ldr	r1, [pc, #156]	; (80029c8 <HAL_RCC_OscConfig+0x624>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002930:	4b26      	ldr	r3, [pc, #152]	; (80029cc <HAL_RCC_OscConfig+0x628>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7ff fa87 	bl	8001e48 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293e:	f7ff fa83 	bl	8001e48 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e037      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCC_OscConfig+0x624>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x59a>
 800295c:	e02f      	b.n	80029be <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x628>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7ff fa70 	bl	8001e48 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7ff fa6c 	bl	8001e48 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e020      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_RCC_OscConfig+0x624>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x5c8>
 800298a:	e018      	b.n	80029be <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e013      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_OscConfig+0x624>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d106      	bne.n	80029ba <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d001      	beq.n	80029be <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	42420060 	.word	0x42420060

080029d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0d0      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b6a      	ldr	r3, [pc, #424]	; (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d910      	bls.n	8002a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b67      	ldr	r3, [pc, #412]	; (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 0207 	bic.w	r2, r3, #7
 80029fa:	4965      	ldr	r1, [pc, #404]	; (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b63      	ldr	r3, [pc, #396]	; (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0b8      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d020      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a2c:	4b59      	ldr	r3, [pc, #356]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a58      	ldr	r2, [pc, #352]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a44:	4b53      	ldr	r3, [pc, #332]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a52      	ldr	r2, [pc, #328]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a50:	4b50      	ldr	r3, [pc, #320]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	494d      	ldr	r1, [pc, #308]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d040      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	4b47      	ldr	r3, [pc, #284]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d115      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e07f      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8e:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e073      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e06b      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aae:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4936      	ldr	r1, [pc, #216]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac0:	f7ff f9c2 	bl	8001e48 <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac8:	f7ff f9be 	bl	8001e48 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e053      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 020c 	and.w	r2, r3, #12
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d1eb      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af0:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d210      	bcs.n	8002b20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 0207 	bic.w	r2, r3, #7
 8002b06:	4922      	ldr	r1, [pc, #136]	; (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0e:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e032      	b.n	8002b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b2c:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4916      	ldr	r1, [pc, #88]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b4a:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	490e      	ldr	r1, [pc, #56]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b5e:	f000 f821 	bl	8002ba4 <HAL_RCC_GetSysClockFreq>
 8002b62:	4602      	mov	r2, r0
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	490a      	ldr	r1, [pc, #40]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b70:	5ccb      	ldrb	r3, [r1, r3]
 8002b72:	fa22 f303 	lsr.w	r3, r2, r3
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <HAL_RCC_ClockConfig+0x1cc>)
 8002b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff f920 	bl	8001dc4 <HAL_InitTick>

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40022000 	.word	0x40022000
 8002b94:	40021000 	.word	0x40021000
 8002b98:	08009414 	.word	0x08009414
 8002b9c:	20000004 	.word	0x20000004
 8002ba0:	20000008 	.word	0x20000008

08002ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba6:	b091      	sub	sp, #68	; 0x44
 8002ba8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002baa:	4b56      	ldr	r3, [pc, #344]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bac:	f107 0414 	add.w	r4, r7, #20
 8002bb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb2:	c407      	stmia	r4!, {r0, r1, r2}
 8002bb4:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002bb6:	4b54      	ldr	r3, [pc, #336]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x164>)
 8002bb8:	1d3c      	adds	r4, r7, #4
 8002bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc8:	2300      	movs	r3, #0
 8002bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x168>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d002      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x4e>
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d003      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x54>
 8002bf0:	e080      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf2:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002bf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bf6:	e080      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfa:	0c9b      	lsrs	r3, r3, #18
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002c04:	4413      	add	r3, r2
 8002c06:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d066      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002c16:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x168>)
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002c22:	4413      	add	r3, r2
 8002c24:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002c2a:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x168>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d044      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002c36:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x168>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	3301      	adds	r3, #1
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002c44:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x168>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	3302      	adds	r3, #2
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	fb02 f501 	mul.w	r5, r2, r1
 8002c66:	fb00 f403 	mul.w	r4, r0, r3
 8002c6a:	442c      	add	r4, r5
 8002c6c:	fba0 2302 	umull	r2, r3, r0, r2
 8002c70:	18e1      	adds	r1, r4, r3
 8002c72:	460b      	mov	r3, r1
 8002c74:	4926      	ldr	r1, [pc, #152]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002c76:	fb01 f003 	mul.w	r0, r1, r3
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	fb01 f102 	mul.w	r1, r1, r2
 8002c80:	4401      	add	r1, r0
 8002c82:	4823      	ldr	r0, [pc, #140]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002c84:	fba2 4500 	umull	r4, r5, r2, r0
 8002c88:	194b      	adds	r3, r1, r5
 8002c8a:	461d      	mov	r5, r3
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	461a      	mov	r2, r3
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	fb02 fc01 	mul.w	ip, r2, r1
 8002ca0:	fb00 f603 	mul.w	r6, r0, r3
 8002ca4:	4466      	add	r6, ip
 8002ca6:	fba0 2302 	umull	r2, r3, r0, r2
 8002caa:	18f1      	adds	r1, r6, r3
 8002cac:	460b      	mov	r3, r1
 8002cae:	4620      	mov	r0, r4
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	f7fd fdc5 	bl	8000840 <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4613      	mov	r3, r2
 8002cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cbe:	e007      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002cc4:	fb02 f203 	mul.w	r2, r2, r3
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002cd0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d108      	bne.n	8002cee <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8002cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cde:	085b      	lsrs	r3, r3, #1
 8002ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce2:	e004      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x170>)
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x174>)
 8002cf6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3744      	adds	r7, #68	; 0x44
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d04:	080093ac 	.word	0x080093ac
 8002d08:	080093bc 	.word	0x080093bc
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	017d7840 	.word	0x017d7840
 8002d14:	003d0900 	.word	0x003d0900
 8002d18:	007a1200 	.word	0x007a1200

08002d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	20000004 	.word	0x20000004

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d34:	f7ff fff2 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4903      	ldr	r1, [pc, #12]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08009424 	.word	0x08009424

08002d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d5c:	f7ff ffde 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	0adb      	lsrs	r3, r3, #11
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4903      	ldr	r1, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	08009424 	.word	0x08009424

08002d80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <RCC_Delay+0x34>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <RCC_Delay+0x38>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0a5b      	lsrs	r3, r3, #9
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d9c:	bf00      	nop
  }
  while (Delay --);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1e5a      	subs	r2, r3, #1
 8002da2:	60fa      	str	r2, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f9      	bne.n	8002d9c <RCC_Delay+0x1c>
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	20000004 	.word	0x20000004
 8002db8:	10624dd3 	.word	0x10624dd3

08002dbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e076      	b.n	8002ebc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d108      	bne.n	8002de8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dde:	d009      	beq.n	8002df4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
 8002de6:	e005      	b.n	8002df4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fe fe8a 	bl	8001b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	ea42 0103 	orr.w	r1, r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	0c1a      	lsrs	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f002 0204 	and.w	r2, r2, #4
 8002e9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eaa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_SPI_Transmit+0x22>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e126      	b.n	8003134 <HAL_SPI_Transmit+0x270>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eee:	f7fe ffab 	bl	8001e48 <HAL_GetTick>
 8002ef2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d002      	beq.n	8002f0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
 8002f06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f08:	e10b      	b.n	8003122 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_SPI_Transmit+0x52>
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f1a:	e102      	b.n	8003122 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	88fa      	ldrh	r2, [r7, #6]
 8002f34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f62:	d10f      	bne.n	8002f84 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d007      	beq.n	8002fa2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002faa:	d14b      	bne.n	8003044 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_SPI_Transmit+0xf6>
 8002fb4:	8afb      	ldrh	r3, [r7, #22]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d13e      	bne.n	8003038 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	881a      	ldrh	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	1c9a      	adds	r2, r3, #2
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fde:	e02b      	b.n	8003038 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d112      	bne.n	8003014 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	881a      	ldrh	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	1c9a      	adds	r2, r3, #2
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	86da      	strh	r2, [r3, #54]	; 0x36
 8003012:	e011      	b.n	8003038 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003014:	f7fe ff18 	bl	8001e48 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d803      	bhi.n	800302c <HAL_SPI_Transmit+0x168>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302a:	d102      	bne.n	8003032 <HAL_SPI_Transmit+0x16e>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003036:	e074      	b.n	8003122 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1ce      	bne.n	8002fe0 <HAL_SPI_Transmit+0x11c>
 8003042:	e04c      	b.n	80030de <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_SPI_Transmit+0x18e>
 800304c:	8afb      	ldrh	r3, [r7, #22]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d140      	bne.n	80030d4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	7812      	ldrb	r2, [r2, #0]
 800305e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003078:	e02c      	b.n	80030d4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b02      	cmp	r3, #2
 8003086:	d113      	bne.n	80030b0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	7812      	ldrb	r2, [r2, #0]
 8003094:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80030ae:	e011      	b.n	80030d4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030b0:	f7fe feca 	bl	8001e48 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d803      	bhi.n	80030c8 <HAL_SPI_Transmit+0x204>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c6:	d102      	bne.n	80030ce <HAL_SPI_Transmit+0x20a>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030d2:	e026      	b.n	8003122 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1cd      	bne.n	800307a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	6839      	ldr	r1, [r7, #0]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fa54 	bl	8003590 <SPI_EndRxTxTransaction>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	77fb      	strb	r3, [r7, #31]
 800311e:	e000      	b.n	8003122 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003120:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003132:	7ffb      	ldrb	r3, [r7, #31]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3720      	adds	r7, #32
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08c      	sub	sp, #48	; 0x30
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800314a:	2301      	movs	r3, #1
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_SPI_TransmitReceive+0x26>
 800315e:	2302      	movs	r3, #2
 8003160:	e18a      	b.n	8003478 <HAL_SPI_TransmitReceive+0x33c>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800316a:	f7fe fe6d 	bl	8001e48 <HAL_GetTick>
 800316e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003188:	2b01      	cmp	r3, #1
 800318a:	d00f      	beq.n	80031ac <HAL_SPI_TransmitReceive+0x70>
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003192:	d107      	bne.n	80031a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <HAL_SPI_TransmitReceive+0x68>
 800319c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d003      	beq.n	80031ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
 80031a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031aa:	e15b      	b.n	8003464 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_SPI_TransmitReceive+0x82>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_SPI_TransmitReceive+0x82>
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d103      	bne.n	80031c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031c4:	e14e      	b.n	8003464 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d003      	beq.n	80031da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2205      	movs	r2, #5
 80031d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	887a      	ldrh	r2, [r7, #2]
 80031ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	887a      	ldrh	r2, [r7, #2]
 8003202:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	d007      	beq.n	800322e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003236:	d178      	bne.n	800332a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x10a>
 8003240:	8b7b      	ldrh	r3, [r7, #26]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d166      	bne.n	8003314 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	881a      	ldrh	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	1c9a      	adds	r2, r3, #2
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800326a:	e053      	b.n	8003314 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b02      	cmp	r3, #2
 8003278:	d11b      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x176>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d016      	beq.n	80032b2 <HAL_SPI_TransmitReceive+0x176>
 8003284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d113      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	1c9a      	adds	r2, r3, #2
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d119      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x1b8>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d014      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	b292      	uxth	r2, r2
 80032d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	1c9a      	adds	r2, r3, #2
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032f0:	2301      	movs	r3, #1
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032f4:	f7fe fda8 	bl	8001e48 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003300:	429a      	cmp	r2, r3
 8003302:	d807      	bhi.n	8003314 <HAL_SPI_TransmitReceive+0x1d8>
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800330a:	d003      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003312:	e0a7      	b.n	8003464 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1a6      	bne.n	800326c <HAL_SPI_TransmitReceive+0x130>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1a1      	bne.n	800326c <HAL_SPI_TransmitReceive+0x130>
 8003328:	e07c      	b.n	8003424 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_SPI_TransmitReceive+0x1fc>
 8003332:	8b7b      	ldrh	r3, [r7, #26]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d16b      	bne.n	8003410 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	330c      	adds	r3, #12
 8003342:	7812      	ldrb	r2, [r2, #0]
 8003344:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800335e:	e057      	b.n	8003410 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b02      	cmp	r3, #2
 800336c:	d11c      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x26c>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d017      	beq.n	80033a8 <HAL_SPI_TransmitReceive+0x26c>
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	2b01      	cmp	r3, #1
 800337c:	d114      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d119      	bne.n	80033ea <HAL_SPI_TransmitReceive+0x2ae>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d014      	beq.n	80033ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033e6:	2301      	movs	r3, #1
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033ea:	f7fe fd2d 	bl	8001e48 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d803      	bhi.n	8003402 <HAL_SPI_TransmitReceive+0x2c6>
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003400:	d102      	bne.n	8003408 <HAL_SPI_TransmitReceive+0x2cc>
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	2b00      	cmp	r3, #0
 8003406:	d103      	bne.n	8003410 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800340e:	e029      	b.n	8003464 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1a2      	bne.n	8003360 <HAL_SPI_TransmitReceive+0x224>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d19d      	bne.n	8003360 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003426:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f8b1 	bl	8003590 <SPI_EndRxTxTransaction>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d006      	beq.n	8003442 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003440:	e010      	b.n	8003464 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10b      	bne.n	8003462 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	e000      	b.n	8003464 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003462:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003474:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003478:	4618      	mov	r0, r3
 800347a:	3730      	adds	r7, #48	; 0x30
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003490:	f7fe fcda 	bl	8001e48 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	4413      	add	r3, r2
 800349e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034a0:	f7fe fcd2 	bl	8001e48 <HAL_GetTick>
 80034a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034a6:	4b39      	ldr	r3, [pc, #228]	; (800358c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	015b      	lsls	r3, r3, #5
 80034ac:	0d1b      	lsrs	r3, r3, #20
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	fb02 f303 	mul.w	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034b6:	e054      	b.n	8003562 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034be:	d050      	beq.n	8003562 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034c0:	f7fe fcc2 	bl	8001e48 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d902      	bls.n	80034d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d13d      	bne.n	8003552 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ee:	d111      	bne.n	8003514 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f8:	d004      	beq.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003502:	d107      	bne.n	8003514 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003512:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351c:	d10f      	bne.n	800353e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800353c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e017      	b.n	8003582 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3b01      	subs	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4013      	ands	r3, r2
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	bf0c      	ite	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	2300      	movne	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	429a      	cmp	r2, r3
 800357e:	d19b      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000004 	.word	0x20000004

08003590 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	2180      	movs	r1, #128	; 0x80
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff6a 	bl	8003480 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e000      	b.n	80035c4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e03f      	b.n	800365e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe fae2 	bl	8001bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	; 0x24
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800360e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f905 	bl	8003820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b08a      	sub	sp, #40	; 0x28
 800366a:	af02      	add	r7, sp, #8
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b20      	cmp	r3, #32
 8003684:	d17c      	bne.n	8003780 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_UART_Transmit+0x2c>
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e075      	b.n	8003782 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_UART_Transmit+0x3e>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e06e      	b.n	8003782 <HAL_UART_Transmit+0x11c>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2221      	movs	r2, #33	; 0x21
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ba:	f7fe fbc5 	bl	8001e48 <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d4:	d108      	bne.n	80036e8 <HAL_UART_Transmit+0x82>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	e003      	b.n	80036f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036f8:	e02a      	b.n	8003750 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f840 	bl	800378a <UART_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e036      	b.n	8003782 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10b      	bne.n	8003732 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	3302      	adds	r3, #2
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	e007      	b.n	8003742 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	3301      	adds	r3, #1
 8003740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1cf      	bne.n	80036fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f810 	bl	800378a <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e006      	b.n	8003782 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379a:	e02c      	b.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a2:	d028      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <UART_WaitOnFlagUntilTimeout+0x30>
 80037aa:	f7fe fb4d 	bl	8001e48 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d21d      	bcs.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e00f      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	bf0c      	ite	eq
 8003806:	2301      	moveq	r3, #1
 8003808:	2300      	movne	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	429a      	cmp	r2, r3
 8003812:	d0c3      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	4313      	orrs	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800385a:	f023 030c 	bic.w	r3, r3, #12
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	430b      	orrs	r3, r1
 8003866:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2c      	ldr	r2, [pc, #176]	; (8003934 <UART_SetConfig+0x114>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d103      	bne.n	8003890 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003888:	f7ff fa66 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	e002      	b.n	8003896 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003890:	f7ff fa4e 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8003894:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	009a      	lsls	r2, r3, #2
 80038a0:	441a      	add	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	4a22      	ldr	r2, [pc, #136]	; (8003938 <UART_SetConfig+0x118>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	0119      	lsls	r1, r3, #4
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	009a      	lsls	r2, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038cc:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <UART_SetConfig+0x118>)
 80038ce:	fba3 0302 	umull	r0, r3, r3, r2
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	2064      	movs	r0, #100	; 0x64
 80038d6:	fb00 f303 	mul.w	r3, r0, r3
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	3332      	adds	r3, #50	; 0x32
 80038e0:	4a15      	ldr	r2, [pc, #84]	; (8003938 <UART_SetConfig+0x118>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ec:	4419      	add	r1, r3
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009a      	lsls	r2, r3, #2
 80038f8:	441a      	add	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	fbb2 f2f3 	udiv	r2, r2, r3
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <UART_SetConfig+0x118>)
 8003906:	fba3 0302 	umull	r0, r3, r3, r2
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2064      	movs	r0, #100	; 0x64
 800390e:	fb00 f303 	mul.w	r3, r0, r3
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	3332      	adds	r3, #50	; 0x32
 8003918:	4a07      	ldr	r2, [pc, #28]	; (8003938 <UART_SetConfig+0x118>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	f003 020f 	and.w	r2, r3, #15
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	440a      	add	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40013800 	.word	0x40013800
 8003938:	51eb851f 	.word	0x51eb851f

0800393c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003940:	4904      	ldr	r1, [pc, #16]	; (8003954 <MX_FATFS_Init+0x18>)
 8003942:	4805      	ldr	r0, [pc, #20]	; (8003958 <MX_FATFS_Init+0x1c>)
 8003944:	f004 febc 	bl	80086c0 <FATFS_LinkDriver>
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <MX_FATFS_Init+0x20>)
 800394e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003950:	bf00      	nop
 8003952:	bd80      	pop	{r7, pc}
 8003954:	2000249c 	.word	0x2000249c
 8003958:	20000010 	.word	0x20000010
 800395c:	200024a0 	.word	0x200024a0

08003960 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003964:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr

0800396e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_initialize(pdrv);
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fa8e 	bl	8000e9c <SD_disk_initialize>
 8003980:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	4603      	mov	r3, r0
 8003992:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_status(pdrv);
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd fb66 	bl	8001068 <SD_disk_status>
 800399c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	4603      	mov	r3, r0
 80039b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 80039b6:	7bf8      	ldrb	r0, [r7, #15]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	f7fd fb67 	bl	8001090 <SD_disk_read>
 80039c2:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return SD_disk_write(pdrv, buff, sector, count);
 80039dc:	7bf8      	ldrb	r0, [r7, #15]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	f7fd fbbe 	bl	8001164 <SD_disk_write>
 80039e8:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	4603      	mov	r3, r0
 80039fa:	603a      	str	r2, [r7, #0]
 80039fc:	71fb      	strb	r3, [r7, #7]
 80039fe:	460b      	mov	r3, r1
 8003a00:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003a02:	79b9      	ldrb	r1, [r7, #6]
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fd fc2f 	bl	800126c <SD_disk_ioctl>
 8003a0e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <disk_status+0x30>)
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	79fa      	ldrb	r2, [r7, #7]
 8003a30:	4905      	ldr	r1, [pc, #20]	; (8003a48 <disk_status+0x30>)
 8003a32:	440a      	add	r2, r1
 8003a34:	7a12      	ldrb	r2, [r2, #8]
 8003a36:	4610      	mov	r0, r2
 8003a38:	4798      	blx	r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200002cc 	.word	0x200002cc

08003a4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	; (8003a94 <disk_initialize+0x48>)
 8003a5e:	5cd3      	ldrb	r3, [r2, r3]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d111      	bne.n	8003a88 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	4a0b      	ldr	r2, [pc, #44]	; (8003a94 <disk_initialize+0x48>)
 8003a68:	2101      	movs	r1, #1
 8003a6a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <disk_initialize+0x48>)
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	79fa      	ldrb	r2, [r7, #7]
 8003a7a:	4906      	ldr	r1, [pc, #24]	; (8003a94 <disk_initialize+0x48>)
 8003a7c:	440a      	add	r2, r1
 8003a7e:	7a12      	ldrb	r2, [r2, #8]
 8003a80:	4610      	mov	r0, r2
 8003a82:	4798      	blx	r3
 8003a84:	4603      	mov	r3, r0
 8003a86:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	200002cc 	.word	0x200002cc

08003a98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <disk_read+0x3c>)
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	689c      	ldr	r4, [r3, #8]
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <disk_read+0x3c>)
 8003ab8:	4413      	add	r3, r2
 8003aba:	7a18      	ldrb	r0, [r3, #8]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	47a0      	blx	r4
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd90      	pop	{r4, r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200002cc 	.word	0x200002cc

08003ad8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	607a      	str	r2, [r7, #4]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <disk_write+0x3c>)
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	68dc      	ldr	r4, [r3, #12]
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <disk_write+0x3c>)
 8003af8:	4413      	add	r3, r2
 8003afa:	7a18      	ldrb	r0, [r3, #8]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	47a0      	blx	r4
 8003b04:	4603      	mov	r3, r0
 8003b06:	75fb      	strb	r3, [r7, #23]
  return res;
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd90      	pop	{r4, r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200002cc 	.word	0x200002cc

08003b18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	603a      	str	r2, [r7, #0]
 8003b22:	71fb      	strb	r3, [r7, #7]
 8003b24:	460b      	mov	r3, r1
 8003b26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <disk_ioctl+0x38>)
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	79fa      	ldrb	r2, [r7, #7]
 8003b36:	4906      	ldr	r1, [pc, #24]	; (8003b50 <disk_ioctl+0x38>)
 8003b38:	440a      	add	r2, r1
 8003b3a:	7a10      	ldrb	r0, [r2, #8]
 8003b3c:	79b9      	ldrb	r1, [r7, #6]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	4798      	blx	r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]
  return res;
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	200002cc 	.word	0x200002cc

08003b54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003b68:	e007      	b.n	8003b7a <mem_cpy+0x26>
		*d++ = *s++;
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	1c53      	adds	r3, r2, #1
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1c59      	adds	r1, r3, #1
 8003b74:	6179      	str	r1, [r7, #20]
 8003b76:	7812      	ldrb	r2, [r2, #0]
 8003b78:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	1e5a      	subs	r2, r3, #1
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f2      	bne.n	8003b6a <mem_cpy+0x16>
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003ba0:	e005      	b.n	8003bae <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	617a      	str	r2, [r7, #20]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	1e5a      	subs	r2, r3, #1
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f4      	bne.n	8003ba2 <mem_set+0x12>
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003bdc:	bf00      	nop
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	1e5a      	subs	r2, r3, #1
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00d      	beq.n	8003c04 <mem_cmp+0x40>
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	61fa      	str	r2, [r7, #28]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	61ba      	str	r2, [r7, #24]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	1acb      	subs	r3, r1, r3
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ec      	beq.n	8003bde <mem_cmp+0x1a>
	return r;
 8003c04:	697b      	ldr	r3, [r7, #20]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3724      	adds	r7, #36	; 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003c1a:	e002      	b.n	8003c22 <chk_chr+0x12>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <chk_chr+0x26>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d1f2      	bne.n	8003c1c <chk_chr+0xc>
	return *str;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	781b      	ldrb	r3, [r3, #0]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	e03d      	b.n	8003cd4 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8003c58:	4932      	ldr	r1, [pc, #200]	; (8003d24 <chk_lock+0xe0>)
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02e      	beq.n	8003cca <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003c6c:	492d      	ldr	r1, [pc, #180]	; (8003d24 <chk_lock+0xe0>)
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d122      	bne.n	8003cce <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8003c88:	4926      	ldr	r1, [pc, #152]	; (8003d24 <chk_lock+0xe0>)
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	3304      	adds	r3, #4
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d112      	bne.n	8003cce <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003ca8:	491e      	ldr	r1, [pc, #120]	; (8003d24 <chk_lock+0xe0>)
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4613      	mov	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	881a      	ldrh	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc0:	3306      	adds	r3, #6
 8003cc2:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d102      	bne.n	8003cce <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003cc8:	e007      	b.n	8003cda <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d9be      	bls.n	8003c58 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d109      	bne.n	8003cf4 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <chk_lock+0xa8>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d101      	bne.n	8003cf0 <chk_lock+0xac>
 8003cec:	2300      	movs	r3, #0
 8003cee:	e013      	b.n	8003d18 <chk_lock+0xd4>
 8003cf0:	2312      	movs	r3, #18
 8003cf2:	e011      	b.n	8003d18 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10b      	bne.n	8003d12 <chk_lock+0xce>
 8003cfa:	490a      	ldr	r1, [pc, #40]	; (8003d24 <chk_lock+0xe0>)
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	330a      	adds	r3, #10
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d10:	d101      	bne.n	8003d16 <chk_lock+0xd2>
 8003d12:	2310      	movs	r3, #16
 8003d14:	e000      	b.n	8003d18 <chk_lock+0xd4>
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	200000b4 	.word	0x200000b4

08003d28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	e002      	b.n	8003d3a <enq_lock+0x12>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3301      	adds	r3, #1
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d809      	bhi.n	8003d54 <enq_lock+0x2c>
 8003d40:	490a      	ldr	r1, [pc, #40]	; (8003d6c <enq_lock+0x44>)
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ef      	bne.n	8003d34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	200000b4 	.word	0x200000b4

08003d70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e030      	b.n	8003de2 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8003d80:	495a      	ldr	r1, [pc, #360]	; (8003eec <inc_lock+0x17c>)
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4613      	mov	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d11f      	bne.n	8003ddc <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8003d9c:	4953      	ldr	r1, [pc, #332]	; (8003eec <inc_lock+0x17c>)
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	3304      	adds	r3, #4
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db4:	3308      	adds	r3, #8
 8003db6:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d10f      	bne.n	8003ddc <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8003dbc:	494b      	ldr	r1, [pc, #300]	; (8003eec <inc_lock+0x17c>)
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3308      	adds	r3, #8
 8003dcc:	881a      	ldrh	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd4:	3306      	adds	r3, #6
 8003dd6:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d006      	beq.n	8003dea <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3301      	adds	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d9cb      	bls.n	8003d80 <inc_lock+0x10>
 8003de8:	e000      	b.n	8003dec <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8003dea:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d14a      	bne.n	8003e88 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e002      	b.n	8003dfe <inc_lock+0x8e>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d809      	bhi.n	8003e18 <inc_lock+0xa8>
 8003e04:	4939      	ldr	r1, [pc, #228]	; (8003eec <inc_lock+0x17c>)
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ef      	bne.n	8003df8 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d101      	bne.n	8003e22 <inc_lock+0xb2>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e05f      	b.n	8003ee2 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	4830      	ldr	r0, [pc, #192]	; (8003eec <inc_lock+0x17c>)
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4413      	add	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4403      	add	r3, r0
 8003e38:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e40:	3308      	adds	r3, #8
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	4829      	ldr	r0, [pc, #164]	; (8003eec <inc_lock+0x17c>)
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4403      	add	r3, r0
 8003e52:	3304      	adds	r3, #4
 8003e54:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5c:	3306      	adds	r3, #6
 8003e5e:	8818      	ldrh	r0, [r3, #0]
 8003e60:	4922      	ldr	r1, [pc, #136]	; (8003eec <inc_lock+0x17c>)
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	3308      	adds	r3, #8
 8003e70:	4602      	mov	r2, r0
 8003e72:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003e74:	491d      	ldr	r1, [pc, #116]	; (8003eec <inc_lock+0x17c>)
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	330a      	adds	r3, #10
 8003e84:	2200      	movs	r2, #0
 8003e86:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00c      	beq.n	8003ea8 <inc_lock+0x138>
 8003e8e:	4917      	ldr	r1, [pc, #92]	; (8003eec <inc_lock+0x17c>)
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4613      	mov	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	330a      	adds	r3, #10
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <inc_lock+0x138>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e01c      	b.n	8003ee2 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <inc_lock+0x156>
 8003eae:	490f      	ldr	r1, [pc, #60]	; (8003eec <inc_lock+0x17c>)
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	330a      	adds	r3, #10
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	b299      	uxth	r1, r3
 8003ec4:	e001      	b.n	8003eca <inc_lock+0x15a>
 8003ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eca:	4808      	ldr	r0, [pc, #32]	; (8003eec <inc_lock+0x17c>)
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4403      	add	r3, r0
 8003ed8:	330a      	adds	r3, #10
 8003eda:	460a      	mov	r2, r1
 8003edc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	200000b4 	.word	0x200000b4

08003ef0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d82e      	bhi.n	8003f62 <dec_lock+0x72>
		n = Files[i].ctr;
 8003f04:	491b      	ldr	r1, [pc, #108]	; (8003f74 <dec_lock+0x84>)
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	330a      	adds	r3, #10
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003f18:	89fb      	ldrh	r3, [r7, #14]
 8003f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1e:	d101      	bne.n	8003f24 <dec_lock+0x34>
 8003f20:	2300      	movs	r3, #0
 8003f22:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003f24:	89fb      	ldrh	r3, [r7, #14]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <dec_lock+0x40>
 8003f2a:	89fb      	ldrh	r3, [r7, #14]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003f30:	4910      	ldr	r1, [pc, #64]	; (8003f74 <dec_lock+0x84>)
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	330a      	adds	r3, #10
 8003f40:	89fa      	ldrh	r2, [r7, #14]
 8003f42:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003f44:	89fb      	ldrh	r3, [r7, #14]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d108      	bne.n	8003f5c <dec_lock+0x6c>
 8003f4a:	490a      	ldr	r1, [pc, #40]	; (8003f74 <dec_lock+0x84>)
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	737b      	strb	r3, [r7, #13]
 8003f60:	e001      	b.n	8003f66 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003f62:	2302      	movs	r3, #2
 8003f64:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003f66:	7b7b      	ldrb	r3, [r7, #13]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	200000b4 	.word	0x200000b4

08003f78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e016      	b.n	8003fb4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003f86:	4910      	ldr	r1, [pc, #64]	; (8003fc8 <clear_lock+0x50>)
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d108      	bne.n	8003fae <clear_lock+0x36>
 8003f9c:	490a      	ldr	r1, [pc, #40]	; (8003fc8 <clear_lock+0x50>)
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d9e5      	bls.n	8003f86 <clear_lock+0xe>
	}
}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	200000b4 	.word	0x200000b4

08003fcc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fde:	3304      	adds	r3, #4
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d047      	beq.n	8004076 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003fec:	330c      	adds	r3, #12
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	7818      	ldrb	r0, [r3, #0]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	2301      	movs	r3, #1
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	f7ff fd69 	bl	8003ad8 <disk_write>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <sync_window+0x46>
			res = FR_DISK_ERR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
 8004010:	e031      	b.n	8004076 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004018:	3304      	adds	r3, #4
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	1ad2      	subs	r2, r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004030:	3318      	adds	r3, #24
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d21e      	bcs.n	8004076 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403e:	3303      	adds	r3, #3
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	e014      	b.n	8004070 <sync_window+0xa4>
					wsect += fs->fsize;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800404c:	3318      	adds	r3, #24
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4413      	add	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800405c:	3301      	adds	r3, #1
 800405e:	7818      	ldrb	r0, [r3, #0]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	2301      	movs	r3, #1
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	f7ff fd37 	bl	8003ad8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	3b01      	subs	r3, #1
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d8e7      	bhi.n	8004046 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004094:	330c      	adds	r3, #12
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d01f      	beq.n	80040de <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff ff94 	bl	8003fcc <sync_window>
 80040a4:	4603      	mov	r3, r0
 80040a6:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d117      	bne.n	80040de <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b4:	3301      	adds	r3, #1
 80040b6:	7818      	ldrb	r0, [r3, #0]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	2301      	movs	r3, #1
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	f7ff fceb 	bl	8003a98 <disk_read>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d004      	beq.n	80040d2 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80040c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80040d8:	330c      	adds	r3, #12
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 80040de:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff ff6b 	bl	8003fcc <sync_window>
 80040f6:	4603      	mov	r3, r0
 80040f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f040 80bd 	bne.w	800427c <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b03      	cmp	r3, #3
 800410c:	f040 80a7 	bne.w	800425e <sync_fs+0x176>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004116:	3305      	adds	r3, #5
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b01      	cmp	r3, #1
 800411c:	f040 809f 	bne.w	800425e <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004128:	330a      	adds	r3, #10
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	2100      	movs	r1, #0
 8004130:	f7ff fd2e 	bl	8003b90 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2255      	movs	r2, #85	; 0x55
 8004138:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	22aa      	movs	r2, #170	; 0xaa
 8004140:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2252      	movs	r2, #82	; 0x52
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2252      	movs	r2, #82	; 0x52
 800414e:	705a      	strb	r2, [r3, #1]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2261      	movs	r2, #97	; 0x61
 8004154:	709a      	strb	r2, [r3, #2]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2241      	movs	r2, #65	; 0x41
 800415a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2272      	movs	r2, #114	; 0x72
 8004160:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2272      	movs	r2, #114	; 0x72
 8004168:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2241      	movs	r2, #65	; 0x41
 8004170:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2261      	movs	r2, #97	; 0x61
 8004178:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004182:	3310      	adds	r3, #16
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004194:	3310      	adds	r3, #16
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	b29b      	uxth	r3, r3
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ac:	3310      	adds	r3, #16
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c0:	3310      	adds	r3, #16
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	0e1b      	lsrs	r3, r3, #24
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d4:	330c      	adds	r3, #12
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e6:	330c      	adds	r3, #12
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	0a1b      	lsrs	r3, r3, #8
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fe:	330c      	adds	r3, #12
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	0c1b      	lsrs	r3, r3, #16
 8004204:	b2da      	uxtb	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004212:	330c      	adds	r3, #12
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	0e1b      	lsrs	r3, r3, #24
 8004218:	b2da      	uxtb	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004226:	331c      	adds	r3, #28
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004232:	330c      	adds	r3, #12
 8004234:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423c:	3301      	adds	r3, #1
 800423e:	7818      	ldrb	r0, [r3, #0]
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004248:	330c      	adds	r3, #12
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	2301      	movs	r3, #1
 800424e:	f7ff fc43 	bl	8003ad8 <disk_write>
			fs->fsi_flag = 0;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004258:	3305      	adds	r3, #5
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004264:	3301      	adds	r3, #1
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2200      	movs	r2, #0
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fc53 	bl	8003b18 <disk_ioctl>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <sync_fs+0x194>
			res = FR_DISK_ERR;
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	3b02      	subs	r3, #2
 8004294:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429c:	3314      	adds	r3, #20
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3b02      	subs	r3, #2
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d301      	bcc.n	80042ac <clust2sect+0x26>
 80042a8:	2300      	movs	r3, #0
 80042aa:	e00e      	b.n	80042ca <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b2:	3302      	adds	r3, #2
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	fb03 f202 	mul.w	r2, r3, r2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80042c4:	3308      	adds	r3, #8
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4413      	add	r3, r2
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d907      	bls.n	80042f4 <get_fat+0x20>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ea:	3314      	adds	r3, #20
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d302      	bcc.n	80042fa <get_fat+0x26>
		val = 1;	/* Internal error */
 80042f4:	2301      	movs	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e0ec      	b.n	80044d4 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80042fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042fe:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b03      	cmp	r3, #3
 800430a:	f000 809e 	beq.w	800444a <get_fat+0x176>
 800430e:	2b03      	cmp	r3, #3
 8004310:	f300 80d6 	bgt.w	80044c0 <get_fat+0x1ec>
 8004314:	2b01      	cmp	r3, #1
 8004316:	d002      	beq.n	800431e <get_fat+0x4a>
 8004318:	2b02      	cmp	r3, #2
 800431a:	d063      	beq.n	80043e4 <get_fat+0x110>
 800431c:	e0d0      	b.n	80044c0 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4413      	add	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800433a:	330a      	adds	r3, #10
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	4619      	mov	r1, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	fbb3 f3f1 	udiv	r3, r3, r1
 8004346:	4413      	add	r3, r2
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff fe98 	bl	8004080 <move_window>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	f040 80b7 	bne.w	80044c6 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	60fa      	str	r2, [r7, #12]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004364:	320a      	adds	r2, #10
 8004366:	8812      	ldrh	r2, [r2, #0]
 8004368:	fbb3 f1f2 	udiv	r1, r3, r2
 800436c:	fb02 f201 	mul.w	r2, r2, r1
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	5cd3      	ldrb	r3, [r2, r3]
 8004376:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004386:	330a      	adds	r3, #10
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	4619      	mov	r1, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004392:	4413      	add	r3, r2
 8004394:	4619      	mov	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff fe72 	bl	8004080 <move_window>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f040 8093 	bne.w	80044ca <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043aa:	330a      	adds	r3, #10
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80043b6:	fb02 f201 	mul.w	r2, r2, r1
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	5cd3      	ldrb	r3, [r2, r3]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	461a      	mov	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <get_fat+0x106>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	e002      	b.n	80043e0 <get_fat+0x10c>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e0:	617b      	str	r3, [r7, #20]
			break;
 80043e2:	e077      	b.n	80044d4 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f2:	330a      	adds	r3, #10
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	4619      	mov	r1, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004402:	4413      	add	r3, r2
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fe3a 	bl	8004080 <move_window>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d15d      	bne.n	80044ce <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	005a      	lsls	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441c:	330a      	adds	r3, #10
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	fbb2 f1f3 	udiv	r1, r2, r3
 8004424:	fb03 f301 	mul.w	r3, r3, r1
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	3301      	adds	r3, #1
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	b21a      	sxth	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	b21b      	sxth	r3, r3
 8004440:	4313      	orrs	r3, r2
 8004442:	b21b      	sxth	r3, r3
 8004444:	b29b      	uxth	r3, r3
 8004446:	617b      	str	r3, [r7, #20]
			break;
 8004448:	e044      	b.n	80044d4 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004458:	330a      	adds	r3, #10
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	b29b      	uxth	r3, r3
 8004460:	4619      	mov	r1, r3
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	fbb3 f3f1 	udiv	r3, r3, r1
 8004468:	4413      	add	r3, r2
 800446a:	4619      	mov	r1, r3
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff fe07 	bl	8004080 <move_window>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d12c      	bne.n	80044d2 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	009a      	lsls	r2, r3, #2
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004482:	330a      	adds	r3, #10
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	fbb2 f1f3 	udiv	r1, r2, r3
 800448a:	fb03 f301 	mul.w	r3, r3, r1
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	3303      	adds	r3, #3
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	061a      	lsls	r2, r3, #24
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3302      	adds	r3, #2
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	4313      	orrs	r3, r2
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	3201      	adds	r2, #1
 80044ac:	7812      	ldrb	r2, [r2, #0]
 80044ae:	0212      	lsls	r2, r2, #8
 80044b0:	4313      	orrs	r3, r2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	7812      	ldrb	r2, [r2, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044bc:	617b      	str	r3, [r7, #20]
			break;
 80044be:	e009      	b.n	80044d4 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 80044c0:	2301      	movs	r3, #1
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	e006      	b.n	80044d4 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044c6:	bf00      	nop
 80044c8:	e004      	b.n	80044d4 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044ca:	bf00      	nop
 80044cc:	e002      	b.n	80044d4 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80044ce:	bf00      	nop
 80044d0:	e000      	b.n	80044d4 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80044d2:	bf00      	nop
		}
	}

	return val;
 80044d4:	697b      	ldr	r3, [r7, #20]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b088      	sub	sp, #32
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d907      	bls.n	8004500 <put_fat+0x22>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f6:	3314      	adds	r3, #20
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <put_fat+0x28>
		res = FR_INT_ERR;
 8004500:	2302      	movs	r3, #2
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	e146      	b.n	8004794 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b03      	cmp	r3, #3
 8004510:	f000 80d9 	beq.w	80046c6 <put_fat+0x1e8>
 8004514:	2b03      	cmp	r3, #3
 8004516:	f300 8133 	bgt.w	8004780 <put_fat+0x2a2>
 800451a:	2b01      	cmp	r3, #1
 800451c:	d003      	beq.n	8004526 <put_fat+0x48>
 800451e:	2b02      	cmp	r3, #2
 8004520:	f000 8095 	beq.w	800464e <put_fat+0x170>
 8004524:	e12c      	b.n	8004780 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4413      	add	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004542:	330a      	adds	r3, #10
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	4619      	mov	r1, r3
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	fbb3 f3f1 	udiv	r3, r3, r1
 800454e:	4413      	add	r3, r2
 8004550:	4619      	mov	r1, r3
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff fd94 	bl	8004080 <move_window>
 8004558:	4603      	mov	r3, r0
 800455a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800455c:	7ffb      	ldrb	r3, [r7, #31]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f040 8111 	bne.w	8004786 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	617a      	str	r2, [r7, #20]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004570:	320a      	adds	r2, #10
 8004572:	8812      	ldrh	r2, [r2, #0]
 8004574:	fbb3 f1f2 	udiv	r1, r3, r2
 8004578:	fb02 f201 	mul.w	r2, r2, r1
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00d      	beq.n	80045aa <put_fat+0xcc>
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b25b      	sxtb	r3, r3
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	b25a      	sxtb	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	4313      	orrs	r3, r2
 80045a4:	b25b      	sxtb	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	e001      	b.n	80045ae <put_fat+0xd0>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b8:	3304      	adds	r3, #4
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045cc:	330a      	adds	r3, #10
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	4619      	mov	r1, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80045d8:	4413      	add	r3, r2
 80045da:	4619      	mov	r1, r3
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff fd4f 	bl	8004080 <move_window>
 80045e2:	4603      	mov	r3, r0
 80045e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045e6:	7ffb      	ldrb	r3, [r7, #31]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f040 80ce 	bne.w	800478a <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f4:	330a      	adds	r3, #10
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004600:	fb02 f201 	mul.w	r2, r2, r1
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <put_fat+0x140>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	b2db      	uxtb	r3, r3
 800461c:	e00e      	b.n	800463c <put_fat+0x15e>
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	b25b      	sxtb	r3, r3
 8004624:	f023 030f 	bic.w	r3, r3, #15
 8004628:	b25a      	sxtb	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	0a1b      	lsrs	r3, r3, #8
 800462e:	b25b      	sxtb	r3, r3
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	b25b      	sxtb	r3, r3
 8004636:	4313      	orrs	r3, r2
 8004638:	b25b      	sxtb	r3, r3
 800463a:	b2db      	uxtb	r3, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004646:	3304      	adds	r3, #4
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
			break;
 800464c:	e0a2      	b.n	8004794 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465c:	330a      	adds	r3, #10
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	085b      	lsrs	r3, r3, #1
 8004662:	b29b      	uxth	r3, r3
 8004664:	4619      	mov	r1, r3
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	fbb3 f3f1 	udiv	r3, r3, r1
 800466c:	4413      	add	r3, r2
 800466e:	4619      	mov	r1, r3
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f7ff fd05 	bl	8004080 <move_window>
 8004676:	4603      	mov	r3, r0
 8004678:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800467a:	7ffb      	ldrb	r3, [r7, #31]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f040 8086 	bne.w	800478e <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	005a      	lsls	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468c:	330a      	adds	r3, #10
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	fbb2 f1f3 	udiv	r1, r2, r3
 8004694:	fb03 f301 	mul.w	r3, r3, r1
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	0a1b      	lsrs	r3, r3, #8
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	3301      	adds	r3, #1
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046be:	3304      	adds	r3, #4
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
			break;
 80046c4:	e066      	b.n	8004794 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d4:	330a      	adds	r3, #10
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	b29b      	uxth	r3, r3
 80046dc:	4619      	mov	r1, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80046e4:	4413      	add	r3, r2
 80046e6:	4619      	mov	r1, r3
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f7ff fcc9 	bl	8004080 <move_window>
 80046ee:	4603      	mov	r3, r0
 80046f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80046f2:	7ffb      	ldrb	r3, [r7, #31]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d14c      	bne.n	8004792 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	009a      	lsls	r2, r3, #2
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004702:	330a      	adds	r3, #10
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	fbb2 f1f3 	udiv	r1, r2, r3
 800470a:	fb03 f301 	mul.w	r3, r3, r1
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	3303      	adds	r3, #3
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	061a      	lsls	r2, r3, #24
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	3302      	adds	r3, #2
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	041b      	lsls	r3, r3, #16
 8004726:	4313      	orrs	r3, r2
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	3201      	adds	r2, #1
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	0212      	lsls	r2, r2, #8
 8004730:	4313      	orrs	r3, r2
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	4313      	orrs	r3, r2
 8004738:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	4313      	orrs	r3, r2
 8004740:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	b29b      	uxth	r3, r3
 800474e:	0a1b      	lsrs	r3, r3, #8
 8004750:	b29a      	uxth	r2, r3
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	3301      	adds	r3, #1
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0c1a      	lsrs	r2, r3, #16
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	3302      	adds	r3, #2
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	0e1a      	lsrs	r2, r3, #24
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	3303      	adds	r3, #3
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004778:	3304      	adds	r3, #4
 800477a:	2201      	movs	r2, #1
 800477c:	701a      	strb	r2, [r3, #0]
			break;
 800477e:	e009      	b.n	8004794 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 8004780:	2302      	movs	r3, #2
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e006      	b.n	8004794 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8004786:	bf00      	nop
 8004788:	e004      	b.n	8004794 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800478a:	bf00      	nop
 800478c:	e002      	b.n	8004794 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800478e:	bf00      	nop
 8004790:	e000      	b.n	8004794 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8004792:	bf00      	nop
		}
	}

	return res;
 8004794:	7ffb      	ldrb	r3, [r7, #31]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d907      	bls.n	80047be <remove_chain+0x20>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b4:	3314      	adds	r3, #20
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <remove_chain+0x26>
		res = FR_INT_ERR;
 80047be:	2302      	movs	r3, #2
 80047c0:	73fb      	strb	r3, [r7, #15]
 80047c2:	e04f      	b.n	8004864 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80047c8:	e040      	b.n	800484c <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff fd81 	bl	80042d4 <get_fat>
 80047d2:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d041      	beq.n	800485e <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d102      	bne.n	80047e6 <remove_chain+0x48>
 80047e0:	2302      	movs	r3, #2
 80047e2:	73fb      	strb	r3, [r7, #15]
 80047e4:	e03e      	b.n	8004864 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ec:	d102      	bne.n	80047f4 <remove_chain+0x56>
 80047ee:	2301      	movs	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
 80047f2:	e037      	b.n	8004864 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80047f4:	2200      	movs	r2, #0
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fe70 	bl	80044de <put_fat>
 80047fe:	4603      	mov	r3, r0
 8004800:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d12c      	bne.n	8004862 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800480e:	3310      	adds	r3, #16
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004816:	d017      	beq.n	8004848 <remove_chain+0xaa>
				fs->free_clust++;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800481e:	3310      	adds	r3, #16
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800482a:	3310      	adds	r3, #16
 800482c:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004834:	3305      	adds	r3, #5
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	b2da      	uxtb	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004844:	3305      	adds	r3, #5
 8004846:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004852:	3314      	adds	r3, #20
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d3b6      	bcc.n	80047ca <remove_chain+0x2c>
 800485c:	e002      	b.n	8004864 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 800485e:	bf00      	nop
 8004860:	e000      	b.n	8004864 <remove_chain+0xc6>
			if (res != FR_OK) break;
 8004862:	bf00      	nop
		}
	}

	return res;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b086      	sub	sp, #24
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d113      	bne.n	80048a6 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004884:	330c      	adds	r3, #12
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <create_chain+0x32>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004896:	3314      	adds	r3, #20
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	429a      	cmp	r2, r3
 800489e:	d31e      	bcc.n	80048de <create_chain+0x70>
 80048a0:	2301      	movs	r3, #1
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	e01b      	b.n	80048de <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80048a6:	6839      	ldr	r1, [r7, #0]
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff fd13 	bl	80042d4 <get_fat>
 80048ae:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d801      	bhi.n	80048ba <create_chain+0x4c>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e086      	b.n	80049c8 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048c0:	d101      	bne.n	80048c6 <create_chain+0x58>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	e080      	b.n	80049c8 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048cc:	3314      	adds	r3, #20
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d201      	bcs.n	80048da <create_chain+0x6c>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	e076      	b.n	80049c8 <create_chain+0x15a>
		scl = clst;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	3301      	adds	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ee:	3314      	adds	r3, #20
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d307      	bcc.n	8004908 <create_chain+0x9a>
			ncl = 2;
 80048f8:	2302      	movs	r3, #2
 80048fa:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	429a      	cmp	r2, r3
 8004902:	d901      	bls.n	8004908 <create_chain+0x9a>
 8004904:	2300      	movs	r3, #0
 8004906:	e05f      	b.n	80049c8 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004908:	6979      	ldr	r1, [r7, #20]
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff fce2 	bl	80042d4 <get_fat>
 8004910:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00e      	beq.n	8004936 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800491e:	d002      	beq.n	8004926 <create_chain+0xb8>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <create_chain+0xbc>
			return cs;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	e04e      	b.n	80049c8 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	429a      	cmp	r2, r3
 8004930:	d1d7      	bne.n	80048e2 <create_chain+0x74>
 8004932:	2300      	movs	r3, #0
 8004934:	e048      	b.n	80049c8 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8004936:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004938:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800493c:	6979      	ldr	r1, [r7, #20]
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff fdcd 	bl	80044de <put_fat>
 8004944:	4603      	mov	r3, r0
 8004946:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <create_chain+0xf4>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d006      	beq.n	8004962 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff fdc0 	bl	80044de <put_fat>
 800495e:	4603      	mov	r3, r0
 8004960:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d126      	bne.n	80049b6 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496e:	330c      	adds	r3, #12
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497a:	3310      	adds	r3, #16
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004982:	d020      	beq.n	80049c6 <create_chain+0x158>
			fs->free_clust--;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	3310      	adds	r3, #16
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	1e5a      	subs	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004996:	3310      	adds	r3, #16
 8004998:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a0:	3305      	adds	r3, #5
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b0:	3305      	adds	r3, #5
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	e007      	b.n	80049c6 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d102      	bne.n	80049c2 <create_chain+0x154>
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049c0:	e000      	b.n	80049c4 <create_chain+0x156>
 80049c2:	2301      	movs	r3, #1
 80049c4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80049c6:	697b      	ldr	r3, [r7, #20]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80049e0:	3304      	adds	r3, #4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3304      	adds	r3, #4
 80049e6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f4:	330a      	adds	r3, #10
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1d1a      	adds	r2, r3, #4
 8004a1a:	613a      	str	r2, [r7, #16]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <clmt_clust+0x5a>
 8004a26:	2300      	movs	r3, #0
 8004a28:	e010      	b.n	8004a4c <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d307      	bcc.n	8004a42 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004a40:	e7e9      	b.n	8004a16 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8004a42:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	4413      	add	r3, r2
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a6a:	3306      	adds	r3, #6
 8004a6c:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a74:	3308      	adds	r3, #8
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d00a      	beq.n	8004a96 <dir_sdi+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d301      	bcc.n	8004a9a <dir_sdi+0x44>
		return FR_INT_ERR;
 8004a96:	2302      	movs	r3, #2
 8004a98:	e0b4      	b.n	8004c04 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d111      	bne.n	8004ac4 <dir_sdi+0x6e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d108      	bne.n	8004ac4 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004abe:	3304      	adds	r3, #4
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d117      	bne.n	8004afa <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d301      	bcc.n	8004ae6 <dir_sdi+0x90>
			return FR_INT_ERR;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e08e      	b.n	8004c04 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004af2:	3304      	adds	r3, #4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	e046      	b.n	8004b88 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b06:	330a      	adds	r3, #10
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	fb03 f302 	mul.w	r3, r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004b26:	e022      	b.n	8004b6e <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6979      	ldr	r1, [r7, #20]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff fbce 	bl	80042d4 <get_fat>
 8004b38:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b40:	d101      	bne.n	8004b46 <dir_sdi+0xf0>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e05e      	b.n	8004c04 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d90a      	bls.n	8004b62 <dir_sdi+0x10c>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b58:	3314      	adds	r3, #20
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d301      	bcc.n	8004b66 <dir_sdi+0x110>
				return FR_INT_ERR;
 8004b62:	2302      	movs	r3, #2
 8004b64:	e04e      	b.n	8004c04 <dir_sdi+0x1ae>
			idx -= ic;
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d2d8      	bcs.n	8004b28 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6979      	ldr	r1, [r7, #20]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff fb80 	bl	8004286 <clust2sect>
 8004b86:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b8e:	330c      	adds	r3, #12
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <dir_sdi+0x148>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e032      	b.n	8004c04 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004baa:	330a      	adds	r3, #10
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	441a      	add	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc4:	3310      	adds	r3, #16
 8004bc6:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bde:	330a      	adds	r3, #10
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bee:	fb02 f201 	mul.w	r2, r2, r1
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	015b      	lsls	r3, r3, #5
 8004bf6:	18c2      	adds	r2, r0, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfe:	3314      	adds	r3, #20
 8004c00:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	3306      	adds	r3, #6
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d006      	beq.n	8004c3a <dir_next+0x2e>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c32:	3310      	adds	r3, #16
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <dir_next+0x32>
		return FR_NO_FILE;
 8004c3a:	2304      	movs	r3, #4
 8004c3c:	e144      	b.n	8004ec8 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4a:	330a      	adds	r3, #10
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c5a:	fb02 f201 	mul.w	r2, r2, r1
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 810c 	bne.w	8004e7e <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6c:	3310      	adds	r3, #16
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c78:	3310      	adds	r3, #16
 8004c7a:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c82:	330c      	adds	r3, #12
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10e      	bne.n	8004ca8 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c96:	3308      	adds	r3, #8
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	f0c0 80ed 	bcc.w	8004e7e <dir_next+0x272>
				return FR_NO_FILE;
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	e10f      	b.n	8004ec8 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb4:	330a      	adds	r3, #10
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f040 80d0 	bne.w	8004e7e <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cec:	330c      	adds	r3, #12
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f7ff faee 	bl	80042d4 <get_fat>
 8004cf8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d801      	bhi.n	8004d04 <dir_next+0xf8>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e0e1      	b.n	8004ec8 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0a:	d101      	bne.n	8004d10 <dir_next+0x104>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0db      	b.n	8004ec8 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	f0c0 8097 	bcc.w	8004e56 <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <dir_next+0x126>
 8004d2e:	2304      	movs	r3, #4
 8004d30:	e0ca      	b.n	8004ec8 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d40:	330c      	adds	r3, #12
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f7ff fd91 	bl	800486e <create_chain>
 8004d4c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <dir_next+0x14c>
 8004d54:	2307      	movs	r3, #7
 8004d56:	e0b7      	b.n	8004ec8 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <dir_next+0x156>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e0b2      	b.n	8004ec8 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d68:	d101      	bne.n	8004d6e <dir_next+0x162>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0ac      	b.n	8004ec8 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff f928 	bl	8003fcc <sync_window>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <dir_next+0x17a>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0a0      	b.n	8004ec8 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d9c:	330a      	adds	r3, #10
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	2100      	movs	r1, #0
 8004da4:	f7fe fef4 	bl	8003b90 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db6:	681c      	ldr	r4, [r3, #0]
 8004db8:	6979      	ldr	r1, [r7, #20]
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f7ff fa63 	bl	8004286 <clust2sect>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	e024      	b.n	8004e1a <dir_next+0x20e>
						dp->fs->wflag = 1;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ddc:	3304      	adds	r3, #4
 8004dde:	2201      	movs	r2, #1
 8004de0:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff f8ee 	bl	8003fcc <sync_window>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <dir_next+0x1ee>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e066      	b.n	8004ec8 <dir_next+0x2bc>
						dp->fs->winsect++;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004e06:	330c      	adds	r3, #12
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	1c59      	adds	r1, r3, #1
 8004e0c:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004e10:	330c      	adds	r3, #12
 8004e12:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	3301      	adds	r3, #1
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e26:	3302      	adds	r3, #2
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d3ce      	bcc.n	8004dd0 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004e3e:	330c      	adds	r3, #12
 8004e40:	6819      	ldr	r1, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	1a8a      	subs	r2, r1, r2
 8004e4e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004e52:	330c      	adds	r3, #12
 8004e54:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6979      	ldr	r1, [r7, #20]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fa0a 	bl	8004286 <clust2sect>
 8004e72:	4602      	mov	r2, r0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e7a:	3310      	adds	r3, #16
 8004e7c:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e88:	3306      	adds	r3, #6
 8004e8a:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea2:	330a      	adds	r3, #10
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	fbb3 f1f2 	udiv	r1, r3, r2
 8004eb2:	fb02 f201 	mul.w	r2, r2, r1
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	015b      	lsls	r3, r3, #5
 8004eba:	18c2      	adds	r2, r0, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec2:	3314      	adds	r3, #20
 8004ec4:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	371c      	adds	r7, #28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd90      	pop	{r4, r7, pc}

08004ed0 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004eda:	2100      	movs	r1, #0
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fdba 	bl	8004a56 <dir_sdi>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d138      	bne.n	8004f5e <dir_alloc+0x8e>
		n = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004efe:	3310      	adds	r3, #16
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4619      	mov	r1, r3
 8004f04:	4610      	mov	r0, r2
 8004f06:	f7ff f8bb 	bl	8004080 <move_window>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d123      	bne.n	8004f5c <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f1a:	3314      	adds	r3, #20
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2be5      	cmp	r3, #229	; 0xe5
 8004f22:	d007      	beq.n	8004f34 <dir_alloc+0x64>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f2a:	3314      	adds	r3, #20
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d107      	bne.n	8004f44 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	3301      	adds	r3, #1
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d102      	bne.n	8004f48 <dir_alloc+0x78>
 8004f42:	e00c      	b.n	8004f5e <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004f44:	2300      	movs	r3, #0
 8004f46:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004f48:	2101      	movs	r1, #1
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fe5e 	bl	8004c0c <dir_next>
 8004f50:	4603      	mov	r3, r0
 8004f52:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ca      	beq.n	8004ef0 <dir_alloc+0x20>
 8004f5a:	e000      	b.n	8004f5e <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8004f5c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d101      	bne.n	8004f68 <dir_alloc+0x98>
 8004f64:	2307      	movs	r3, #7
 8004f66:	73fb      	strb	r3, [r7, #15]
	return res;
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	331b      	adds	r3, #27
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	b21a      	sxth	r2, r3
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	331a      	adds	r3, #26
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	b21b      	sxth	r3, r3
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	b21b      	sxth	r3, r3
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d10f      	bne.n	8004fc2 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	3315      	adds	r3, #21
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	b21a      	sxth	r2, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	3314      	adds	r3, #20
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	b21b      	sxth	r3, r3
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	b21b      	sxth	r3, r3
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	041b      	lsls	r3, r3, #16
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

	return cl;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	331a      	adds	r3, #26
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	331b      	adds	r3, #27
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	0c1a      	lsrs	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3314      	adds	r3, #20
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	b29b      	uxth	r3, r3
 8005004:	0a1b      	lsrs	r3, r3, #8
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3315      	adds	r3, #21
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr
	...

0800501c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800502e:	1e5a      	subs	r2, r3, #1
 8005030:	4613      	mov	r3, r2
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	2301      	movs	r3, #1
 8005042:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8005044:	4a2b      	ldr	r2, [pc, #172]	; (80050f4 <cmp_lfn+0xd8>)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	4413      	add	r3, r2
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	4413      	add	r3, r2
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	b21a      	sxth	r2, r3
 8005058:	4926      	ldr	r1, [pc, #152]	; (80050f4 <cmp_lfn+0xd8>)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	440b      	add	r3, r1
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	4619      	mov	r1, r3
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	440b      	add	r3, r1
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b21b      	sxth	r3, r3
 800506a:	4313      	orrs	r3, r2
 800506c:	b21b      	sxth	r3, r3
 800506e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8005070:	89fb      	ldrh	r3, [r7, #14]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d019      	beq.n	80050aa <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005076:	89bb      	ldrh	r3, [r7, #12]
 8005078:	4618      	mov	r0, r3
 800507a:	f003 fb6b 	bl	8008754 <ff_wtoupper>
 800507e:	4603      	mov	r3, r0
 8005080:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2bfe      	cmp	r3, #254	; 0xfe
 8005086:	d80e      	bhi.n	80050a6 <cmp_lfn+0x8a>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	617a      	str	r2, [r7, #20]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	4413      	add	r3, r2
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f003 fb5c 	bl	8008754 <ff_wtoupper>
 800509c:	4603      	mov	r3, r0
 800509e:	461a      	mov	r2, r3
 80050a0:	89fb      	ldrh	r3, [r7, #14]
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d008      	beq.n	80050b8 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80050a6:	2300      	movs	r3, #0
 80050a8:	e01f      	b.n	80050ea <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80050aa:	89bb      	ldrh	r3, [r7, #12]
 80050ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d001      	beq.n	80050b8 <cmp_lfn+0x9c>
 80050b4:	2300      	movs	r3, #0
 80050b6:	e018      	b.n	80050ea <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	3301      	adds	r3, #1
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2b0c      	cmp	r3, #12
 80050c2:	d9bf      	bls.n	8005044 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00b      	beq.n	80050e8 <cmp_lfn+0xcc>
 80050d0:	89fb      	ldrh	r3, [r7, #14]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d008      	beq.n	80050e8 <cmp_lfn+0xcc>
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <cmp_lfn+0xcc>
		return 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80050e8:	2301      	movs	r3, #1
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	080094ac 	.word	0x080094ac

080050f8 <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE* dir			/* Pointer to the directory entry */
)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800510a:	1e5a      	subs	r2, r3, #1
 800510c:	4613      	mov	r3, r2
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	2301      	movs	r3, #1
 800511e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8005120:	4a26      	ldr	r2, [pc, #152]	; (80051bc <pick_lfn+0xc4>)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	4413      	add	r3, r2
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	3301      	adds	r3, #1
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	4413      	add	r3, r2
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	b21a      	sxth	r2, r3
 8005134:	4921      	ldr	r1, [pc, #132]	; (80051bc <pick_lfn+0xc4>)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	440b      	add	r3, r1
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	4619      	mov	r1, r3
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	440b      	add	r3, r1
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	b21b      	sxth	r3, r3
 8005146:	4313      	orrs	r3, r2
 8005148:	b21b      	sxth	r3, r3
 800514a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800514c:	89fb      	ldrh	r3, [r7, #14]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00f      	beq.n	8005172 <pick_lfn+0x7a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2bfe      	cmp	r3, #254	; 0xfe
 8005156:	d901      	bls.n	800515c <pick_lfn+0x64>
 8005158:	2300      	movs	r3, #0
 800515a:	e029      	b.n	80051b0 <pick_lfn+0xb8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800515c:	89bb      	ldrh	r3, [r7, #12]
 800515e:	81fb      	strh	r3, [r7, #14]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	617a      	str	r2, [r7, #20]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	4413      	add	r3, r2
 800516c:	89fa      	ldrh	r2, [r7, #14]
 800516e:	801a      	strh	r2, [r3, #0]
 8005170:	e006      	b.n	8005180 <pick_lfn+0x88>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005172:	89bb      	ldrh	r3, [r7, #12]
 8005174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005178:	4293      	cmp	r3, r2
 800517a:	d001      	beq.n	8005180 <pick_lfn+0x88>
 800517c:	2300      	movs	r3, #0
 800517e:	e017      	b.n	80051b0 <pick_lfn+0xb8>
		}
	} while (++s < 13);						/* Read all character in the entry */
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	3301      	adds	r3, #1
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b0c      	cmp	r3, #12
 800518a:	d9c9      	bls.n	8005120 <pick_lfn+0x28>

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <pick_lfn+0xb6>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2bfe      	cmp	r3, #254	; 0xfe
 800519c:	d901      	bls.n	80051a2 <pick_lfn+0xaa>
 800519e:	2300      	movs	r3, #0
 80051a0:	e006      	b.n	80051b0 <pick_lfn+0xb8>
		lfnbuf[i] = 0;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	4413      	add	r3, r2
 80051aa:	2200      	movs	r2, #0
 80051ac:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 80051ae:	2301      	movs	r3, #1
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	080094ac 	.word	0x080094ac

080051c0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b089      	sub	sp, #36	; 0x24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	4611      	mov	r1, r2
 80051cc:	461a      	mov	r2, r3
 80051ce:	460b      	mov	r3, r1
 80051d0:	71fb      	strb	r3, [r7, #7]
 80051d2:	4613      	mov	r3, r2
 80051d4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	330d      	adds	r3, #13
 80051da:	79ba      	ldrb	r2, [r7, #6]
 80051dc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	330b      	adds	r3, #11
 80051e2:	220f      	movs	r2, #15
 80051e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	330c      	adds	r3, #12
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	331a      	adds	r3, #26
 80051f2:	2200      	movs	r2, #0
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	331b      	adds	r3, #27
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	1e5a      	subs	r2, r3, #1
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	82fb      	strh	r3, [r7, #22]
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005216:	8afb      	ldrh	r3, [r7, #22]
 8005218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800521c:	4293      	cmp	r3, r2
 800521e:	d007      	beq.n	8005230 <fit_lfn+0x70>
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	61fa      	str	r2, [r7, #28]
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005230:	4a1c      	ldr	r2, [pc, #112]	; (80052a4 <fit_lfn+0xe4>)
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	4413      	add	r3, r2
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4413      	add	r3, r2
 800523e:	8afa      	ldrh	r2, [r7, #22]
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	8afb      	ldrh	r3, [r7, #22]
 8005246:	0a1b      	lsrs	r3, r3, #8
 8005248:	b299      	uxth	r1, r3
 800524a:	4a16      	ldr	r2, [pc, #88]	; (80052a4 <fit_lfn+0xe4>)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	4413      	add	r3, r2
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	3301      	adds	r3, #1
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	4413      	add	r3, r2
 8005258:	b2ca      	uxtb	r2, r1
 800525a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800525c:	8afb      	ldrh	r3, [r7, #22]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <fit_lfn+0xa8>
 8005262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005266:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	3301      	adds	r3, #1
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b0c      	cmp	r3, #12
 8005272:	d9d0      	bls.n	8005216 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005274:	8afb      	ldrh	r3, [r7, #22]
 8005276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800527a:	4293      	cmp	r3, r2
 800527c:	d006      	beq.n	800528c <fit_lfn+0xcc>
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <fit_lfn+0xd4>
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005292:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	79fa      	ldrb	r2, [r7, #7]
 8005298:	701a      	strb	r2, [r3, #0]
}
 800529a:	bf00      	nop
 800529c:	3724      	adds	r7, #36	; 0x24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr
 80052a4:	080094ac 	.word	0x080094ac

080052a8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08c      	sub	sp, #48	; 0x30
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80052b6:	220b      	movs	r2, #11
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7fe fc4a 	bl	8003b54 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b05      	cmp	r3, #5
 80052c4:	d92b      	bls.n	800531e <gen_numname+0x76>
		sr = seq;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80052ca:	e022      	b.n	8005312 <gen_numname+0x6a>
			wc = *lfn++;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80052d6:	2300      	movs	r3, #0
 80052d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052da:	e017      	b.n	800530c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	005a      	lsls	r2, r3, #1
 80052e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	4413      	add	r3, r2
 80052e8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80052ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <gen_numname+0x5e>
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005300:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005304:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	3301      	adds	r3, #1
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	2b0f      	cmp	r3, #15
 8005310:	d9e4      	bls.n	80052dc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1d8      	bne.n	80052cc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800531e:	2307      	movs	r3, #7
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	b2db      	uxtb	r3, r3
 800532c:	3330      	adds	r3, #48	; 0x30
 800532e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005336:	2b39      	cmp	r3, #57	; 0x39
 8005338:	d904      	bls.n	8005344 <gen_numname+0x9c>
 800533a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800533e:	3307      	adds	r3, #7
 8005340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	1e5a      	subs	r2, r3, #1
 8005348:	62ba      	str	r2, [r7, #40]	; 0x28
 800534a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800534e:	4413      	add	r3, r2
 8005350:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005354:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1de      	bne.n	8005322 <gen_numname+0x7a>
	ns[i] = '~';
 8005364:	f107 0214 	add.w	r2, r7, #20
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	4413      	add	r3, r2
 800536c:	227e      	movs	r2, #126	; 0x7e
 800536e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005370:	2300      	movs	r3, #0
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
 8005374:	e002      	b.n	800537c <gen_numname+0xd4>
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	3301      	adds	r3, #1
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
 800537c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	429a      	cmp	r2, r3
 8005382:	d205      	bcs.n	8005390 <gen_numname+0xe8>
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	4413      	add	r3, r2
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b20      	cmp	r3, #32
 800538e:	d1f2      	bne.n	8005376 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	2b07      	cmp	r3, #7
 8005394:	d808      	bhi.n	80053a8 <gen_numname+0x100>
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	62ba      	str	r2, [r7, #40]	; 0x28
 800539c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80053a0:	4413      	add	r3, r2
 80053a2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80053a6:	e000      	b.n	80053aa <gen_numname+0x102>
 80053a8:	2120      	movs	r1, #32
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	627a      	str	r2, [r7, #36]	; 0x24
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	460a      	mov	r2, r1
 80053b6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	2b07      	cmp	r3, #7
 80053bc:	d9e8      	bls.n	8005390 <gen_numname+0xe8>
}
 80053be:	bf00      	nop
 80053c0:	bf00      	nop
 80053c2:	3730      	adds	r7, #48	; 0x30
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80053d4:	230b      	movs	r3, #11
 80053d6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	0852      	lsrs	r2, r2, #1
 80053de:	01db      	lsls	r3, r3, #7
 80053e0:	4313      	orrs	r3, r2
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	6079      	str	r1, [r7, #4]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	73fb      	strb	r3, [r7, #15]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1ed      	bne.n	80053d8 <sum_sfn+0x10>
	return sum;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005410:	2100      	movs	r1, #0
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7ff fb1f 	bl	8004a56 <dir_sdi>
 8005418:	4603      	mov	r3, r0
 800541a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800541c:	7dfb      	ldrb	r3, [r7, #23]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <dir_find+0x1e>
 8005422:	7dfb      	ldrb	r3, [r7, #23]
 8005424:	e0c1      	b.n	80055aa <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005426:	23ff      	movs	r3, #255	; 0xff
 8005428:	753b      	strb	r3, [r7, #20]
 800542a:	7d3b      	ldrb	r3, [r7, #20]
 800542c:	757b      	strb	r3, [r7, #21]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005434:	3304      	adds	r3, #4
 8005436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800543a:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800544a:	3310      	adds	r3, #16
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f7fe fe15 	bl	8004080 <move_window>
 8005456:	4603      	mov	r3, r0
 8005458:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800545a:	7dfb      	ldrb	r3, [r7, #23]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f040 809e 	bne.w	800559e <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005468:	3314      	adds	r3, #20
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005474:	7dbb      	ldrb	r3, [r7, #22]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <dir_find+0x78>
 800547a:	2304      	movs	r3, #4
 800547c:	75fb      	strb	r3, [r7, #23]
 800547e:	e093      	b.n	80055a8 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	330b      	adds	r3, #11
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800548a:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800548c:	7dbb      	ldrb	r3, [r7, #22]
 800548e:	2be5      	cmp	r3, #229	; 0xe5
 8005490:	d007      	beq.n	80054a2 <dir_find+0x9a>
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00c      	beq.n	80054b6 <dir_find+0xae>
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b0f      	cmp	r3, #15
 80054a0:	d009      	beq.n	80054b6 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80054a2:	23ff      	movs	r3, #255	; 0xff
 80054a4:	757b      	strb	r3, [r7, #21]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054ac:	3304      	adds	r3, #4
 80054ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	e068      	b.n	8005588 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	2b0f      	cmp	r3, #15
 80054ba:	d139      	bne.n	8005530 <dir_find+0x128>
				if (dp->lfn) {
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d05f      	beq.n	8005588 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80054c8:	7dbb      	ldrb	r3, [r7, #22]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d012      	beq.n	80054f8 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	7b5b      	ldrb	r3, [r3, #13]
 80054d6:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80054d8:	7dbb      	ldrb	r3, [r7, #22]
 80054da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054de:	75bb      	strb	r3, [r7, #22]
 80054e0:	7dbb      	ldrb	r3, [r7, #22]
 80054e2:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ea:	3306      	adds	r3, #6
 80054ec:	881a      	ldrh	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054f4:	3304      	adds	r3, #4
 80054f6:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80054f8:	7dba      	ldrb	r2, [r7, #22]
 80054fa:	7d7b      	ldrb	r3, [r7, #21]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d114      	bne.n	800552a <dir_find+0x122>
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	330d      	adds	r3, #13
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	7d3a      	ldrb	r2, [r7, #20]
 8005508:	429a      	cmp	r2, r3
 800550a:	d10e      	bne.n	800552a <dir_find+0x122>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6939      	ldr	r1, [r7, #16]
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fd80 	bl	800501c <cmp_lfn>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <dir_find+0x122>
 8005522:	7d7b      	ldrb	r3, [r7, #21]
 8005524:	3b01      	subs	r3, #1
 8005526:	b2db      	uxtb	r3, r3
 8005528:	e000      	b.n	800552c <dir_find+0x124>
 800552a:	23ff      	movs	r3, #255	; 0xff
 800552c:	757b      	strb	r3, [r7, #21]
 800552e:	e02b      	b.n	8005588 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005530:	7d7b      	ldrb	r3, [r7, #21]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d107      	bne.n	8005546 <dir_find+0x13e>
 8005536:	6938      	ldr	r0, [r7, #16]
 8005538:	f7ff ff46 	bl	80053c8 <sum_sfn>
 800553c:	4603      	mov	r3, r0
 800553e:	461a      	mov	r2, r3
 8005540:	7d3b      	ldrb	r3, [r7, #20]
 8005542:	4293      	cmp	r3, r2
 8005544:	d02d      	beq.n	80055a2 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800554c:	3318      	adds	r3, #24
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330b      	adds	r3, #11
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10c      	bne.n	8005576 <dir_find+0x16e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005562:	3318      	adds	r3, #24
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	220b      	movs	r2, #11
 8005568:	4619      	mov	r1, r3
 800556a:	6938      	ldr	r0, [r7, #16]
 800556c:	f7fe fb2a 	bl	8003bc4 <mem_cmp>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d017      	beq.n	80055a6 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005576:	23ff      	movs	r3, #255	; 0xff
 8005578:	757b      	strb	r3, [r7, #21]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005580:	3304      	adds	r3, #4
 8005582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005586:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005588:	2100      	movs	r1, #0
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff fb3e 	bl	8004c0c <dir_next>
 8005590:	4603      	mov	r3, r0
 8005592:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f43f af50 	beq.w	800543c <dir_find+0x34>
 800559c:	e004      	b.n	80055a8 <dir_find+0x1a0>
		if (res != FR_OK) break;
 800559e:	bf00      	nop
 80055a0:	e002      	b.n	80055a8 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80055a2:	bf00      	nop
 80055a4:	e000      	b.n	80055a8 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80055a6:	bf00      	nop

	return res;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b086      	sub	sp, #24
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 80055bc:	23ff      	movs	r3, #255	; 0xff
 80055be:	757b      	strb	r3, [r7, #21]
 80055c0:	23ff      	movs	r3, #255	; 0xff
 80055c2:	753b      	strb	r3, [r7, #20]
#endif

	res = FR_NO_FILE;
 80055c4:	2304      	movs	r3, #4
 80055c6:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 80055c8:	e08f      	b.n	80056ea <dir_read+0x138>
		res = move_window(dp->fs, dp->sect);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d8:	3310      	adds	r3, #16
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f7fe fd4e 	bl	8004080 <move_window>
 80055e4:	4603      	mov	r3, r0
 80055e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f040 8086 	bne.w	80056fc <dir_read+0x14a>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f6:	3314      	adds	r3, #20
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005602:	7dbb      	ldrb	r3, [r7, #22]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d102      	bne.n	800560e <dir_read+0x5c>
 8005608:	2304      	movs	r3, #4
 800560a:	75fb      	strb	r3, [r7, #23]
 800560c:	e07b      	b.n	8005706 <dir_read+0x154>
		a = dir[DIR_Attr] & AM_MASK;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	330b      	adds	r3, #11
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005618:	73fb      	strb	r3, [r7, #15]
#if _USE_LFN	/* LFN configuration */
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800561a:	7dbb      	ldrb	r3, [r7, #22]
 800561c:	2be5      	cmp	r3, #229	; 0xe5
 800561e:	d00e      	beq.n	800563e <dir_read+0x8c>
 8005620:	7dbb      	ldrb	r3, [r7, #22]
 8005622:	2b2e      	cmp	r3, #46	; 0x2e
 8005624:	d00b      	beq.n	800563e <dir_read+0x8c>
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	f023 0320 	bic.w	r3, r3, #32
 800562c:	2b08      	cmp	r3, #8
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	4293      	cmp	r3, r2
 800563c:	d002      	beq.n	8005644 <dir_read+0x92>
			ord = 0xFF;
 800563e:	23ff      	movs	r3, #255	; 0xff
 8005640:	757b      	strb	r3, [r7, #21]
 8005642:	e049      	b.n	80056d8 <dir_read+0x126>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b0f      	cmp	r3, #15
 8005648:	d133      	bne.n	80056b2 <dir_read+0x100>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 800564a:	7dbb      	ldrb	r3, [r7, #22]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d012      	beq.n	800567a <dir_read+0xc8>
					sum = dir[LDIR_Chksum];
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	7b5b      	ldrb	r3, [r3, #13]
 8005658:	753b      	strb	r3, [r7, #20]
					c &= ~LLEF; ord = c;
 800565a:	7dbb      	ldrb	r3, [r7, #22]
 800565c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005660:	75bb      	strb	r3, [r7, #22]
 8005662:	7dbb      	ldrb	r3, [r7, #22]
 8005664:	757b      	strb	r3, [r7, #21]
					dp->lfn_idx = dp->index;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566c:	3306      	adds	r3, #6
 800566e:	881a      	ldrh	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005676:	3304      	adds	r3, #4
 8005678:	801a      	strh	r2, [r3, #0]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800567a:	7dba      	ldrb	r2, [r7, #22]
 800567c:	7d7b      	ldrb	r3, [r7, #21]
 800567e:	429a      	cmp	r2, r3
 8005680:	d114      	bne.n	80056ac <dir_read+0xfa>
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	330d      	adds	r3, #13
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	7d3a      	ldrb	r2, [r7, #20]
 800568a:	429a      	cmp	r2, r3
 800568c:	d10e      	bne.n	80056ac <dir_read+0xfa>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6939      	ldr	r1, [r7, #16]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff fd2d 	bl	80050f8 <pick_lfn>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <dir_read+0xfa>
 80056a4:	7d7b      	ldrb	r3, [r7, #21]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	e000      	b.n	80056ae <dir_read+0xfc>
 80056ac:	23ff      	movs	r3, #255	; 0xff
 80056ae:	757b      	strb	r3, [r7, #21]
 80056b0:	e012      	b.n	80056d8 <dir_read+0x126>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 80056b2:	7d7b      	ldrb	r3, [r7, #21]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d107      	bne.n	80056c8 <dir_read+0x116>
 80056b8:	6938      	ldr	r0, [r7, #16]
 80056ba:	f7ff fe85 	bl	80053c8 <sum_sfn>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	7d3b      	ldrb	r3, [r7, #20]
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d01b      	beq.n	8005700 <dir_read+0x14e>
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80056ce:	3304      	adds	r3, #4
 80056d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056d4:	801a      	strh	r2, [r3, #0]
				break;
 80056d6:	e013      	b.n	8005700 <dir_read+0x14e>
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 80056d8:	2100      	movs	r1, #0
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff fa96 	bl	8004c0c <dir_next>
 80056e0:	4603      	mov	r3, r0
 80056e2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80056e4:	7dfb      	ldrb	r3, [r7, #23]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10c      	bne.n	8005704 <dir_read+0x152>
	while (dp->sect) {
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f0:	3310      	adds	r3, #16
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f47f af68 	bne.w	80055ca <dir_read+0x18>
 80056fa:	e004      	b.n	8005706 <dir_read+0x154>
		if (res != FR_OK) break;
 80056fc:	bf00      	nop
 80056fe:	e002      	b.n	8005706 <dir_read+0x154>
				break;
 8005700:	bf00      	nop
 8005702:	e000      	b.n	8005706 <dir_read+0x154>
		if (res != FR_OK) break;
 8005704:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8005706:	7dfb      	ldrb	r3, [r7, #23]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <dir_read+0x166>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005712:	3310      	adds	r3, #16
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]

	return res;
 8005718:	7dfb      	ldrb	r3, [r7, #23]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08c      	sub	sp, #48	; 0x30
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005732:	3318      	adds	r3, #24
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8005742:	f107 030c 	add.w	r3, r7, #12
 8005746:	220c      	movs	r2, #12
 8005748:	6a39      	ldr	r1, [r7, #32]
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fa02 	bl	8003b54 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005750:	7dfb      	ldrb	r3, [r7, #23]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d039      	beq.n	80057ce <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	330b      	adds	r3, #11
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800576c:	2301      	movs	r3, #1
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005770:	e013      	b.n	800579a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005772:	f107 010c 	add.w	r1, r7, #12
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	6a38      	ldr	r0, [r7, #32]
 800577c:	f7ff fd94 	bl	80052a8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fe41 	bl	8005408 <dir_find>
 8005786:	4603      	mov	r3, r0
 8005788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800578c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	3301      	adds	r3, #1
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	2b63      	cmp	r3, #99	; 0x63
 800579e:	d9e8      	bls.n	8005772 <dir_register+0x4e>
 80057a0:	e000      	b.n	80057a4 <dir_register+0x80>
			if (res != FR_OK) break;
 80057a2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	2b64      	cmp	r3, #100	; 0x64
 80057a8:	d101      	bne.n	80057ae <dir_register+0x8a>
 80057aa:	2307      	movs	r3, #7
 80057ac:	e0e3      	b.n	8005976 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80057ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d002      	beq.n	80057bc <dir_register+0x98>
 80057b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057ba:	e0dc      	b.n	8005976 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	330b      	adds	r3, #11
 80057c0:	7dfa      	ldrb	r2, [r7, #23]
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d014      	beq.n	8005802 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 80057d8:	2300      	movs	r3, #0
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28
 80057dc:	e002      	b.n	80057e4 <dir_register+0xc0>
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	3301      	adds	r3, #1
 80057e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f5      	bne.n	80057de <dir_register+0xba>
		nent = (n + 25) / 13;
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	3319      	adds	r3, #25
 80057f6:	4a62      	ldr	r2, [pc, #392]	; (8005980 <dir_register+0x25c>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	089b      	lsrs	r3, r3, #2
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005800:	e001      	b.n	8005806 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8005802:	2301      	movs	r3, #1
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff fb61 	bl	8004ed0 <dir_alloc>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005818:	2b00      	cmp	r3, #0
 800581a:	d160      	bne.n	80058de <dir_register+0x1ba>
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	3b01      	subs	r3, #1
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d05a      	beq.n	80058de <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582e:	3306      	adds	r3, #6
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff f90b 	bl	8004a56 <dir_sdi>
 8005840:	4603      	mov	r3, r0
 8005842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800584a:	2b00      	cmp	r3, #0
 800584c:	d147      	bne.n	80058de <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005854:	3318      	adds	r3, #24
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fdb5 	bl	80053c8 <sum_sfn>
 800585e:	4603      	mov	r3, r0
 8005860:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005870:	3310      	adds	r3, #16
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f7fe fc02 	bl	8004080 <move_window>
 800587c:	4603      	mov	r3, r0
 800587e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005886:	2b00      	cmp	r3, #0
 8005888:	d128      	bne.n	80058dc <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005898:	3314      	adds	r3, #20
 800589a:	6819      	ldr	r1, [r3, #0]
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	7efb      	ldrb	r3, [r7, #27]
 80058a2:	f7ff fc8d 	bl	80051c0 <fit_lfn>
				dp->fs->wflag = 1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b2:	3304      	adds	r3, #4
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 80058b8:	2100      	movs	r1, #0
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff f9a6 	bl	8004c0c <dir_next>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80058c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d107      	bne.n	80058de <dir_register+0x1ba>
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	3b01      	subs	r3, #1
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1c3      	bne.n	8005862 <dir_register+0x13e>
 80058da:	e000      	b.n	80058de <dir_register+0x1ba>
				if (res != FR_OK) break;
 80058dc:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80058de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d145      	bne.n	8005972 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f4:	3310      	adds	r3, #16
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4619      	mov	r1, r3
 80058fa:	4610      	mov	r0, r2
 80058fc:	f7fe fbc0 	bl	8004080 <move_window>
 8005900:	4603      	mov	r3, r0
 8005902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800590a:	2b00      	cmp	r3, #0
 800590c:	d131      	bne.n	8005972 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005914:	3314      	adds	r3, #20
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2220      	movs	r2, #32
 800591a:	2100      	movs	r1, #0
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe f937 	bl	8003b90 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005928:	3314      	adds	r3, #20
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005932:	3318      	adds	r3, #24
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	220b      	movs	r2, #11
 8005938:	4619      	mov	r1, r3
 800593a:	f7fe f90b 	bl	8003b54 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005944:	3318      	adds	r3, #24
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330b      	adds	r3, #11
 800594a:	781a      	ldrb	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005952:	3314      	adds	r3, #20
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	f002 0218 	and.w	r2, r2, #24
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800596c:	3304      	adds	r3, #4
 800596e:	2201      	movs	r2, #1
 8005970:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 8005972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005976:	4618      	mov	r0, r3
 8005978:	3730      	adds	r7, #48	; 0x30
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	4ec4ec4f 	.word	0x4ec4ec4f

08005984 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	UINT i;

	i = dp->index;	/* SFN index */
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005992:	3306      	adds	r3, #6
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	60bb      	str	r3, [r7, #8]
	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800599e:	3304      	adds	r3, #4
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d005      	beq.n	80059b6 <dir_remove+0x32>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80059b0:	3304      	adds	r3, #4
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	e000      	b.n	80059b8 <dir_remove+0x34>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff f84b 	bl	8004a56 <dir_sdi>
 80059c0:	4603      	mov	r3, r0
 80059c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d146      	bne.n	8005a58 <dir_remove+0xd4>
		do {
			res = move_window(dp->fs, dp->sect);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d8:	3310      	adds	r3, #16
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4619      	mov	r1, r3
 80059de:	4610      	mov	r0, r2
 80059e0:	f7fe fb4e 	bl	8004080 <move_window>
 80059e4:	4603      	mov	r3, r0
 80059e6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d12c      	bne.n	8005a48 <dir_remove+0xc4>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f4:	3314      	adds	r3, #20
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2220      	movs	r2, #32
 80059fa:	2100      	movs	r1, #0
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fe f8c7 	bl	8003b90 <mem_set>
			*dp->dir = DDEM;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a08:	3314      	adds	r3, #20
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	22e5      	movs	r2, #229	; 0xe5
 8005a0e:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	2201      	movs	r2, #1
 8005a20:	701a      	strb	r2, [r3, #0]
			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a28:	3306      	adds	r3, #6
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d90b      	bls.n	8005a4c <dir_remove+0xc8>
			res = dir_next(dp, 0);		/* Next entry */
 8005a34:	2100      	movs	r1, #0
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff f8e8 	bl	8004c0c <dir_next>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0c1      	beq.n	80059ca <dir_remove+0x46>
 8005a46:	e002      	b.n	8005a4e <dir_remove+0xca>
			if (res != FR_OK) break;
 8005a48:	bf00      	nop
 8005a4a:	e000      	b.n	8005a4e <dir_remove+0xca>
			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 8005a4c:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d101      	bne.n	8005a58 <dir_remove+0xd4>
 8005a54:	2302      	movs	r3, #2
 8005a56:	73fb      	strb	r3, [r7, #15]
			dp->fs->wflag = 1;
		}
	}
#endif

	return res;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	e002      	b.n	8005a7c <create_name+0x18>
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b2f      	cmp	r3, #47	; 0x2f
 8005a82:	d0f8      	beq.n	8005a76 <create_name+0x12>
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b5c      	cmp	r3, #92	; 0x5c
 8005a8a:	d0f4      	beq.n	8005a76 <create_name+0x12>
	lfn = dp->lfn;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	61ba      	str	r2, [r7, #24]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005aac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aae:	2b1f      	cmp	r3, #31
 8005ab0:	d92f      	bls.n	8005b12 <create_name+0xae>
 8005ab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ab4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ab6:	d02c      	beq.n	8005b12 <create_name+0xae>
 8005ab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aba:	2b5c      	cmp	r3, #92	; 0x5c
 8005abc:	d029      	beq.n	8005b12 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2bfe      	cmp	r3, #254	; 0xfe
 8005ac2:	d901      	bls.n	8005ac8 <create_name+0x64>
			return FR_INVALID_NAME;
 8005ac4:	2306      	movs	r3, #6
 8005ac6:	e18b      	b.n	8005de0 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005ac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f002 fe04 	bl	80086e0 <ff_convert>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005adc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <create_name+0x82>
 8005ae2:	2306      	movs	r3, #6
 8005ae4:	e17c      	b.n	8005de0 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005ae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8005aea:	d809      	bhi.n	8005b00 <create_name+0x9c>
 8005aec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aee:	4619      	mov	r1, r3
 8005af0:	488f      	ldr	r0, [pc, #572]	; (8005d30 <create_name+0x2cc>)
 8005af2:	f7fe f88d 	bl	8003c10 <chk_chr>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <create_name+0x9c>
			return FR_INVALID_NAME;
 8005afc:	2306      	movs	r3, #6
 8005afe:	e16f      	b.n	8005de0 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	617a      	str	r2, [r7, #20]
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b0e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005b10:	e7c5      	b.n	8005a9e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	441a      	add	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b1e:	2b1f      	cmp	r3, #31
 8005b20:	d801      	bhi.n	8005b26 <create_name+0xc2>
 8005b22:	2304      	movs	r3, #4
 8005b24:	e000      	b.n	8005b28 <create_name+0xc4>
 8005b26:	2300      	movs	r3, #0
 8005b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8005b2c:	e011      	b.n	8005b52 <create_name+0xee>
		w = lfn[di - 1];
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b34:	3b01      	subs	r3, #1
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d002      	beq.n	8005b4c <create_name+0xe8>
 8005b46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b48:	2b2e      	cmp	r3, #46	; 0x2e
 8005b4a:	d106      	bne.n	8005b5a <create_name+0xf6>
		di--;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1ea      	bne.n	8005b2e <create_name+0xca>
 8005b58:	e000      	b.n	8005b5c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8005b5a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <create_name+0x102>
 8005b62:	2306      	movs	r3, #6
 8005b64:	e13c      	b.n	8005de0 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	2200      	movs	r2, #0
 8005b70:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b78:	3318      	adds	r3, #24
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	220b      	movs	r2, #11
 8005b7e:	2120      	movs	r1, #32
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fe f805 	bl	8003b90 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005b86:	2300      	movs	r3, #0
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	e002      	b.n	8005b92 <create_name+0x12e>
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	61bb      	str	r3, [r7, #24]
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d0f5      	beq.n	8005b8c <create_name+0x128>
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	2b2e      	cmp	r3, #46	; 0x2e
 8005bac:	d0ee      	beq.n	8005b8c <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <create_name+0x164>
 8005bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bb8:	f043 0303 	orr.w	r3, r3, #3
 8005bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005bc0:	e002      	b.n	8005bc8 <create_name+0x164>
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <create_name+0x17e>
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	2b2e      	cmp	r3, #46	; 0x2e
 8005be0:	d1ef      	bne.n	8005bc2 <create_name+0x15e>

	b = i = 0; ni = 8;
 8005be2:	2300      	movs	r3, #0
 8005be4:	623b      	str	r3, [r7, #32]
 8005be6:	2300      	movs	r3, #0
 8005be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005bec:	2308      	movs	r3, #8
 8005bee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	61ba      	str	r2, [r7, #24]
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005c00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8092 	beq.w	8005d2c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d006      	beq.n	8005c1c <create_name+0x1b8>
 8005c0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c10:	2b2e      	cmp	r3, #46	; 0x2e
 8005c12:	d10a      	bne.n	8005c2a <create_name+0x1c6>
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d006      	beq.n	8005c2a <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 8005c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c20:	f043 0303 	orr.w	r3, r3, #3
 8005c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c28:	e07f      	b.n	8005d2a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005c2a:	6a3a      	ldr	r2, [r7, #32]
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d203      	bcs.n	8005c3a <create_name+0x1d6>
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d123      	bne.n	8005c82 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b0b      	cmp	r3, #11
 8005c3e:	d106      	bne.n	8005c4e <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 8005c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c44:	f043 0303 	orr.w	r3, r3, #3
 8005c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c4c:	e077      	b.n	8005d3e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d005      	beq.n	8005c62 <create_name+0x1fe>
 8005c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c5a:	f043 0303 	orr.w	r3, r3, #3
 8005c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d868      	bhi.n	8005d3c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	2308      	movs	r3, #8
 8005c70:	623b      	str	r3, [r7, #32]
 8005c72:	230b      	movs	r3, #11
 8005c74:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005c76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005c80:	e053      	b.n	8005d2a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c84:	2b7f      	cmp	r3, #127	; 0x7f
 8005c86:	d914      	bls.n	8005cb2 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f002 fd27 	bl	80086e0 <ff_convert>
 8005c92:	4603      	mov	r3, r0
 8005c94:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <create_name+0x242>
 8005c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c9e:	3b80      	subs	r3, #128	; 0x80
 8005ca0:	4a24      	ldr	r2, [pc, #144]	; (8005d34 <create_name+0x2d0>)
 8005ca2:	5cd3      	ldrb	r3, [r2, r3]
 8005ca4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005caa:	f043 0302 	orr.w	r3, r3, #2
 8005cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005cb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <create_name+0x264>
 8005cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cba:	4619      	mov	r1, r3
 8005cbc:	481e      	ldr	r0, [pc, #120]	; (8005d38 <create_name+0x2d4>)
 8005cbe:	f7fd ffa7 	bl	8003c10 <chk_chr>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005cc8:	235f      	movs	r3, #95	; 0x5f
 8005cca:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cd0:	f043 0303 	orr.w	r3, r3, #3
 8005cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005cd8:	e01b      	b.n	8005d12 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d909      	bls.n	8005cf4 <create_name+0x290>
 8005ce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ce2:	2b5a      	cmp	r3, #90	; 0x5a
 8005ce4:	d806      	bhi.n	8005cf4 <create_name+0x290>
					b |= 2;
 8005ce6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005cea:	f043 0302 	orr.w	r3, r3, #2
 8005cee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005cf2:	e00e      	b.n	8005d12 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cf6:	2b60      	cmp	r3, #96	; 0x60
 8005cf8:	d90b      	bls.n	8005d12 <create_name+0x2ae>
 8005cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cfc:	2b7a      	cmp	r3, #122	; 0x7a
 8005cfe:	d808      	bhi.n	8005d12 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 8005d00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005d0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d0e:	3b20      	subs	r3, #32
 8005d10:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d18:	3318      	adds	r3, #24
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	1c59      	adds	r1, r3, #1
 8005d20:	6239      	str	r1, [r7, #32]
 8005d22:	4413      	add	r3, r2
 8005d24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8005d2a:	e761      	b.n	8005bf0 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 8005d2c:	bf00      	nop
 8005d2e:	e006      	b.n	8005d3e <create_name+0x2da>
 8005d30:	080093cc 	.word	0x080093cc
 8005d34:	0800942c 	.word	0x0800942c
 8005d38:	080093d8 	.word	0x080093d8
			if (si > di) break;			/* No extension */
 8005d3c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d44:	3318      	adds	r3, #24
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2be5      	cmp	r3, #229	; 0xe5
 8005d4c:	d106      	bne.n	8005d5c <create_name+0x2f8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d54:	3318      	adds	r3, #24
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2205      	movs	r2, #5
 8005d5a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d104      	bne.n	8005d6c <create_name+0x308>
 8005d62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005d6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d70:	f003 030c 	and.w	r3, r3, #12
 8005d74:	2b0c      	cmp	r3, #12
 8005d76:	d005      	beq.n	8005d84 <create_name+0x320>
 8005d78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d105      	bne.n	8005d90 <create_name+0x32c>
		cf |= NS_LFN;
 8005d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d88:	f043 0302 	orr.w	r3, r3, #2
 8005d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d117      	bne.n	8005dcc <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d105      	bne.n	8005db4 <create_name+0x350>
 8005da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dac:	f043 0310 	orr.w	r3, r3, #16
 8005db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005db4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005db8:	f003 030c 	and.w	r3, r3, #12
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d105      	bne.n	8005dcc <create_name+0x368>
 8005dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dc4:	f043 0308 	orr.w	r3, r3, #8
 8005dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd2:	3318      	adds	r3, #24
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	330b      	adds	r3, #11
 8005dd8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005ddc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005dde:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3728      	adds	r7, #40	; 0x28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b2f      	cmp	r3, #47	; 0x2f
 8005df8:	d003      	beq.n	8005e02 <follow_path+0x1a>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b5c      	cmp	r3, #92	; 0x5c
 8005e00:	d102      	bne.n	8005e08 <follow_path+0x20>
		path++;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	3301      	adds	r3, #1
 8005e06:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0e:	3308      	adds	r3, #8
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b1f      	cmp	r3, #31
 8005e1a:	d80c      	bhi.n	8005e36 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fe fe19 	bl	8004a56 <dir_sdi>
 8005e24:	4603      	mov	r3, r0
 8005e26:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2e:	3314      	adds	r3, #20
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	e04c      	b.n	8005ed0 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e36:	463b      	mov	r3, r7
 8005e38:	4619      	mov	r1, r3
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff fe12 	bl	8005a64 <create_name>
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d13d      	bne.n	8005ec6 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff fadc 	bl	8005408 <dir_find>
 8005e50:	4603      	mov	r3, r0
 8005e52:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e5a:	3318      	adds	r3, #24
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	7adb      	ldrb	r3, [r3, #11]
 8005e60:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d12d      	bne.n	8005eca <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005e6e:	7bbb      	ldrb	r3, [r7, #14]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d128      	bne.n	8005eca <follow_path+0xe2>
 8005e78:	2305      	movs	r3, #5
 8005e7a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005e7c:	e025      	b.n	8005eca <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d122      	bne.n	8005ece <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8e:	3314      	adds	r3, #20
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	330b      	adds	r3, #11
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	f003 0310 	and.w	r3, r3, #16
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d102      	bne.n	8005ea8 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 8005ea2:	2305      	movs	r3, #5
 8005ea4:	73fb      	strb	r3, [r7, #15]
 8005ea6:	e013      	b.n	8005ed0 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68b9      	ldr	r1, [r7, #8]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff f85d 	bl	8004f72 <ld_clust>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ec4:	e7b7      	b.n	8005e36 <follow_path+0x4e>
			if (res != FR_OK) break;
 8005ec6:	bf00      	nop
 8005ec8:	e002      	b.n	8005ed0 <follow_path+0xe8>
				break;
 8005eca:	bf00      	nop
 8005ecc:	e000      	b.n	8005ed0 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ece:	bf00      	nop
		}
	}

	return res;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b087      	sub	sp, #28
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ee6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d031      	beq.n	8005f54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e002      	b.n	8005efe <get_ldnumber+0x24>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	3301      	adds	r3, #1
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b1f      	cmp	r3, #31
 8005f04:	d903      	bls.n	8005f0e <get_ldnumber+0x34>
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b3a      	cmp	r3, #58	; 0x3a
 8005f0c:	d1f4      	bne.n	8005ef8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b3a      	cmp	r3, #58	; 0x3a
 8005f14:	d11c      	bne.n	8005f50 <get_ldnumber+0x76>
			tp = *path;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	60fa      	str	r2, [r7, #12]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	3b30      	subs	r3, #48	; 0x30
 8005f26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b09      	cmp	r3, #9
 8005f2c:	d80e      	bhi.n	8005f4c <get_ldnumber+0x72>
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d10a      	bne.n	8005f4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d107      	bne.n	8005f4c <get_ldnumber+0x72>
					vol = (int)i;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	3301      	adds	r3, #1
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	e002      	b.n	8005f56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005f50:	2300      	movs	r3, #0
 8005f52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005f54:	693b      	ldr	r3, [r7, #16]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr

08005f60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f70:	3304      	adds	r3, #4
 8005f72:	2200      	movs	r2, #0
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f82:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fe f87a 	bl	8004080 <move_window>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <check_fs+0x36>
		return 3;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e04a      	b.n	800602c <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	b21a      	sxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005faa:	b21b      	sxth	r3, r3
 8005fac:	4313      	orrs	r3, r2
 8005fae:	b21b      	sxth	r3, r3
 8005fb0:	4a20      	ldr	r2, [pc, #128]	; (8006034 <check_fs+0xd4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d001      	beq.n	8005fba <check_fs+0x5a>
		return 2;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e038      	b.n	800602c <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3336      	adds	r3, #54	; 0x36
 8005fbe:	3303      	adds	r3, #3
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	061a      	lsls	r2, r3, #24
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3336      	adds	r3, #54	; 0x36
 8005fc8:	3302      	adds	r3, #2
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	041b      	lsls	r3, r3, #16
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	3236      	adds	r2, #54	; 0x36
 8005fd4:	3201      	adds	r2, #1
 8005fd6:	7812      	ldrb	r2, [r2, #0]
 8005fd8:	0212      	lsls	r2, r2, #8
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005fe8:	4a13      	ldr	r2, [pc, #76]	; (8006038 <check_fs+0xd8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d101      	bne.n	8005ff2 <check_fs+0x92>
		return 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e01c      	b.n	800602c <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3352      	adds	r3, #82	; 0x52
 8005ff6:	3303      	adds	r3, #3
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	061a      	lsls	r2, r3, #24
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3352      	adds	r3, #82	; 0x52
 8006000:	3302      	adds	r3, #2
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	041b      	lsls	r3, r3, #16
 8006006:	4313      	orrs	r3, r2
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	3252      	adds	r2, #82	; 0x52
 800600c:	3201      	adds	r2, #1
 800600e:	7812      	ldrb	r2, [r2, #0]
 8006010:	0212      	lsls	r2, r2, #8
 8006012:	4313      	orrs	r3, r2
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800601a:	4313      	orrs	r3, r2
 800601c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006020:	4a05      	ldr	r2, [pc, #20]	; (8006038 <check_fs+0xd8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d101      	bne.n	800602a <check_fs+0xca>
		return 0;
 8006026:	2300      	movs	r3, #0
 8006028:	e000      	b.n	800602c <check_fs+0xcc>

	return 1;
 800602a:	2301      	movs	r3, #1
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	ffffaa55 	.word	0xffffaa55
 8006038:	00544146 	.word	0x00544146

0800603c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b096      	sub	sp, #88	; 0x58
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006050:	68b8      	ldr	r0, [r7, #8]
 8006052:	f7ff ff42 	bl	8005eda <get_ldnumber>
 8006056:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605a:	2b00      	cmp	r3, #0
 800605c:	da01      	bge.n	8006062 <find_volume+0x26>
 800605e:	230b      	movs	r3, #11
 8006060:	e33c      	b.n	80066dc <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006062:	4ab3      	ldr	r2, [pc, #716]	; (8006330 <find_volume+0x2f4>)
 8006064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <find_volume+0x3a>
 8006072:	230c      	movs	r3, #12
 8006074:	e332      	b.n	80066dc <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800607a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01d      	beq.n	80060c4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800608e:	3301      	adds	r3, #1
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f7fd fcc0 	bl	8003a18 <disk_status>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800609e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10c      	bne.n	80060c4 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <find_volume+0x84>
 80060b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80060bc:	230a      	movs	r3, #10
 80060be:	e30d      	b.n	80066dc <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 80060c0:	2300      	movs	r3, #0
 80060c2:	e30b      	b.n	80066dc <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ca:	2200      	movs	r2, #0
 80060cc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80060ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d8:	3301      	adds	r3, #1
 80060da:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e2:	3301      	adds	r3, #1
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fd fcb0 	bl	8003a4c <disk_initialize>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80060f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80060fe:	2303      	movs	r3, #3
 8006100:	e2ec      	b.n	80066dc <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <find_volume+0xdc>
 8006108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8006114:	230a      	movs	r3, #10
 8006116:	e2e1      	b.n	80066dc <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800611e:	3301      	adds	r3, #1
 8006120:	7818      	ldrb	r0, [r3, #0]
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006128:	330a      	adds	r3, #10
 800612a:	461a      	mov	r2, r3
 800612c:	2102      	movs	r1, #2
 800612e:	f7fd fcf3 	bl	8003b18 <disk_ioctl>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10f      	bne.n	8006158 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800613e:	330a      	adds	r3, #10
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006146:	d307      	bcc.n	8006158 <find_volume+0x11c>
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800614e:	330a      	adds	r3, #10
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006156:	d901      	bls.n	800615c <find_volume+0x120>
 8006158:	2301      	movs	r3, #1
 800615a:	e2bf      	b.n	80066dc <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006160:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006162:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006164:	f7ff fefc 	bl	8005f60 <check_fs>
 8006168:	4603      	mov	r3, r0
 800616a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800616e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006172:	2b01      	cmp	r3, #1
 8006174:	d155      	bne.n	8006222 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006176:	2300      	movs	r3, #0
 8006178:	643b      	str	r3, [r7, #64]	; 0x40
 800617a:	e029      	b.n	80061d0 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800617c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800617e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006186:	4413      	add	r3, r2
 8006188:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	3304      	adds	r3, #4
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d012      	beq.n	80061ba <find_volume+0x17e>
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	330b      	adds	r3, #11
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	061a      	lsls	r2, r3, #24
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	330a      	adds	r3, #10
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	041b      	lsls	r3, r3, #16
 80061a4:	4313      	orrs	r3, r2
 80061a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a8:	3209      	adds	r2, #9
 80061aa:	7812      	ldrb	r2, [r2, #0]
 80061ac:	0212      	lsls	r2, r2, #8
 80061ae:	4313      	orrs	r3, r2
 80061b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b2:	3208      	adds	r2, #8
 80061b4:	7812      	ldrb	r2, [r2, #0]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	e000      	b.n	80061bc <find_volume+0x180>
 80061ba:	2200      	movs	r2, #0
 80061bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80061c4:	440b      	add	r3, r1
 80061c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80061ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061cc:	3301      	adds	r3, #1
 80061ce:	643b      	str	r3, [r7, #64]	; 0x40
 80061d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d9d2      	bls.n	800617c <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80061d6:	2300      	movs	r3, #0
 80061d8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80061da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <find_volume+0x1aa>
 80061e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e2:	3b01      	subs	r3, #1
 80061e4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80061e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80061ee:	4413      	add	r3, r2
 80061f0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80061f4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80061f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <find_volume+0x1cc>
 80061fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006200:	f7ff feae 	bl	8005f60 <check_fs>
 8006204:	4603      	mov	r3, r0
 8006206:	e000      	b.n	800620a <find_volume+0x1ce>
 8006208:	2302      	movs	r3, #2
 800620a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800620e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <find_volume+0x1e6>
 8006216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006218:	3301      	adds	r3, #1
 800621a:	643b      	str	r3, [r7, #64]	; 0x40
 800621c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621e:	2b03      	cmp	r3, #3
 8006220:	d9e1      	bls.n	80061e6 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006222:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006226:	2b03      	cmp	r3, #3
 8006228:	d101      	bne.n	800622e <find_volume+0x1f2>
 800622a:	2301      	movs	r3, #1
 800622c:	e256      	b.n	80066dc <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800622e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <find_volume+0x1fe>
 8006236:	230d      	movs	r3, #13
 8006238:	e250      	b.n	80066dc <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	7b1b      	ldrb	r3, [r3, #12]
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	b21a      	sxth	r2, r3
 8006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006244:	7adb      	ldrb	r3, [r3, #11]
 8006246:	b21b      	sxth	r3, r3
 8006248:	4313      	orrs	r3, r2
 800624a:	b21a      	sxth	r2, r3
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006252:	330a      	adds	r3, #10
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b21b      	sxth	r3, r3
 8006258:	429a      	cmp	r2, r3
 800625a:	d001      	beq.n	8006260 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 800625c:	230d      	movs	r3, #13
 800625e:	e23d      	b.n	80066dc <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	7ddb      	ldrb	r3, [r3, #23]
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	b21a      	sxth	r2, r3
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	7d9b      	ldrb	r3, [r3, #22]
 800626c:	b21b      	sxth	r3, r3
 800626e:	4313      	orrs	r3, r2
 8006270:	b21b      	sxth	r3, r3
 8006272:	b29b      	uxth	r3, r3
 8006274:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006278:	2b00      	cmp	r3, #0
 800627a:	d112      	bne.n	80062a2 <find_volume+0x266>
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006282:	061a      	lsls	r2, r3, #24
 8006284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006286:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800628a:	041b      	lsls	r3, r3, #16
 800628c:	4313      	orrs	r3, r2
 800628e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006290:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006294:	0212      	lsls	r2, r2, #8
 8006296:	4313      	orrs	r3, r2
 8006298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800629a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800629e:	4313      	orrs	r3, r2
 80062a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a8:	3318      	adds	r3, #24
 80062aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062ac:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	7c1a      	ldrb	r2, [r3, #16]
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b8:	3303      	adds	r3, #3
 80062ba:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c2:	3303      	adds	r3, #3
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d008      	beq.n	80062dc <find_volume+0x2a0>
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d0:	3303      	adds	r3, #3
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d001      	beq.n	80062dc <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80062d8:	230d      	movs	r3, #13
 80062da:	e1ff      	b.n	80066dc <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e2:	3303      	adds	r3, #3
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ea:	fb02 f303 	mul.w	r3, r2, r3
 80062ee:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80062f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f2:	7b5a      	ldrb	r2, [r3, #13]
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062fa:	3302      	adds	r3, #2
 80062fc:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006304:	3302      	adds	r3, #2
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00e      	beq.n	800632a <find_volume+0x2ee>
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006312:	3302      	adds	r3, #2
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800631e:	3302      	adds	r3, #2
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	3b01      	subs	r3, #1
 8006324:	4013      	ands	r3, r2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800632a:	230d      	movs	r3, #13
 800632c:	e1d6      	b.n	80066dc <find_volume+0x6a0>
 800632e:	bf00      	nop
 8006330:	200000ac 	.word	0x200000ac

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	7c9b      	ldrb	r3, [r3, #18]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	b21a      	sxth	r2, r3
 800633c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633e:	7c5b      	ldrb	r3, [r3, #17]
 8006340:	b21b      	sxth	r3, r3
 8006342:	4313      	orrs	r3, r2
 8006344:	b21b      	sxth	r3, r3
 8006346:	b29a      	uxth	r2, r3
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800634e:	3308      	adds	r3, #8
 8006350:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006358:	3308      	adds	r3, #8
 800635a:	881a      	ldrh	r2, [r3, #0]
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006362:	330a      	adds	r3, #10
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	b29b      	uxth	r3, r3
 800636a:	fbb2 f1f3 	udiv	r1, r2, r3
 800636e:	fb03 f301 	mul.w	r3, r3, r1
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800637a:	230d      	movs	r3, #13
 800637c:	e1ae      	b.n	80066dc <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	7d1b      	ldrb	r3, [r3, #20]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	b21a      	sxth	r2, r3
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	7cdb      	ldrb	r3, [r3, #19]
 800638a:	b21b      	sxth	r3, r3
 800638c:	4313      	orrs	r3, r2
 800638e:	b21b      	sxth	r3, r3
 8006390:	b29b      	uxth	r3, r3
 8006392:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006396:	2b00      	cmp	r3, #0
 8006398:	d112      	bne.n	80063c0 <find_volume+0x384>
 800639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80063a0:	061a      	lsls	r2, r3, #24
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80063a8:	041b      	lsls	r3, r3, #16
 80063aa:	4313      	orrs	r3, r2
 80063ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ae:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80063b2:	0212      	lsls	r2, r2, #8
 80063b4:	4313      	orrs	r3, r2
 80063b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80063bc:	4313      	orrs	r3, r2
 80063be:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	7bdb      	ldrb	r3, [r3, #15]
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	b21a      	sxth	r2, r3
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	7b9b      	ldrb	r3, [r3, #14]
 80063cc:	b21b      	sxth	r3, r3
 80063ce:	4313      	orrs	r3, r2
 80063d0:	b21b      	sxth	r3, r3
 80063d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80063d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <find_volume+0x3a2>
 80063da:	230d      	movs	r3, #13
 80063dc:	e17e      	b.n	80066dc <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80063de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80063e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e2:	441a      	add	r2, r3
 80063e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ea:	3308      	adds	r3, #8
 80063ec:	8819      	ldrh	r1, [r3, #0]
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063f4:	330a      	adds	r3, #10
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	095b      	lsrs	r3, r3, #5
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006400:	b29b      	uxth	r3, r3
 8006402:	4413      	add	r3, r2
 8006404:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	429a      	cmp	r2, r3
 800640c:	d201      	bcs.n	8006412 <find_volume+0x3d6>
 800640e:	230d      	movs	r3, #13
 8006410:	e164      	b.n	80066dc <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	1ad2      	subs	r2, r2, r3
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800641e:	3302      	adds	r3, #2
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	fbb2 f3f3 	udiv	r3, r2, r3
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <find_volume+0x3f6>
 800642e:	230d      	movs	r3, #13
 8006430:	e154      	b.n	80066dc <find_volume+0x6a0>
	fmt = FS_FAT12;
 8006432:	2301      	movs	r3, #1
 8006434:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800643e:	4293      	cmp	r3, r2
 8006440:	d902      	bls.n	8006448 <find_volume+0x40c>
 8006442:	2302      	movs	r3, #2
 8006444:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800644e:	4293      	cmp	r3, r2
 8006450:	d902      	bls.n	8006458 <find_volume+0x41c>
 8006452:	2303      	movs	r3, #3
 8006454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	1c9a      	adds	r2, r3, #2
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006462:	3314      	adds	r3, #20
 8006464:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800646c:	331c      	adds	r3, #28
 800646e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006470:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006472:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006476:	441a      	add	r2, r3
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800647e:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8006480:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006484:	441a      	add	r2, r3
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800648c:	3308      	adds	r3, #8
 800648e:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8006490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006494:	2b03      	cmp	r3, #3
 8006496:	d127      	bne.n	80064e8 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649e:	3308      	adds	r3, #8
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <find_volume+0x46e>
 80064a6:	230d      	movs	r3, #13
 80064a8:	e118      	b.n	80066dc <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064b0:	061a      	lsls	r2, r3, #24
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80064b8:	041b      	lsls	r3, r3, #16
 80064ba:	4313      	orrs	r3, r2
 80064bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064be:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80064c2:	0212      	lsls	r2, r2, #8
 80064c4:	4313      	orrs	r3, r2
 80064c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064c8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80064cc:	431a      	orrs	r2, r3
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80064d4:	3304      	adds	r3, #4
 80064d6:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80064d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064de:	3314      	adds	r3, #20
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	647b      	str	r3, [r7, #68]	; 0x44
 80064e6:	e030      	b.n	800654a <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80064e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ee:	3308      	adds	r3, #8
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <find_volume+0x4be>
 80064f6:	230d      	movs	r3, #13
 80064f8:	e0f0      	b.n	80066dc <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006504:	441a      	add	r2, r3
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800650c:	3304      	adds	r3, #4
 800650e:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006514:	2b02      	cmp	r3, #2
 8006516:	d106      	bne.n	8006526 <find_volume+0x4ea>
 8006518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800651e:	3314      	adds	r3, #20
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	e010      	b.n	8006548 <find_volume+0x50c>
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652c:	3314      	adds	r3, #20
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	4613      	mov	r3, r2
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	4413      	add	r3, r2
 8006536:	085a      	lsrs	r2, r3, #1
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800653e:	3314      	adds	r3, #20
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006548:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006550:	3318      	adds	r3, #24
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800655a:	330a      	adds	r3, #10
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	4619      	mov	r1, r3
 8006560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006562:	440b      	add	r3, r1
 8006564:	1e59      	subs	r1, r3, #1
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656c:	330a      	adds	r3, #10
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	fbb1 f3f3 	udiv	r3, r1, r3
 8006574:	429a      	cmp	r2, r3
 8006576:	d201      	bcs.n	800657c <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8006578:	230d      	movs	r3, #13
 800657a:	e0af      	b.n	80066dc <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006582:	3310      	adds	r3, #16
 8006584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006590:	3310      	adds	r3, #16
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659a:	330c      	adds	r3, #12
 800659c:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a4:	3305      	adds	r3, #5
 80065a6:	2280      	movs	r2, #128	; 0x80
 80065a8:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80065aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d17d      	bne.n	80066ae <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	b21a      	sxth	r2, r3
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065c2:	b21b      	sxth	r3, r3
 80065c4:	4313      	orrs	r3, r2
 80065c6:	b21b      	sxth	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d170      	bne.n	80066ae <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 80065cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ce:	3301      	adds	r3, #1
 80065d0:	4619      	mov	r1, r3
 80065d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065d4:	f7fd fd54 	bl	8004080 <move_window>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d167      	bne.n	80066ae <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e4:	3305      	adds	r3, #5
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	b21a      	sxth	r2, r3
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80065fa:	b21b      	sxth	r3, r3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b21b      	sxth	r3, r3
 8006600:	4a38      	ldr	r2, [pc, #224]	; (80066e4 <find_volume+0x6a8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d153      	bne.n	80066ae <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	78db      	ldrb	r3, [r3, #3]
 800660a:	061a      	lsls	r2, r3, #24
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	789b      	ldrb	r3, [r3, #2]
 8006610:	041b      	lsls	r3, r3, #16
 8006612:	4313      	orrs	r3, r2
 8006614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006616:	7852      	ldrb	r2, [r2, #1]
 8006618:	0212      	lsls	r2, r2, #8
 800661a:	4313      	orrs	r3, r2
 800661c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800661e:	7812      	ldrb	r2, [r2, #0]
 8006620:	4313      	orrs	r3, r2
 8006622:	4a31      	ldr	r2, [pc, #196]	; (80066e8 <find_volume+0x6ac>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d142      	bne.n	80066ae <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800662e:	061a      	lsls	r2, r3, #24
 8006630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006632:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006636:	041b      	lsls	r3, r3, #16
 8006638:	4313      	orrs	r3, r2
 800663a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800663c:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006640:	0212      	lsls	r2, r2, #8
 8006642:	4313      	orrs	r3, r2
 8006644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006646:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800664a:	4313      	orrs	r3, r2
 800664c:	4a27      	ldr	r2, [pc, #156]	; (80066ec <find_volume+0x6b0>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d12d      	bne.n	80066ae <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006654:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006658:	061a      	lsls	r2, r3, #24
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	4313      	orrs	r3, r2
 8006664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006666:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800666a:	0212      	lsls	r2, r2, #8
 800666c:	4313      	orrs	r3, r2
 800666e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006670:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006674:	431a      	orrs	r2, r3
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800667c:	3310      	adds	r3, #16
 800667e:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006682:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006686:	061a      	lsls	r2, r3, #24
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	4313      	orrs	r3, r2
 8006692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006694:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006698:	0212      	lsls	r2, r2, #8
 800669a:	4313      	orrs	r3, r2
 800669c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800669e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80066a2:	431a      	orrs	r2, r3
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066aa:	330c      	adds	r3, #12
 80066ac:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80066ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80066b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80066ba:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <find_volume+0x6b4>)
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	3301      	adds	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <find_volume+0x6b4>)
 80066c4:	801a      	strh	r2, [r3, #0]
 80066c6:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <find_volume+0x6b4>)
 80066c8:	881a      	ldrh	r2, [r3, #0]
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d0:	3306      	adds	r3, #6
 80066d2:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80066d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066d6:	f7fd fc4f 	bl	8003f78 <clear_lock>
#endif

	return FR_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3758      	adds	r7, #88	; 0x58
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	ffffaa55 	.word	0xffffaa55
 80066e8:	41615252 	.word	0x41615252
 80066ec:	61417272 	.word	0x61417272
 80066f0:	200000b0 	.word	0x200000b0

080066f4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d02d      	beq.n	8006762 <validate+0x6e>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d027      	beq.n	8006762 <validate+0x6e>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01e      	beq.n	8006762 <validate+0x6e>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006730:	3306      	adds	r3, #6
 8006732:	881a      	ldrh	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800673a:	3304      	adds	r3, #4
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d10f      	bne.n	8006762 <validate+0x6e>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674e:	3301      	adds	r3, #1
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f7fd f960 	bl	8003a18 <disk_status>
 8006758:	4603      	mov	r3, r0
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <validate+0x72>
		return FR_INVALID_OBJECT;
 8006762:	2309      	movs	r3, #9
 8006764:	e000      	b.n	8006768 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	4613      	mov	r3, r2
 800677c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006782:	f107 0310 	add.w	r3, r7, #16
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fba7 	bl	8005eda <get_ldnumber>
 800678c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	2b00      	cmp	r3, #0
 8006792:	da01      	bge.n	8006798 <f_mount+0x28>
 8006794:	230b      	movs	r3, #11
 8006796:	e02f      	b.n	80067f8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006798:	4a19      	ldr	r2, [pc, #100]	; (8006800 <f_mount+0x90>)
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d007      	beq.n	80067b8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80067a8:	69b8      	ldr	r0, [r7, #24]
 80067aa:	f7fd fbe5 	bl	8003f78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b4:	2200      	movs	r2, #0
 80067b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	490d      	ldr	r1, [pc, #52]	; (8006800 <f_mount+0x90>)
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <f_mount+0x6e>
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d001      	beq.n	80067e2 <f_mount+0x72>
 80067de:	2300      	movs	r3, #0
 80067e0:	e00a      	b.n	80067f8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80067e2:	f107 0108 	add.w	r1, r7, #8
 80067e6:	f107 030c 	add.w	r3, r7, #12
 80067ea:	2200      	movs	r2, #0
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff fc25 	bl	800603c <find_volume>
 80067f2:	4603      	mov	r3, r0
 80067f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	200000ac 	.word	0x200000ac

08006804 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	f107 0318 	add.w	r3, r7, #24
 8006812:	3b0c      	subs	r3, #12
 8006814:	6018      	str	r0, [r3, #0]
 8006816:	f107 0318 	add.w	r3, r7, #24
 800681a:	3b10      	subs	r3, #16
 800681c:	6019      	str	r1, [r3, #0]
 800681e:	f107 0318 	add.w	r3, r7, #24
 8006822:	3b11      	subs	r3, #17
 8006824:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006826:	f107 0318 	add.w	r3, r7, #24
 800682a:	3b0c      	subs	r3, #12
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <f_open+0x32>
 8006832:	2309      	movs	r3, #9
 8006834:	e319      	b.n	8006e6a <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 8006836:	f107 0318 	add.w	r3, r7, #24
 800683a:	3b0c      	subs	r3, #12
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006846:	f107 0318 	add.w	r3, r7, #24
 800684a:	3b11      	subs	r3, #17
 800684c:	f107 0218 	add.w	r2, r7, #24
 8006850:	3a11      	subs	r2, #17
 8006852:	7812      	ldrb	r2, [r2, #0]
 8006854:	f002 021f 	and.w	r2, r2, #31
 8006858:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800685a:	f107 0318 	add.w	r3, r7, #24
 800685e:	3b11      	subs	r3, #17
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f023 0301 	bic.w	r3, r3, #1
 8006866:	b2da      	uxtb	r2, r3
 8006868:	f107 0118 	add.w	r1, r7, #24
 800686c:	3910      	subs	r1, #16
 800686e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006872:	3b18      	subs	r3, #24
 8006874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fbdf 	bl	800603c <find_volume>
 800687e:	4603      	mov	r3, r0
 8006880:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006884:	f102 0217 	add.w	r2, r2, #23
 8006888:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800688a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800688e:	f103 0317 	add.w	r3, r3, #23
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f040 82e3 	bne.w	8006e60 <f_open+0x65c>
		INIT_BUF(dj);
 800689a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800689e:	3b18      	subs	r3, #24
 80068a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a4:	3318      	adds	r3, #24
 80068a6:	f107 0218 	add.w	r2, r7, #24
 80068aa:	3a04      	subs	r2, #4
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068b2:	3b18      	subs	r3, #24
 80068b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80068b8:	4ad1      	ldr	r2, [pc, #836]	; (8006c00 <f_open+0x3fc>)
 80068ba:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 80068bc:	f107 0318 	add.w	r3, r7, #24
 80068c0:	3b10      	subs	r3, #16
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068c8:	3b18      	subs	r3, #24
 80068ca:	4611      	mov	r1, r2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff fa8b 	bl	8005de8 <follow_path>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80068d8:	f102 0217 	add.w	r2, r2, #23
 80068dc:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80068de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068e2:	3b18      	subs	r3, #24
 80068e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e8:	3314      	adds	r3, #20
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80068f0:	f102 0210 	add.w	r2, r2, #16
 80068f4:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80068f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80068fa:	f103 0317 	add.w	r3, r3, #23
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d126      	bne.n	8006952 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 8006904:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006908:	f103 0310 	add.w	r3, r3, #16
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <f_open+0x11c>
				res = FR_INVALID_NAME;
 8006912:	2306      	movs	r3, #6
 8006914:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006918:	f102 0217 	add.w	r2, r2, #23
 800691c:	7013      	strb	r3, [r2, #0]
 800691e:	e018      	b.n	8006952 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006920:	f107 0318 	add.w	r3, r7, #24
 8006924:	3b11      	subs	r3, #17
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	bf14      	ite	ne
 8006930:	2301      	movne	r3, #1
 8006932:	2300      	moveq	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	461a      	mov	r2, r3
 8006938:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800693c:	3b18      	subs	r3, #24
 800693e:	4611      	mov	r1, r2
 8006940:	4618      	mov	r0, r3
 8006942:	f7fd f97f 	bl	8003c44 <chk_lock>
 8006946:	4603      	mov	r3, r0
 8006948:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800694c:	f102 0217 	add.w	r2, r2, #23
 8006950:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006952:	f107 0318 	add.w	r3, r7, #24
 8006956:	3b11      	subs	r3, #17
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	f003 031c 	and.w	r3, r3, #28
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8150 	beq.w	8006c04 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 8006964:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006968:	f103 0317 	add.w	r3, r3, #23
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d030      	beq.n	80069d4 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006972:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006976:	f103 0317 	add.w	r3, r3, #23
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b04      	cmp	r3, #4
 800697e:	d112      	bne.n	80069a6 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006980:	f7fd f9d2 	bl	8003d28 <enq_lock>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <f_open+0x196>
 800698a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800698e:	3b18      	subs	r3, #24
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe fec7 	bl	8005724 <dir_register>
 8006996:	4603      	mov	r3, r0
 8006998:	e000      	b.n	800699c <f_open+0x198>
 800699a:	2312      	movs	r3, #18
 800699c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80069a0:	f102 0217 	add.w	r2, r2, #23
 80069a4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80069a6:	f107 0318 	add.w	r3, r7, #24
 80069aa:	3b11      	subs	r3, #17
 80069ac:	f107 0218 	add.w	r2, r7, #24
 80069b0:	3a11      	subs	r2, #17
 80069b2:	7812      	ldrb	r2, [r2, #0]
 80069b4:	f042 0208 	orr.w	r2, r2, #8
 80069b8:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80069ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069be:	3b18      	subs	r3, #24
 80069c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c4:	3314      	adds	r3, #20
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80069cc:	f102 0210 	add.w	r2, r2, #16
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	e01f      	b.n	8006a14 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80069d4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80069d8:	f103 0310 	add.w	r3, r3, #16
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	330b      	adds	r3, #11
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	f003 0311 	and.w	r3, r3, #17
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d006      	beq.n	80069f8 <f_open+0x1f4>
					res = FR_DENIED;
 80069ea:	2307      	movs	r3, #7
 80069ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80069f0:	f102 0217 	add.w	r2, r2, #23
 80069f4:	7013      	strb	r3, [r2, #0]
 80069f6:	e00d      	b.n	8006a14 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80069f8:	f107 0318 	add.w	r3, r7, #24
 80069fc:	3b11      	subs	r3, #17
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <f_open+0x210>
						res = FR_EXIST;
 8006a08:	2308      	movs	r3, #8
 8006a0a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006a0e:	f102 0217 	add.w	r2, r2, #23
 8006a12:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006a14:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a18:	f103 0317 	add.w	r3, r3, #23
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f040 8122 	bne.w	8006c68 <f_open+0x464>
 8006a24:	f107 0318 	add.w	r3, r7, #24
 8006a28:	3b11      	subs	r3, #17
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 8119 	beq.w	8006c68 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 8006a36:	f7fc ff93 	bl	8003960 <get_fattime>
 8006a3a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a3e:	f103 030c 	add.w	r3, r3, #12
 8006a42:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006a44:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a48:	f103 0310 	add.w	r3, r3, #16
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	330e      	adds	r3, #14
 8006a50:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006a54:	f102 020c 	add.w	r2, r2, #12
 8006a58:	6812      	ldr	r2, [r2, #0]
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a62:	f103 030c 	add.w	r3, r3, #12
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a72:	f103 0310 	add.w	r3, r3, #16
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	330f      	adds	r3, #15
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a82:	f103 030c 	add.w	r3, r3, #12
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	0c1a      	lsrs	r2, r3, #16
 8006a8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a8e:	f103 0310 	add.w	r3, r3, #16
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3310      	adds	r3, #16
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a9e:	f103 030c 	add.w	r3, r3, #12
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	0e1a      	lsrs	r2, r3, #24
 8006aa6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006aaa:	f103 0310 	add.w	r3, r3, #16
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3311      	adds	r3, #17
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006ab6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006aba:	f103 0310 	add.w	r3, r3, #16
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	330b      	adds	r3, #11
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006ac6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006aca:	f103 0310 	add.w	r3, r3, #16
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	331c      	adds	r3, #28
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006ada:	f103 0310 	add.w	r3, r3, #16
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	331d      	adds	r3, #29
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006aea:	f103 0310 	add.w	r3, r3, #16
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	331e      	adds	r3, #30
 8006af2:	2200      	movs	r2, #0
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006afa:	f103 0310 	add.w	r3, r3, #16
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	331f      	adds	r3, #31
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006b06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b0a:	3b18      	subs	r3, #24
 8006b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006b16:	f102 0210 	add.w	r2, r2, #16
 8006b1a:	6811      	ldr	r1, [r2, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe fa28 	bl	8004f72 <ld_clust>
 8006b22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b26:	f103 0308 	add.w	r3, r3, #8
 8006b2a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b32:	f103 0310 	add.w	r3, r3, #16
 8006b36:	6818      	ldr	r0, [r3, #0]
 8006b38:	f7fe fa49 	bl	8004fce <st_clust>
				dj.fs->wflag = 1;
 8006b3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b40:	3b18      	subs	r3, #24
 8006b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	2201      	movs	r2, #1
 8006b50:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 8006b52:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006b56:	f103 0308 	add.w	r3, r3, #8
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8083 	beq.w	8006c68 <f_open+0x464>
					dw = dj.fs->winsect;
 8006b62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b66:	3b18      	subs	r3, #24
 8006b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006b72:	330c      	adds	r3, #12
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006b7a:	f102 020c 	add.w	r2, r2, #12
 8006b7e:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8006b80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b84:	3b18      	subs	r3, #24
 8006b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006b90:	f102 0208 	add.w	r2, r2, #8
 8006b94:	6811      	ldr	r1, [r2, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fd fe01 	bl	800479e <remove_chain>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006ba2:	f102 0217 	add.w	r2, r2, #23
 8006ba6:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8006ba8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006bac:	f103 0317 	add.w	r3, r3, #23
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d158      	bne.n	8006c68 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006bb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006bba:	3b18      	subs	r3, #24
 8006bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006bc6:	f102 0208 	add.w	r2, r2, #8
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	3a01      	subs	r2, #1
 8006bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 8006bd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006bda:	3b18      	subs	r3, #24
 8006bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006be6:	f102 020c 	add.w	r2, r2, #12
 8006bea:	6811      	ldr	r1, [r2, #0]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fd fa47 	bl	8004080 <move_window>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006bf8:	f102 0217 	add.w	r2, r2, #23
 8006bfc:	7013      	strb	r3, [r2, #0]
 8006bfe:	e033      	b.n	8006c68 <f_open+0x464>
 8006c00:	200000cc 	.word	0x200000cc
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006c04:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c08:	f103 0317 	add.w	r3, r3, #23
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d12a      	bne.n	8006c68 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006c12:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c16:	f103 0310 	add.w	r3, r3, #16
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330b      	adds	r3, #11
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	f003 0310 	and.w	r3, r3, #16
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d006      	beq.n	8006c36 <f_open+0x432>
					res = FR_NO_FILE;
 8006c28:	2304      	movs	r3, #4
 8006c2a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006c2e:	f102 0217 	add.w	r2, r2, #23
 8006c32:	7013      	strb	r3, [r2, #0]
 8006c34:	e018      	b.n	8006c68 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006c36:	f107 0318 	add.w	r3, r7, #24
 8006c3a:	3b11      	subs	r3, #17
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d010      	beq.n	8006c68 <f_open+0x464>
 8006c46:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c4a:	f103 0310 	add.w	r3, r3, #16
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	330b      	adds	r3, #11
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <f_open+0x464>
						res = FR_DENIED;
 8006c5c:	2307      	movs	r3, #7
 8006c5e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006c62:	f102 0217 	add.w	r2, r2, #23
 8006c66:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006c68:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006c6c:	f103 0317 	add.w	r3, r3, #23
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d15b      	bne.n	8006d2e <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006c76:	f107 0318 	add.w	r3, r7, #24
 8006c7a:	3b11      	subs	r3, #17
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <f_open+0x496>
				mode |= FA__WRITTEN;
 8006c86:	f107 0318 	add.w	r3, r7, #24
 8006c8a:	3b11      	subs	r3, #17
 8006c8c:	f107 0218 	add.w	r2, r7, #24
 8006c90:	3a11      	subs	r2, #17
 8006c92:	7812      	ldrb	r2, [r2, #0]
 8006c94:	f042 0220 	orr.w	r2, r2, #32
 8006c98:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006c9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c9e:	3b18      	subs	r3, #24
 8006ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006caa:	330c      	adds	r3, #12
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	f107 0318 	add.w	r3, r7, #24
 8006cb2:	3b0c      	subs	r3, #12
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cba:	331c      	adds	r3, #28
 8006cbc:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 8006cbe:	f107 0318 	add.w	r3, r7, #24
 8006cc2:	3b0c      	subs	r3, #12
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006cca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006cce:	f102 0210 	add.w	r2, r2, #16
 8006cd2:	6812      	ldr	r2, [r2, #0]
 8006cd4:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006cd6:	f107 0318 	add.w	r3, r7, #24
 8006cda:	3b11      	subs	r3, #17
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	bf14      	ite	ne
 8006ce6:	2301      	movne	r3, #1
 8006ce8:	2300      	moveq	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006cf2:	3b18      	subs	r3, #24
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fd f83a 	bl	8003d70 <inc_lock>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	f107 0318 	add.w	r3, r7, #24
 8006d02:	3b0c      	subs	r3, #12
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 8006d0e:	f107 0318 	add.w	r3, r7, #24
 8006d12:	3b0c      	subs	r3, #12
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d105      	bne.n	8006d2e <f_open+0x52a>
 8006d22:	2302      	movs	r3, #2
 8006d24:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d28:	f102 0217 	add.w	r2, r2, #23
 8006d2c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006d2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d32:	f103 0317 	add.w	r3, r3, #23
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f040 8091 	bne.w	8006e60 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 8006d3e:	f107 0318 	add.w	r3, r7, #24
 8006d42:	3b0c      	subs	r3, #12
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d4a:	3306      	adds	r3, #6
 8006d4c:	f107 0218 	add.w	r2, r7, #24
 8006d50:	3a11      	subs	r2, #17
 8006d52:	7812      	ldrb	r2, [r2, #0]
 8006d54:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 8006d56:	f107 0318 	add.w	r3, r7, #24
 8006d5a:	3b0c      	subs	r3, #12
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d62:	3307      	adds	r3, #7
 8006d64:	2200      	movs	r2, #0
 8006d66:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006d68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d6c:	3b18      	subs	r3, #24
 8006d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d78:	f102 0210 	add.w	r2, r2, #16
 8006d7c:	6811      	ldr	r1, [r2, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe f8f7 	bl	8004f72 <ld_clust>
 8006d84:	4602      	mov	r2, r0
 8006d86:	f107 0318 	add.w	r3, r7, #24
 8006d8a:	3b0c      	subs	r3, #12
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d92:	3310      	adds	r3, #16
 8006d94:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006d96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006d9a:	f103 0310 	add.w	r3, r3, #16
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	331f      	adds	r3, #31
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	061a      	lsls	r2, r3, #24
 8006da6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006daa:	f103 0310 	add.w	r3, r3, #16
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	331e      	adds	r3, #30
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	041b      	lsls	r3, r3, #16
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006dbc:	f102 0210 	add.w	r2, r2, #16
 8006dc0:	6812      	ldr	r2, [r2, #0]
 8006dc2:	321d      	adds	r2, #29
 8006dc4:	7812      	ldrb	r2, [r2, #0]
 8006dc6:	0212      	lsls	r2, r2, #8
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006dce:	f102 0210 	add.w	r2, r2, #16
 8006dd2:	6812      	ldr	r2, [r2, #0]
 8006dd4:	321c      	adds	r2, #28
 8006dd6:	7812      	ldrb	r2, [r2, #0]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	f107 0318 	add.w	r3, r7, #24
 8006dde:	3b0c      	subs	r3, #12
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de6:	330c      	adds	r3, #12
 8006de8:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 8006dea:	f107 0318 	add.w	r3, r7, #24
 8006dee:	3b0c      	subs	r3, #12
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df6:	3308      	adds	r3, #8
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 8006dfc:	f107 0318 	add.w	r3, r7, #24
 8006e00:	3b0c      	subs	r3, #12
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e08:	3318      	adds	r3, #24
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006e0e:	f107 0318 	add.w	r3, r7, #24
 8006e12:	3b0c      	subs	r3, #12
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006e20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006e24:	3b18      	subs	r3, #24
 8006e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	f107 0318 	add.w	r3, r7, #24
 8006e30:	3b0c      	subs	r3, #12
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e38:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8006e3a:	f107 0318 	add.w	r3, r7, #24
 8006e3e:	3b0c      	subs	r3, #12
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e4c:	3306      	adds	r3, #6
 8006e4e:	881a      	ldrh	r2, [r3, #0]
 8006e50:	f107 0318 	add.w	r3, r7, #24
 8006e54:	3b0c      	subs	r3, #12
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006e60:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006e64:	f103 0317 	add.w	r3, r3, #23
 8006e68:	781b      	ldrb	r3, [r3, #0]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop

08006e78 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08c      	sub	sp, #48	; 0x30
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f7ff fc2f 	bl	80066f4 <validate>
 8006e96:	4603      	mov	r3, r0
 8006e98:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006e9a:	7ffb      	ldrb	r3, [r7, #31]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <f_read+0x2c>
 8006ea0:	7ffb      	ldrb	r3, [r7, #31]
 8006ea2:	e1fb      	b.n	800729c <f_read+0x424>
	if (fp->err)								/* Check error */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eaa:	3307      	adds	r3, #7
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d005      	beq.n	8006ebe <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb8:	3307      	adds	r3, #7
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	e1ee      	b.n	800729c <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec4:	3306      	adds	r3, #6
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006ed0:	2307      	movs	r3, #7
 8006ed2:	e1e3      	b.n	800729c <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eda:	330c      	adds	r3, #12
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	f240 81ce 	bls.w	8007292 <f_read+0x41a>
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006efa:	e1ca      	b.n	8007292 <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f02:	3308      	adds	r3, #8
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f12:	330a      	adds	r3, #10
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f1a:	fb03 f301 	mul.w	r3, r3, r1
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f040 8160 	bne.w	80071e6 <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3c:	330a      	adds	r3, #10
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f52:	3302      	adds	r3, #2
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d14a      	bne.n	8006ffa <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f78:	3310      	adds	r3, #16
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f7e:	e01f      	b.n	8006fc0 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006f86:	3304      	adds	r3, #4
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f94:	3308      	adds	r3, #8
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7fd fd18 	bl	80049d0 <clmt_clust>
 8006fa0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006fa2:	e00d      	b.n	8006fc0 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb2:	3314      	adds	r3, #20
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f7fd f98b 	bl	80042d4 <get_fat>
 8006fbe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d807      	bhi.n	8006fd6 <f_read+0x15e>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fcc:	3307      	adds	r3, #7
 8006fce:	2202      	movs	r2, #2
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e162      	b.n	800729c <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fdc:	d107      	bne.n	8006fee <f_read+0x176>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe4:	3307      	adds	r3, #7
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	2301      	movs	r3, #1
 8006fec:	e156      	b.n	800729c <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff4:	3314      	adds	r3, #20
 8006ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff8:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007008:	3314      	adds	r3, #20
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4619      	mov	r1, r3
 800700e:	4610      	mov	r0, r2
 8007010:	f7fd f939 	bl	8004286 <clust2sect>
 8007014:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d107      	bne.n	800702c <f_read+0x1b4>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007022:	3307      	adds	r3, #7
 8007024:	2202      	movs	r2, #2
 8007026:	701a      	strb	r2, [r3, #0]
 8007028:	2302      	movs	r3, #2
 800702a:	e137      	b.n	800729c <f_read+0x424>
			sect += csect;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4413      	add	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007040:	330a      	adds	r3, #10
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	fbb3 f3f2 	udiv	r3, r3, r2
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	2b00      	cmp	r3, #0
 8007052:	d070      	beq.n	8007136 <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007054:	7dfa      	ldrb	r2, [r7, #23]
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	441a      	add	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007066:	3302      	adds	r3, #2
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d90b      	bls.n	8007086 <f_read+0x20e>
					cc = fp->fs->csize - csect;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800707a:	3302      	adds	r3, #2
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007092:	3301      	adds	r3, #1
 8007094:	7818      	ldrb	r0, [r3, #0]
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	6a39      	ldr	r1, [r7, #32]
 800709c:	f7fc fcfc 	bl	8003a98 <disk_read>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ac:	3307      	adds	r3, #7
 80070ae:	2201      	movs	r2, #1
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	2301      	movs	r3, #1
 80070b4:	e0f2      	b.n	800729c <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070bc:	3306      	adds	r3, #6
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d028      	beq.n	800711a <f_read+0x2a2>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ce:	3318      	adds	r3, #24
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d8:	429a      	cmp	r2, r3
 80070da:	d91e      	bls.n	800711a <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e2:	3318      	adds	r3, #24
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad2      	subs	r2, r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f6:	330a      	adds	r3, #10
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	fb03 f302 	mul.w	r3, r3, r2
 80070fe:	6a3a      	ldr	r2, [r7, #32]
 8007100:	18d0      	adds	r0, r2, r3
 8007102:	68f9      	ldr	r1, [r7, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007110:	330a      	adds	r3, #10
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	f7fc fd1d 	bl	8003b54 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007126:	330a      	adds	r3, #10
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	fb02 f303 	mul.w	r3, r2, r3
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8007134:	e093      	b.n	800725e <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800713c:	3318      	adds	r3, #24
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	429a      	cmp	r2, r3
 8007144:	d049      	beq.n	80071da <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800714c:	3306      	adds	r3, #6
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	2b00      	cmp	r3, #0
 8007156:	d028      	beq.n	80071aa <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007164:	3301      	adds	r3, #1
 8007166:	7818      	ldrb	r0, [r3, #0]
 8007168:	68f9      	ldr	r1, [r7, #12]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007170:	3318      	adds	r3, #24
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	2301      	movs	r3, #1
 8007176:	f7fc fcaf 	bl	8003ad8 <disk_write>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d007      	beq.n	8007190 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007186:	3307      	adds	r3, #7
 8007188:	2201      	movs	r2, #1
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	2301      	movs	r3, #1
 800718e:	e085      	b.n	800729c <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007196:	3306      	adds	r3, #6
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a6:	3306      	adds	r3, #6
 80071a8:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b6:	3301      	adds	r3, #1
 80071b8:	7818      	ldrb	r0, [r3, #0]
 80071ba:	68f9      	ldr	r1, [r7, #12]
 80071bc:	2301      	movs	r3, #1
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	f7fc fc6a 	bl	8003a98 <disk_read>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d0:	3307      	adds	r3, #7
 80071d2:	2201      	movs	r2, #1
 80071d4:	701a      	strb	r2, [r3, #0]
 80071d6:	2301      	movs	r3, #1
 80071d8:	e060      	b.n	800729c <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e0:	3318      	adds	r3, #24
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f2:	330a      	adds	r3, #10
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fe:	3308      	adds	r3, #8
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800720e:	330a      	adds	r3, #10
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	fbb2 f1f3 	udiv	r1, r2, r3
 8007216:	fb03 f301 	mul.w	r3, r3, r1
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	1ac3      	subs	r3, r0, r3
 800721e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8007220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	429a      	cmp	r2, r3
 8007226:	d901      	bls.n	800722c <f_read+0x3b4>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007232:	3308      	adds	r3, #8
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007242:	330a      	adds	r3, #10
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	fbb2 f1f3 	udiv	r1, r2, r3
 800724a:	fb03 f301 	mul.w	r3, r3, r1
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007256:	4619      	mov	r1, r3
 8007258:	6a38      	ldr	r0, [r7, #32]
 800725a:	f7fc fc7b 	bl	8003b54 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800725e:	6a3a      	ldr	r2, [r7, #32]
 8007260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007262:	4413      	add	r3, r2
 8007264:	623b      	str	r3, [r7, #32]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726c:	3308      	adds	r3, #8
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	441a      	add	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800727a:	3308      	adds	r3, #8
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	441a      	add	r2, r3
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	f47f ae31 	bne.w	8006efc <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3730      	adds	r7, #48	; 0x30
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f7ff fa19 	bl	80066f4 <validate>
 80072c2:	4603      	mov	r3, r0
 80072c4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <f_write+0x2c>
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	e258      	b.n	8007782 <f_write+0x4de>
	if (fp->err)							/* Check error */
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d6:	3307      	adds	r3, #7
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d005      	beq.n	80072ea <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e4:	3307      	adds	r3, #7
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	e24b      	b.n	8007782 <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f0:	3306      	adds	r3, #6
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 80072fc:	2307      	movs	r3, #7
 80072fe:	e240      	b.n	8007782 <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007306:	3308      	adds	r3, #8
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	441a      	add	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007314:	3308      	adds	r3, #8
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	f080 8208 	bcs.w	800772e <f_write+0x48a>
 800731e:	2300      	movs	r3, #0
 8007320:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007322:	e204      	b.n	800772e <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800732a:	3308      	adds	r3, #8
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800733a:	330a      	adds	r3, #10
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007342:	fb03 f301 	mul.w	r3, r3, r1
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	f040 818d 	bne.w	8007668 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007354:	3308      	adds	r3, #8
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007364:	330a      	adds	r3, #10
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	fbb2 f3f3 	udiv	r3, r2, r3
 800736c:	b2da      	uxtb	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800737a:	3302      	adds	r3, #2
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	3b01      	subs	r3, #1
 8007380:	b2db      	uxtb	r3, r3
 8007382:	4013      	ands	r3, r2
 8007384:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007386:	7dbb      	ldrb	r3, [r7, #22]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d167      	bne.n	800745c <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007392:	3308      	adds	r3, #8
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d112      	bne.n	80073c0 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a0:	3310      	adds	r3, #16
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d129      	bne.n	8007400 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2100      	movs	r1, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fd fa59 	bl	800486e <create_chain>
 80073bc:	6278      	str	r0, [r7, #36]	; 0x24
 80073be:	e01f      	b.n	8007400 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80073c6:	3304      	adds	r3, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d4:	3308      	adds	r3, #8
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4619      	mov	r1, r3
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7fd faf8 	bl	80049d0 <clmt_clust>
 80073e0:	6278      	str	r0, [r7, #36]	; 0x24
 80073e2:	e00d      	b.n	8007400 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f2:	3314      	adds	r3, #20
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7fd fa38 	bl	800486e <create_chain>
 80073fe:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 8198 	beq.w	8007738 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	2b01      	cmp	r3, #1
 800740c:	d107      	bne.n	800741e <f_write+0x17a>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007414:	3307      	adds	r3, #7
 8007416:	2202      	movs	r2, #2
 8007418:	701a      	strb	r2, [r3, #0]
 800741a:	2302      	movs	r3, #2
 800741c:	e1b1      	b.n	8007782 <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007424:	d107      	bne.n	8007436 <f_write+0x192>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742c:	3307      	adds	r3, #7
 800742e:	2201      	movs	r2, #1
 8007430:	701a      	strb	r2, [r3, #0]
 8007432:	2301      	movs	r3, #1
 8007434:	e1a5      	b.n	8007782 <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743c:	3314      	adds	r3, #20
 800743e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007440:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007448:	3310      	adds	r3, #16
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d105      	bne.n	800745c <f_write+0x1b8>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007456:	3310      	adds	r3, #16
 8007458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800745a:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007462:	3306      	adds	r3, #6
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d028      	beq.n	80074c0 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800747a:	3301      	adds	r3, #1
 800747c:	7818      	ldrb	r0, [r3, #0]
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007486:	3318      	adds	r3, #24
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	2301      	movs	r3, #1
 800748c:	f7fc fb24 	bl	8003ad8 <disk_write>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749c:	3307      	adds	r3, #7
 800749e:	2201      	movs	r2, #1
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	2301      	movs	r3, #1
 80074a4:	e16d      	b.n	8007782 <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ac:	3306      	adds	r3, #6
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074bc:	3306      	adds	r3, #6
 80074be:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ce:	3314      	adds	r3, #20
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	4610      	mov	r0, r2
 80074d6:	f7fc fed6 	bl	8004286 <clust2sect>
 80074da:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d107      	bne.n	80074f2 <f_write+0x24e>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e8:	3307      	adds	r3, #7
 80074ea:	2202      	movs	r2, #2
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	2302      	movs	r3, #2
 80074f0:	e147      	b.n	8007782 <f_write+0x4de>
			sect += csect;
 80074f2:	7dbb      	ldrb	r3, [r7, #22]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4413      	add	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007506:	330a      	adds	r3, #10
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007512:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d074      	beq.n	8007604 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800751a:	7dba      	ldrb	r2, [r7, #22]
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	441a      	add	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752c:	3302      	adds	r3, #2
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d90b      	bls.n	800754c <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007540:	3302      	adds	r3, #2
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	7dbb      	ldrb	r3, [r7, #22]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007558:	3301      	adds	r3, #1
 800755a:	7818      	ldrb	r0, [r3, #0]
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	69b9      	ldr	r1, [r7, #24]
 8007562:	f7fc fab9 	bl	8003ad8 <disk_write>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d007      	beq.n	800757c <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007572:	3307      	adds	r3, #7
 8007574:	2201      	movs	r2, #1
 8007576:	701a      	strb	r2, [r3, #0]
 8007578:	2301      	movs	r3, #1
 800757a:	e102      	b.n	8007782 <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007582:	3318      	adds	r3, #24
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	429a      	cmp	r2, r3
 800758e:	d92b      	bls.n	80075e8 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007598:	3318      	adds	r3, #24
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	1ad2      	subs	r2, r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ac:	330a      	adds	r3, #10
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	fb03 f302 	mul.w	r3, r3, r2
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	18d1      	adds	r1, r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c4:	330a      	adds	r3, #10
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	f7fc fac3 	bl	8003b54 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d4:	3306      	adds	r3, #6
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e4:	3306      	adds	r3, #6
 80075e6:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f4:	330a      	adds	r3, #10
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	fb02 f303 	mul.w	r3, r2, r3
 8007600:	623b      	str	r3, [r7, #32]
				continue;
 8007602:	e07a      	b.n	80076fa <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760a:	3318      	adds	r3, #24
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	429a      	cmp	r2, r3
 8007612:	d023      	beq.n	800765c <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800761a:	3308      	adds	r3, #8
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007624:	330c      	adds	r3, #12
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	429a      	cmp	r2, r3
 800762a:	d217      	bcs.n	800765c <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007638:	3301      	adds	r3, #1
 800763a:	7818      	ldrb	r0, [r3, #0]
 800763c:	68f9      	ldr	r1, [r7, #12]
 800763e:	2301      	movs	r3, #1
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	f7fc fa29 	bl	8003a98 <disk_read>
 8007646:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007652:	3307      	adds	r3, #7
 8007654:	2201      	movs	r2, #1
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	2301      	movs	r3, #1
 800765a:	e092      	b.n	8007782 <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007662:	3318      	adds	r3, #24
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007674:	330a      	adds	r3, #10
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007680:	3308      	adds	r3, #8
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007690:	330a      	adds	r3, #10
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	fbb2 f1f3 	udiv	r1, r2, r3
 8007698:	fb03 f301 	mul.w	r3, r3, r1
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	1ac3      	subs	r3, r0, r3
 80076a0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80076a2:	6a3a      	ldr	r2, [r7, #32]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d901      	bls.n	80076ae <f_write+0x40a>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b4:	3308      	adds	r3, #8
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c4:	330a      	adds	r3, #10
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80076cc:	fb03 f301 	mul.w	r3, r3, r1
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4413      	add	r3, r2
 80076d6:	6a3a      	ldr	r2, [r7, #32]
 80076d8:	69b9      	ldr	r1, [r7, #24]
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fc fa3a 	bl	8003b54 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076e6:	3306      	adds	r3, #6
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f6:	3306      	adds	r3, #6
 80076f8:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	4413      	add	r3, r2
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007708:	3308      	adds	r3, #8
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	441a      	add	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007716:	3308      	adds	r3, #8
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	441a      	add	r2, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	f47f adf7 	bne.w	8007324 <f_write+0x80>
 8007736:	e000      	b.n	800773a <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007738:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007740:	3308      	adds	r3, #8
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800774a:	330c      	adds	r3, #12
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d909      	bls.n	8007766 <f_write+0x4c2>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007758:	3308      	adds	r3, #8
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007762:	330c      	adds	r3, #12
 8007764:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800776c:	3306      	adds	r3, #6
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	f043 0320 	orr.w	r3, r3, #32
 8007774:	b2da      	uxtb	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800777c:	3306      	adds	r3, #6
 800777e:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3728      	adds	r7, #40	; 0x28
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b086      	sub	sp, #24
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7fe ffae 	bl	80066f4 <validate>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f040 80cc 	bne.w	800793c <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077aa:	3306      	adds	r3, #6
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80c2 	beq.w	800793c <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077be:	3306      	adds	r3, #6
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d022      	beq.n	8007810 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d6:	3301      	adds	r3, #1
 80077d8:	7818      	ldrb	r0, [r3, #0]
 80077da:	6879      	ldr	r1, [r7, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e2:	3318      	adds	r3, #24
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	2301      	movs	r3, #1
 80077e8:	f7fc f976 	bl	8003ad8 <disk_write>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80077f2:	2301      	movs	r3, #1
 80077f4:	e0a3      	b.n	800793e <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077fc:	3306      	adds	r3, #6
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007804:	b2da      	uxtb	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800780c:	3306      	adds	r3, #6
 800780e:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781e:	331c      	adds	r3, #28
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4619      	mov	r1, r3
 8007824:	4610      	mov	r0, r2
 8007826:	f7fc fc2b 	bl	8004080 <move_window>
 800782a:	4603      	mov	r3, r0
 800782c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 8083 	bne.w	800793c <f_sync+0x1b2>
				dir = fp->dir_ptr;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	330b      	adds	r3, #11
 8007844:	781a      	ldrb	r2, [r3, #0]
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	330b      	adds	r3, #11
 800784a:	f042 0220 	orr.w	r2, r2, #32
 800784e:	b2d2      	uxtb	r2, r2
 8007850:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007858:	330c      	adds	r3, #12
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	331c      	adds	r3, #28
 8007860:	b2d2      	uxtb	r2, r2
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800786a:	330c      	adds	r3, #12
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	b29b      	uxth	r3, r3
 8007870:	0a1b      	lsrs	r3, r3, #8
 8007872:	b29a      	uxth	r2, r3
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	331d      	adds	r3, #29
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	701a      	strb	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007882:	330c      	adds	r3, #12
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	0c1a      	lsrs	r2, r3, #16
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	331e      	adds	r3, #30
 800788c:	b2d2      	uxtb	r2, r2
 800788e:	701a      	strb	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007896:	330c      	adds	r3, #12
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	0e1a      	lsrs	r2, r3, #24
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	331f      	adds	r3, #31
 80078a0:	b2d2      	uxtb	r2, r2
 80078a2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078aa:	3310      	adds	r3, #16
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6938      	ldr	r0, [r7, #16]
 80078b2:	f7fd fb8c 	bl	8004fce <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80078b6:	f7fc f853 	bl	8003960 <get_fattime>
 80078ba:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	3316      	adds	r3, #22
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	b2d2      	uxtb	r2, r2
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	0a1b      	lsrs	r3, r3, #8
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	3317      	adds	r3, #23
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	0c1a      	lsrs	r2, r3, #16
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	3318      	adds	r3, #24
 80078de:	b2d2      	uxtb	r2, r2
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	0e1a      	lsrs	r2, r3, #24
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	3319      	adds	r3, #25
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	3312      	adds	r3, #18
 80078f2:	2200      	movs	r2, #0
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	3313      	adds	r3, #19
 80078fa:	2200      	movs	r2, #0
 80078fc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007904:	3306      	adds	r3, #6
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	f023 0320 	bic.w	r3, r3, #32
 800790c:	b2da      	uxtb	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007914:	3306      	adds	r3, #6
 8007916:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007924:	3304      	adds	r3, #4
 8007926:	2201      	movs	r2, #1
 8007928:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f7fc fbd8 	bl	80040e8 <sync_fs>
 8007938:	4603      	mov	r3, r0
 800793a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800793c:	7dfb      	ldrb	r3, [r7, #23]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff ff1b 	bl	800778a <f_sync>
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d119      	bne.n	8007992 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7fe fec8 	bl	80066f4 <validate>
 8007964:	4603      	mov	r3, r0
 8007966:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007968:	7bfb      	ldrb	r3, [r7, #15]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d111      	bne.n	8007992 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007974:	3308      	adds	r3, #8
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4618      	mov	r0, r3
 800797a:	f7fc fab9 	bl	8003ef0 <dec_lock>
 800797e:	4603      	mov	r3, r0
 8007980:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007982:	7bfb      	ldrb	r3, [r7, #15]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d104      	bne.n	8007992 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007992:	7bfb      	ldrb	r3, [r7, #15]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b090      	sub	sp, #64	; 0x40
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7fe fea4 	bl	80066f4 <validate>
 80079ac:	4603      	mov	r3, r0
 80079ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80079b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <f_lseek+0x24>
 80079ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079be:	e31d      	b.n	8007ffc <f_lseek+0x660>
	if (fp->err)						/* Check error */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c6:	3307      	adds	r3, #7
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d005      	beq.n	80079da <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d4:	3307      	adds	r3, #7
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	e310      	b.n	8007ffc <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80079e0:	3304      	adds	r3, #4
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 813c 	beq.w	8007c62 <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079f0:	d172      	bne.n	8007ad8 <f_lseek+0x13c>
			tbl = fp->cltbl;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80079f8:	3304      	adds	r3, #4
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	1d1a      	adds	r2, r3, #4
 8007a02:	627a      	str	r2, [r7, #36]	; 0x24
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	2302      	movs	r3, #2
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a12:	3310      	adds	r3, #16
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d049      	beq.n	8007ab2 <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	2300      	movs	r3, #0
 8007a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a28:	3302      	adds	r3, #2
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a32:	3301      	adds	r3, #1
 8007a34:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fc fc47 	bl	80042d4 <get_fat>
 8007a46:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d807      	bhi.n	8007a5e <f_lseek+0xc2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a54:	3307      	adds	r3, #7
 8007a56:	2202      	movs	r2, #2
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e2ce      	b.n	8007ffc <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a64:	d107      	bne.n	8007a76 <f_lseek+0xda>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6c:	3307      	adds	r3, #7
 8007a6e:	2201      	movs	r2, #1
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	2301      	movs	r3, #1
 8007a74:	e2c2      	b.n	8007ffc <f_lseek+0x660>
					} while (cl == pcl + 1);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d0d5      	beq.n	8007a2c <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d809      	bhi.n	8007a9c <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	1d1a      	adds	r2, r3, #4
 8007a8c:	627a      	str	r2, [r7, #36]	; 0x24
 8007a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	1d1a      	adds	r2, r3, #4
 8007a96:	627a      	str	r2, [r7, #36]	; 0x24
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa8:	3314      	adds	r3, #20
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d3b5      	bcc.n	8007a1e <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007ab8:	3304      	adds	r3, #4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007abe:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8007ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d803      	bhi.n	8007ad0 <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	e293      	b.n	8007ff8 <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007ad0:	2311      	movs	r3, #17
 8007ad2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007ad6:	e28f      	b.n	8007ff8 <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ade:	330c      	adds	r3, #12
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d905      	bls.n	8007af4 <f_lseek+0x158>
				ofs = fp->fsize;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aee:	330c      	adds	r3, #12
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007afa:	3308      	adds	r3, #8
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	601a      	str	r2, [r3, #0]
			if (ofs) {
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 8278 	beq.w	8007ff8 <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fc ff5e 	bl	80049d0 <clmt_clust>
 8007b14:	4602      	mov	r2, r0
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b1c:	3314      	adds	r3, #20
 8007b1e:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b2e:	3314      	adds	r3, #20
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4619      	mov	r1, r3
 8007b34:	4610      	mov	r0, r2
 8007b36:	f7fc fba6 	bl	8004286 <clust2sect>
 8007b3a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d107      	bne.n	8007b52 <f_lseek+0x1b6>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b48:	3307      	adds	r3, #7
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	2302      	movs	r3, #2
 8007b50:	e254      	b.n	8007ffc <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	1e5a      	subs	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b62:	330a      	adds	r3, #10
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b76:	3302      	adds	r3, #2
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	4413      	add	r3, r2
 8007b82:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b9a:	330a      	adds	r3, #10
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ba2:	fb03 f301 	mul.w	r3, r3, r1
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 8225 	beq.w	8007ff8 <f_lseek+0x65c>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb4:	3318      	adds	r3, #24
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	f000 821c 	beq.w	8007ff8 <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc6:	3306      	adds	r3, #6
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d028      	beq.n	8007c24 <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bde:	3301      	adds	r3, #1
 8007be0:	7818      	ldrb	r0, [r3, #0]
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bea:	3318      	adds	r3, #24
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f7fb ff72 	bl	8003ad8 <disk_write>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c00:	3307      	adds	r3, #7
 8007c02:	2201      	movs	r2, #1
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	2301      	movs	r3, #1
 8007c08:	e1f8      	b.n	8007ffc <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c10:	3306      	adds	r3, #6
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c20:	3306      	adds	r3, #6
 8007c22:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c30:	3301      	adds	r3, #1
 8007c32:	7818      	ldrb	r0, [r3, #0]
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	2301      	movs	r3, #1
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	f7fb ff2d 	bl	8003a98 <disk_read>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d007      	beq.n	8007c54 <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4a:	3307      	adds	r3, #7
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	2301      	movs	r3, #1
 8007c52:	e1d3      	b.n	8007ffc <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c5a:	3318      	adds	r3, #24
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	e1ca      	b.n	8007ff8 <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c68:	330c      	adds	r3, #12
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d90e      	bls.n	8007c90 <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c78:	3306      	adds	r3, #6
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	f003 0302 	and.w	r3, r3, #2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d105      	bne.n	8007c90 <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c8a:	330c      	adds	r3, #12
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c96:	3308      	adds	r3, #8
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007caa:	601a      	str	r2, [r3, #0]
		if (ofs) {
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 8113 	beq.w	8007eda <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd2:	330a      	adds	r3, #10
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	fb03 f302 	mul.w	r3, r3, r2
 8007cda:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d024      	beq.n	8007d2c <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	1e5a      	subs	r2, r3, #1
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	1e59      	subs	r1, r3, #1
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d318      	bcc.n	8007d2c <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	1e5a      	subs	r2, r3, #1
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	425b      	negs	r3, r3
 8007d02:	401a      	ands	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d14:	3308      	adds	r3, #8
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d24:	3314      	adds	r3, #20
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d2a:	e034      	b.n	8007d96 <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d32:	3310      	adds	r3, #16
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d125      	bne.n	8007d8a <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2100      	movs	r1, #0
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fc fd90 	bl	800486e <create_chain>
 8007d4e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d107      	bne.n	8007d66 <f_lseek+0x3ca>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d5c:	3307      	adds	r3, #7
 8007d5e:	2202      	movs	r2, #2
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	2302      	movs	r3, #2
 8007d64:	e14a      	b.n	8007ffc <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d6c:	d107      	bne.n	8007d7e <f_lseek+0x3e2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d74:	3307      	adds	r3, #7
 8007d76:	2201      	movs	r2, #1
 8007d78:	701a      	strb	r2, [r3, #0]
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e13e      	b.n	8007ffc <f_lseek+0x660>
					fp->sclust = clst;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d84:	3310      	adds	r3, #16
 8007d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d88:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d90:	3314      	adds	r3, #20
 8007d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d94:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 809e 	beq.w	8007eda <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 8007d9e:	e058      	b.n	8007e52 <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da6:	3306      	adds	r3, #6
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00e      	beq.n	8007dd0 <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fc fd56 	bl	800486e <create_chain>
 8007dc2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10b      	bne.n	8007de2 <f_lseek+0x446>
							ofs = bcs; break;
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	603b      	str	r3, [r7, #0]
 8007dce:	e044      	b.n	8007e5a <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fc fa7a 	bl	80042d4 <get_fat>
 8007de0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007de8:	d107      	bne.n	8007dfa <f_lseek+0x45e>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df0:	3307      	adds	r3, #7
 8007df2:	2201      	movs	r2, #1
 8007df4:	701a      	strb	r2, [r3, #0]
 8007df6:	2301      	movs	r3, #1
 8007df8:	e100      	b.n	8007ffc <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d90a      	bls.n	8007e16 <f_lseek+0x47a>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e0c:	3314      	adds	r3, #20
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d307      	bcc.n	8007e26 <f_lseek+0x48a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e1c:	3307      	adds	r3, #7
 8007e1e:	2202      	movs	r2, #2
 8007e20:	701a      	strb	r2, [r3, #0]
 8007e22:	2302      	movs	r3, #2
 8007e24:	e0ea      	b.n	8007ffc <f_lseek+0x660>
					fp->clust = clst;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e2c:	3314      	adds	r3, #20
 8007e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e30:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e38:	3308      	adds	r3, #8
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	441a      	add	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e46:	3308      	adds	r3, #8
 8007e48:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d8a2      	bhi.n	8007da0 <f_lseek+0x404>
				}
				fp->fptr += ofs;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e60:	3308      	adds	r3, #8
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	441a      	add	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e6e:	3308      	adds	r3, #8
 8007e70:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e7e:	330a      	adds	r3, #10
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e8a:	fb02 f201 	mul.w	r2, r2, r1
 8007e8e:	1a9b      	subs	r3, r3, r2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d022      	beq.n	8007eda <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fc f9f1 	bl	8004286 <clust2sect>
 8007ea4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d107      	bne.n	8007ebc <f_lseek+0x520>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb2:	3307      	adds	r3, #7
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e09f      	b.n	8007ffc <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec8:	330a      	adds	r3, #10
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ed6:	4413      	add	r3, r2
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef0:	330a      	adds	r3, #10
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ef8:	fb03 f301 	mul.w	r3, r3, r1
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d057      	beq.n	8007fb2 <f_lseek+0x616>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f08:	3318      	adds	r3, #24
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d04f      	beq.n	8007fb2 <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f18:	3306      	adds	r3, #6
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d028      	beq.n	8007f76 <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f30:	3301      	adds	r3, #1
 8007f32:	7818      	ldrb	r0, [r3, #0]
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f3c:	3318      	adds	r3, #24
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	2301      	movs	r3, #1
 8007f42:	f7fb fdc9 	bl	8003ad8 <disk_write>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d007      	beq.n	8007f5c <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f52:	3307      	adds	r3, #7
 8007f54:	2201      	movs	r2, #1
 8007f56:	701a      	strb	r2, [r3, #0]
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e04f      	b.n	8007ffc <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f62:	3306      	adds	r3, #6
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f72:	3306      	adds	r3, #6
 8007f74:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f82:	3301      	adds	r3, #1
 8007f84:	7818      	ldrb	r0, [r3, #0]
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	2301      	movs	r3, #1
 8007f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f8c:	f7fb fd84 	bl	8003a98 <disk_read>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d007      	beq.n	8007fa6 <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f9c:	3307      	adds	r3, #7
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	701a      	strb	r2, [r3, #0]
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e02a      	b.n	8007ffc <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fac:	3318      	adds	r3, #24
 8007fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fb0:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb8:	3308      	adds	r3, #8
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc2:	330c      	adds	r3, #12
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d916      	bls.n	8007ff8 <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fda:	330c      	adds	r3, #12
 8007fdc:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe4:	3306      	adds	r3, #6
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	f043 0320 	orr.w	r3, r3, #32
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff4:	3306      	adds	r3, #6
 8007ff6:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007ff8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3740      	adds	r7, #64	; 0x40
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08e      	sub	sp, #56	; 0x38
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8008010:	f107 030c 	add.w	r3, r7, #12
 8008014:	2200      	movs	r2, #0
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7fe f80f 	bl	800603c <find_volume>
 800801e:	4603      	mov	r3, r0
 8008020:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800802a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800802e:	2b00      	cmp	r3, #0
 8008030:	f040 80c4 	bne.w	80081bc <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803a:	3310      	adds	r3, #16
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008044:	3314      	adds	r3, #20
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3b02      	subs	r3, #2
 800804a:	429a      	cmp	r2, r3
 800804c:	d807      	bhi.n	800805e <f_getfree+0x5a>
			*nclst = fs->free_clust;
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008054:	3310      	adds	r3, #16
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	e0ae      	b.n	80081bc <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800806c:	7efb      	ldrb	r3, [r7, #27]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d127      	bne.n	80080c2 <f_getfree+0xbe>
				clst = 2;
 8008072:	2302      	movs	r3, #2
 8008074:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8008076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008078:	69f8      	ldr	r0, [r7, #28]
 800807a:	f7fc f92b 	bl	80042d4 <get_fat>
 800807e:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008086:	d103      	bne.n	8008090 <f_getfree+0x8c>
 8008088:	2301      	movs	r3, #1
 800808a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800808e:	e07f      	b.n	8008190 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d103      	bne.n	800809e <f_getfree+0x9a>
 8008096:	2302      	movs	r3, #2
 8008098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800809c:	e078      	b.n	8008190 <f_getfree+0x18c>
					if (stat == 0) n++;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <f_getfree+0xa6>
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	3301      	adds	r3, #1
 80080a8:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 80080aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ac:	3301      	adds	r3, #1
 80080ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b6:	3314      	adds	r3, #20
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080bc:	429a      	cmp	r2, r3
 80080be:	d3da      	bcc.n	8008076 <f_getfree+0x72>
 80080c0:	e066      	b.n	8008190 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c8:	3314      	adds	r3, #20
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
 80080dc:	2300      	movs	r3, #0
 80080de:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d115      	bne.n	8008112 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80080ec:	4619      	mov	r1, r3
 80080ee:	69f8      	ldr	r0, [r7, #28]
 80080f0:	f7fb ffc6 	bl	8004080 <move_window>
 80080f4:	4603      	mov	r3, r0
 80080f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 80080fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d145      	bne.n	800818e <f_getfree+0x18a>
						p = fs->win.d8;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810c:	330a      	adds	r3, #10
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8008112:	7efb      	ldrb	r3, [r7, #27]
 8008114:	2b02      	cmp	r3, #2
 8008116:	d115      	bne.n	8008144 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 8008118:	6a3b      	ldr	r3, [r7, #32]
 800811a:	3301      	adds	r3, #1
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	021b      	lsls	r3, r3, #8
 8008120:	b21a      	sxth	r2, r3
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	b21b      	sxth	r3, r3
 8008128:	4313      	orrs	r3, r2
 800812a:	b21b      	sxth	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d102      	bne.n	8008136 <f_getfree+0x132>
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	3301      	adds	r3, #1
 8008134:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	3302      	adds	r3, #2
 800813a:	623b      	str	r3, [r7, #32]
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	3b02      	subs	r3, #2
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
 8008142:	e01d      	b.n	8008180 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	3303      	adds	r3, #3
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	061a      	lsls	r2, r3, #24
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	3302      	adds	r3, #2
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	041b      	lsls	r3, r3, #16
 8008154:	4313      	orrs	r3, r2
 8008156:	6a3a      	ldr	r2, [r7, #32]
 8008158:	3201      	adds	r2, #1
 800815a:	7812      	ldrb	r2, [r2, #0]
 800815c:	0212      	lsls	r2, r2, #8
 800815e:	4313      	orrs	r3, r2
 8008160:	6a3a      	ldr	r2, [r7, #32]
 8008162:	7812      	ldrb	r2, [r2, #0]
 8008164:	4313      	orrs	r3, r2
 8008166:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d102      	bne.n	8008174 <f_getfree+0x170>
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	3301      	adds	r3, #1
 8008172:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	3304      	adds	r3, #4
 8008178:	623b      	str	r3, [r7, #32]
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	3b04      	subs	r3, #4
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8008180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008182:	3b01      	subs	r3, #1
 8008184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1a9      	bne.n	80080e0 <f_getfree+0xdc>
 800818c:	e000      	b.n	8008190 <f_getfree+0x18c>
						if (res != FR_OK) break;
 800818e:	bf00      	nop
			}
			fs->free_clust = n;
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008196:	3310      	adds	r3, #16
 8008198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800819a:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a2:	3305      	adds	r3, #5
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b2:	3305      	adds	r3, #5
 80081b4:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ba:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80081bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3738      	adds	r7, #56	; 0x38
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 80081ce:	b08c      	sub	sp, #48	; 0x30
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80081d6:	3b2c      	subs	r3, #44	; 0x2c
 80081d8:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	BYTE *dir;
	DWORD dclst = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80081e0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80081e4:	6013      	str	r3, [r2, #0]
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 80081e6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80081ea:	392c      	subs	r1, #44	; 0x2c
 80081ec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80081f0:	f103 0310 	add.w	r3, r3, #16
 80081f4:	3b14      	subs	r3, #20
 80081f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081fa:	2201      	movs	r2, #1
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fd ff1d 	bl	800603c <find_volume>
 8008202:	4603      	mov	r3, r0
 8008204:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8008208:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 800820c:	7013      	strb	r3, [r2, #0]
	if (res == FR_OK) {
 800820e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8008212:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f040 8146 	bne.w	80084aa <f_unlink+0x2e2>
		INIT_BUF(dj);
 800821e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008222:	f103 0310 	add.w	r3, r3, #16
 8008226:	3b14      	subs	r3, #20
 8008228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800822c:	3318      	adds	r3, #24
 800822e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008232:	3a28      	subs	r2, #40	; 0x28
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800823a:	f103 0310 	add.w	r3, r3, #16
 800823e:	3b14      	subs	r3, #20
 8008240:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008244:	4a9e      	ldr	r2, [pc, #632]	; (80084c0 <f_unlink+0x2f8>)
 8008246:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);		/* Follow the file path */
 8008248:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800824c:	3b2c      	subs	r3, #44	; 0x2c
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008254:	f103 0310 	add.w	r3, r3, #16
 8008258:	3b14      	subs	r3, #20
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f7fd fdc3 	bl	8005de8 <follow_path>
 8008262:	4603      	mov	r3, r0
 8008264:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8008268:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 800826c:	7013      	strb	r3, [r2, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 800826e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8008272:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10e      	bne.n	800829a <f_unlink+0xd2>
 800827c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008280:	f103 0310 	add.w	r3, r3, #16
 8008284:	3b14      	subs	r3, #20
 8008286:	2102      	movs	r1, #2
 8008288:	4618      	mov	r0, r3
 800828a:	f7fb fcdb 	bl	8003c44 <chk_lock>
 800828e:	4603      	mov	r3, r0
 8008290:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8008294:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8008298:	7013      	strb	r3, [r2, #0]
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800829a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800829e:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f040 8100 	bne.w	80084aa <f_unlink+0x2e2>
			dir = dj.dir;
 80082aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082ae:	f103 0310 	add.w	r3, r3, #16
 80082b2:	3b14      	subs	r3, #20
 80082b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b8:	3314      	adds	r3, #20
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80082c0:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80082c4:	6013      	str	r3, [r2, #0]
			if (!dir) {
 80082c6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80082ca:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d106      	bne.n	80082e2 <f_unlink+0x11a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80082d4:	2306      	movs	r3, #6
 80082d6:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80082da:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80082de:	7013      	strb	r3, [r2, #0]
 80082e0:	e010      	b.n	8008304 <f_unlink+0x13c>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 80082e2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80082e6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	330b      	adds	r3, #11
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <f_unlink+0x13c>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80082f8:	2307      	movs	r3, #7
 80082fa:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80082fe:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8008302:	7013      	strb	r3, [r2, #0]
			}
			if (res == FR_OK) {
 8008304:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8008308:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d17a      	bne.n	8008408 <f_unlink+0x240>
				dclst = ld_clust(dj.fs, dir);
 8008312:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008316:	f103 0310 	add.w	r3, r3, #16
 800831a:	3b14      	subs	r3, #20
 800831c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8008326:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800832a:	6811      	ldr	r1, [r2, #0]
 800832c:	4618      	mov	r0, r3
 800832e:	f7fc fe20 	bl	8004f72 <ld_clust>
 8008332:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8008336:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800833a:	6018      	str	r0, [r3, #0]
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 800833c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8008340:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d05e      	beq.n	8008408 <f_unlink+0x240>
 800834a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800834e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	330b      	adds	r3, #11
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	f003 0310 	and.w	r3, r3, #16
 800835c:	2b00      	cmp	r3, #0
 800835e:	d053      	beq.n	8008408 <f_unlink+0x240>
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 8008360:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8008364:	f101 0110 	add.w	r1, r1, #16
 8008368:	3914      	subs	r1, #20
 800836a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800836e:	3b1c      	subs	r3, #28
 8008370:	f241 0228 	movw	r2, #4136	; 0x1028
 8008374:	4618      	mov	r0, r3
 8008376:	f7fb fbed 	bl	8003b54 <mem_cpy>
						sdj.sclust = dclst;
 800837a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800837e:	3b1c      	subs	r3, #28
 8008380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008384:	3308      	adds	r3, #8
 8008386:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800838a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800838e:	6812      	ldr	r2, [r2, #0]
 8008390:	601a      	str	r2, [r3, #0]
						res = dir_sdi(&sdj, 2);
 8008392:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008396:	3b1c      	subs	r3, #28
 8008398:	2102      	movs	r1, #2
 800839a:	4618      	mov	r0, r3
 800839c:	f7fc fb5b 	bl	8004a56 <dir_sdi>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80083a6:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80083aa:	7013      	strb	r3, [r2, #0]
						if (res == FR_OK) {
 80083ac:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80083b0:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d126      	bne.n	8008408 <f_unlink+0x240>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 80083ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083be:	3b1c      	subs	r3, #28
 80083c0:	2100      	movs	r1, #0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fd f8f5 	bl	80055b2 <dir_read>
 80083c8:	4603      	mov	r3, r0
 80083ca:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80083ce:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80083d2:	7013      	strb	r3, [r2, #0]
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 80083d4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80083d8:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d105      	bne.n	80083ee <f_unlink+0x226>
 80083e2:	2307      	movs	r3, #7
 80083e4:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80083e8:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80083ec:	7013      	strb	r3, [r2, #0]
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 80083ee:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80083f2:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d105      	bne.n	8008408 <f_unlink+0x240>
 80083fc:	2300      	movs	r3, #0
 80083fe:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8008402:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8008406:	7013      	strb	r3, [r2, #0]
						}
					}
				}
			}
			if (res == FR_OK) {
 8008408:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800840c:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d149      	bne.n	80084aa <f_unlink+0x2e2>
				res = dir_remove(&dj);		/* Remove the directory entry */
 8008416:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800841a:	f103 0310 	add.w	r3, r3, #16
 800841e:	3b14      	subs	r3, #20
 8008420:	4618      	mov	r0, r3
 8008422:	f7fd faaf 	bl	8005984 <dir_remove>
 8008426:	4603      	mov	r3, r0
 8008428:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800842c:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8008430:	7013      	strb	r3, [r2, #0]
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 8008432:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8008436:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d11c      	bne.n	800847a <f_unlink+0x2b2>
 8008440:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8008444:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d015      	beq.n	800847a <f_unlink+0x2b2>
					res = remove_chain(dj.fs, dclst);
 800844e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008452:	f103 0310 	add.w	r3, r3, #16
 8008456:	3b14      	subs	r3, #20
 8008458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8008462:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008466:	6811      	ldr	r1, [r2, #0]
 8008468:	4618      	mov	r0, r3
 800846a:	f7fc f998 	bl	800479e <remove_chain>
 800846e:	4603      	mov	r3, r0
 8008470:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8008474:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8008478:	7013      	strb	r3, [r2, #0]
				if (res == FR_OK) res = sync_fs(dj.fs);
 800847a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800847e:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d110      	bne.n	80084aa <f_unlink+0x2e2>
 8008488:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800848c:	f103 0310 	add.w	r3, r3, #16
 8008490:	3b14      	subs	r3, #20
 8008492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4618      	mov	r0, r3
 800849a:	f7fb fe25 	bl	80040e8 <sync_fs>
 800849e:	4603      	mov	r3, r0
 80084a0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80084a4:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80084a8:	7013      	strb	r3, [r2, #0]
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 80084aa:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80084ae:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80084b2:	781b      	ldrb	r3, [r3, #0]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 80084ba:	3730      	adds	r7, #48	; 0x30
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	200000cc 	.word	0x200000cc

080084c4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b088      	sub	sp, #32
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
	int n = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80084d8:	e01b      	b.n	8008512 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80084da:	f107 0310 	add.w	r3, r7, #16
 80084de:	f107 0114 	add.w	r1, r7, #20
 80084e2:	2201      	movs	r2, #1
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7fe fcc7 	bl	8006e78 <f_read>
		if (rc != 1) break;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d116      	bne.n	800851e <f_gets+0x5a>
		c = s[0];
 80084f0:	7d3b      	ldrb	r3, [r7, #20]
 80084f2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	2b0d      	cmp	r3, #13
 80084f8:	d100      	bne.n	80084fc <f_gets+0x38>
 80084fa:	e00a      	b.n	8008512 <f_gets+0x4e>
		*p++ = c;
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	1c5a      	adds	r2, r3, #1
 8008500:	61ba      	str	r2, [r7, #24]
 8008502:	7dfa      	ldrb	r2, [r7, #23]
 8008504:	701a      	strb	r2, [r3, #0]
		n++;
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	3301      	adds	r3, #1
 800850a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	2b0a      	cmp	r3, #10
 8008510:	d007      	beq.n	8008522 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	3b01      	subs	r3, #1
 8008516:	69fa      	ldr	r2, [r7, #28]
 8008518:	429a      	cmp	r2, r3
 800851a:	dbde      	blt.n	80084da <f_gets+0x16>
 800851c:	e002      	b.n	8008524 <f_gets+0x60>
		if (rc != 1) break;
 800851e:	bf00      	nop
 8008520:	e000      	b.n	8008524 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008522:	bf00      	nop
	}
	*p = 0;
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	2200      	movs	r2, #0
 8008528:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <f_gets+0x70>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	e000      	b.n	8008536 <f_gets+0x72>
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3720      	adds	r7, #32
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800854a:	78fb      	ldrb	r3, [r7, #3]
 800854c:	2b0a      	cmp	r3, #10
 800854e:	d103      	bne.n	8008558 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008550:	210d      	movs	r1, #13
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff fff3 	bl	800853e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	db25      	blt.n	80085b0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	1c5a      	adds	r2, r3, #1
 8008568:	60fa      	str	r2, [r7, #12]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	4413      	add	r3, r2
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b3c      	cmp	r3, #60	; 0x3c
 8008576:	dd12      	ble.n	800859e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6818      	ldr	r0, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f103 010c 	add.w	r1, r3, #12
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	f107 0308 	add.w	r3, r7, #8
 8008588:	f7fe fe8c 	bl	80072a4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	429a      	cmp	r2, r3
 8008592:	d101      	bne.n	8008598 <putc_bfd+0x5a>
 8008594:	2300      	movs	r3, #0
 8008596:	e001      	b.n	800859c <putc_bfd+0x5e>
 8008598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800859c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	609a      	str	r2, [r3, #8]
 80085ae:	e000      	b.n	80085b2 <putc_bfd+0x74>
	if (i < 0) return;
 80085b0:	bf00      	nop
}
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80085b8:	b590      	push	{r4, r7, lr}
 80085ba:	b097      	sub	sp, #92	; 0x5c
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80085ce:	e009      	b.n	80085e4 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	781a      	ldrb	r2, [r3, #0]
 80085d8:	f107 030c 	add.w	r3, r7, #12
 80085dc:	4611      	mov	r1, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff ffad 	bl	800853e <putc_bfd>
	while (*str)			/* Put the string */
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1f1      	bne.n	80085d0 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	db15      	blt.n	800861e <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	461c      	mov	r4, r3
 80085f8:	f107 0208 	add.w	r2, r7, #8
 80085fc:	f107 030c 	add.w	r3, r7, #12
 8008600:	f103 010c 	add.w	r1, r3, #12
 8008604:	4613      	mov	r3, r2
 8008606:	4622      	mov	r2, r4
 8008608:	f7fe fe4c 	bl	80072a4 <f_write>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d105      	bne.n	800861e <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	4293      	cmp	r3, r2
 8008618:	d101      	bne.n	800861e <f_puts+0x66>
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	e001      	b.n	8008622 <f_puts+0x6a>
	return EOF;
 800861e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008622:	4618      	mov	r0, r3
 8008624:	375c      	adds	r7, #92	; 0x5c
 8008626:	46bd      	mov	sp, r7
 8008628:	bd90      	pop	{r4, r7, pc}
	...

0800862c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800863a:	2301      	movs	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008642:	4b1e      	ldr	r3, [pc, #120]	; (80086bc <FATFS_LinkDriverEx+0x90>)
 8008644:	7a5b      	ldrb	r3, [r3, #9]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b01      	cmp	r3, #1
 800864a:	d831      	bhi.n	80086b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800864c:	4b1b      	ldr	r3, [pc, #108]	; (80086bc <FATFS_LinkDriverEx+0x90>)
 800864e:	7a5b      	ldrb	r3, [r3, #9]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	461a      	mov	r2, r3
 8008654:	4b19      	ldr	r3, [pc, #100]	; (80086bc <FATFS_LinkDriverEx+0x90>)
 8008656:	2100      	movs	r1, #0
 8008658:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800865a:	4b18      	ldr	r3, [pc, #96]	; (80086bc <FATFS_LinkDriverEx+0x90>)
 800865c:	7a5b      	ldrb	r3, [r3, #9]
 800865e:	b2db      	uxtb	r3, r3
 8008660:	4a16      	ldr	r2, [pc, #88]	; (80086bc <FATFS_LinkDriverEx+0x90>)
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800866a:	4b14      	ldr	r3, [pc, #80]	; (80086bc <FATFS_LinkDriverEx+0x90>)
 800866c:	7a5b      	ldrb	r3, [r3, #9]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	461a      	mov	r2, r3
 8008672:	4b12      	ldr	r3, [pc, #72]	; (80086bc <FATFS_LinkDriverEx+0x90>)
 8008674:	4413      	add	r3, r2
 8008676:	79fa      	ldrb	r2, [r7, #7]
 8008678:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800867a:	4b10      	ldr	r3, [pc, #64]	; (80086bc <FATFS_LinkDriverEx+0x90>)
 800867c:	7a5b      	ldrb	r3, [r3, #9]
 800867e:	b2db      	uxtb	r3, r3
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	b2d1      	uxtb	r1, r2
 8008684:	4a0d      	ldr	r2, [pc, #52]	; (80086bc <FATFS_LinkDriverEx+0x90>)
 8008686:	7251      	strb	r1, [r2, #9]
 8008688:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800868a:	7dbb      	ldrb	r3, [r7, #22]
 800868c:	3330      	adds	r3, #48	; 0x30
 800868e:	b2da      	uxtb	r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	3301      	adds	r3, #1
 8008698:	223a      	movs	r2, #58	; 0x3a
 800869a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	3302      	adds	r3, #2
 80086a0:	222f      	movs	r2, #47	; 0x2f
 80086a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	3303      	adds	r3, #3
 80086a8:	2200      	movs	r2, #0
 80086aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bc80      	pop	{r7}
 80086ba:	4770      	bx	lr
 80086bc:	200002cc 	.word	0x200002cc

080086c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80086ca:	2200      	movs	r2, #0
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff ffac 	bl	800862c <FATFS_LinkDriverEx>
 80086d4:	4603      	mov	r3, r0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	6039      	str	r1, [r7, #0]
 80086ea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80086ec:	88fb      	ldrh	r3, [r7, #6]
 80086ee:	2b7f      	cmp	r3, #127	; 0x7f
 80086f0:	d802      	bhi.n	80086f8 <ff_convert+0x18>
		c = chr;
 80086f2:	88fb      	ldrh	r3, [r7, #6]
 80086f4:	81fb      	strh	r3, [r7, #14]
 80086f6:	e025      	b.n	8008744 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00b      	beq.n	8008716 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80086fe:	88fb      	ldrh	r3, [r7, #6]
 8008700:	2bff      	cmp	r3, #255	; 0xff
 8008702:	d805      	bhi.n	8008710 <ff_convert+0x30>
 8008704:	88fb      	ldrh	r3, [r7, #6]
 8008706:	3b80      	subs	r3, #128	; 0x80
 8008708:	4a11      	ldr	r2, [pc, #68]	; (8008750 <ff_convert+0x70>)
 800870a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800870e:	e000      	b.n	8008712 <ff_convert+0x32>
 8008710:	2300      	movs	r3, #0
 8008712:	81fb      	strh	r3, [r7, #14]
 8008714:	e016      	b.n	8008744 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008716:	2300      	movs	r3, #0
 8008718:	81fb      	strh	r3, [r7, #14]
 800871a:	e009      	b.n	8008730 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800871c:	89fb      	ldrh	r3, [r7, #14]
 800871e:	4a0c      	ldr	r2, [pc, #48]	; (8008750 <ff_convert+0x70>)
 8008720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008724:	88fa      	ldrh	r2, [r7, #6]
 8008726:	429a      	cmp	r2, r3
 8008728:	d006      	beq.n	8008738 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800872a:	89fb      	ldrh	r3, [r7, #14]
 800872c:	3301      	adds	r3, #1
 800872e:	81fb      	strh	r3, [r7, #14]
 8008730:	89fb      	ldrh	r3, [r7, #14]
 8008732:	2b7f      	cmp	r3, #127	; 0x7f
 8008734:	d9f2      	bls.n	800871c <ff_convert+0x3c>
 8008736:	e000      	b.n	800873a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008738:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800873a:	89fb      	ldrh	r3, [r7, #14]
 800873c:	3380      	adds	r3, #128	; 0x80
 800873e:	b29b      	uxth	r3, r3
 8008740:	b2db      	uxtb	r3, r3
 8008742:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008744:	89fb      	ldrh	r3, [r7, #14]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr
 8008750:	080094bc 	.word	0x080094bc

08008754 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800875e:	2300      	movs	r3, #0
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	e002      	b.n	800876a <ff_wtoupper+0x16>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	4a0f      	ldr	r2, [pc, #60]	; (80087a8 <ff_wtoupper+0x54>)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d006      	beq.n	8008784 <ff_wtoupper+0x30>
 8008776:	4a0c      	ldr	r2, [pc, #48]	; (80087a8 <ff_wtoupper+0x54>)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800877e:	88fa      	ldrh	r2, [r7, #6]
 8008780:	429a      	cmp	r2, r3
 8008782:	d1ef      	bne.n	8008764 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8008784:	4a08      	ldr	r2, [pc, #32]	; (80087a8 <ff_wtoupper+0x54>)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d004      	beq.n	800879a <ff_wtoupper+0x46>
 8008790:	4a06      	ldr	r2, [pc, #24]	; (80087ac <ff_wtoupper+0x58>)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008798:	e000      	b.n	800879c <ff_wtoupper+0x48>
 800879a:	88fb      	ldrh	r3, [r7, #6]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bc80      	pop	{r7}
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	080095bc 	.word	0x080095bc
 80087ac:	0800979c 	.word	0x0800979c

080087b0 <__errno>:
 80087b0:	4b01      	ldr	r3, [pc, #4]	; (80087b8 <__errno+0x8>)
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	20000024 	.word	0x20000024

080087bc <__libc_init_array>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	2600      	movs	r6, #0
 80087c0:	4d0c      	ldr	r5, [pc, #48]	; (80087f4 <__libc_init_array+0x38>)
 80087c2:	4c0d      	ldr	r4, [pc, #52]	; (80087f8 <__libc_init_array+0x3c>)
 80087c4:	1b64      	subs	r4, r4, r5
 80087c6:	10a4      	asrs	r4, r4, #2
 80087c8:	42a6      	cmp	r6, r4
 80087ca:	d109      	bne.n	80087e0 <__libc_init_array+0x24>
 80087cc:	f000 fc5c 	bl	8009088 <_init>
 80087d0:	2600      	movs	r6, #0
 80087d2:	4d0a      	ldr	r5, [pc, #40]	; (80087fc <__libc_init_array+0x40>)
 80087d4:	4c0a      	ldr	r4, [pc, #40]	; (8008800 <__libc_init_array+0x44>)
 80087d6:	1b64      	subs	r4, r4, r5
 80087d8:	10a4      	asrs	r4, r4, #2
 80087da:	42a6      	cmp	r6, r4
 80087dc:	d105      	bne.n	80087ea <__libc_init_array+0x2e>
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e4:	4798      	blx	r3
 80087e6:	3601      	adds	r6, #1
 80087e8:	e7ee      	b.n	80087c8 <__libc_init_array+0xc>
 80087ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ee:	4798      	blx	r3
 80087f0:	3601      	adds	r6, #1
 80087f2:	e7f2      	b.n	80087da <__libc_init_array+0x1e>
 80087f4:	080099b8 	.word	0x080099b8
 80087f8:	080099b8 	.word	0x080099b8
 80087fc:	080099b8 	.word	0x080099b8
 8008800:	080099bc 	.word	0x080099bc

08008804 <memcpy>:
 8008804:	440a      	add	r2, r1
 8008806:	4291      	cmp	r1, r2
 8008808:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800880c:	d100      	bne.n	8008810 <memcpy+0xc>
 800880e:	4770      	bx	lr
 8008810:	b510      	push	{r4, lr}
 8008812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008816:	4291      	cmp	r1, r2
 8008818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800881c:	d1f9      	bne.n	8008812 <memcpy+0xe>
 800881e:	bd10      	pop	{r4, pc}

08008820 <memset>:
 8008820:	4603      	mov	r3, r0
 8008822:	4402      	add	r2, r0
 8008824:	4293      	cmp	r3, r2
 8008826:	d100      	bne.n	800882a <memset+0xa>
 8008828:	4770      	bx	lr
 800882a:	f803 1b01 	strb.w	r1, [r3], #1
 800882e:	e7f9      	b.n	8008824 <memset+0x4>

08008830 <siprintf>:
 8008830:	b40e      	push	{r1, r2, r3}
 8008832:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008836:	b500      	push	{lr}
 8008838:	b09c      	sub	sp, #112	; 0x70
 800883a:	ab1d      	add	r3, sp, #116	; 0x74
 800883c:	9002      	str	r0, [sp, #8]
 800883e:	9006      	str	r0, [sp, #24]
 8008840:	9107      	str	r1, [sp, #28]
 8008842:	9104      	str	r1, [sp, #16]
 8008844:	4808      	ldr	r0, [pc, #32]	; (8008868 <siprintf+0x38>)
 8008846:	4909      	ldr	r1, [pc, #36]	; (800886c <siprintf+0x3c>)
 8008848:	f853 2b04 	ldr.w	r2, [r3], #4
 800884c:	9105      	str	r1, [sp, #20]
 800884e:	6800      	ldr	r0, [r0, #0]
 8008850:	a902      	add	r1, sp, #8
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	f000 f868 	bl	8008928 <_svfiprintf_r>
 8008858:	2200      	movs	r2, #0
 800885a:	9b02      	ldr	r3, [sp, #8]
 800885c:	701a      	strb	r2, [r3, #0]
 800885e:	b01c      	add	sp, #112	; 0x70
 8008860:	f85d eb04 	ldr.w	lr, [sp], #4
 8008864:	b003      	add	sp, #12
 8008866:	4770      	bx	lr
 8008868:	20000024 	.word	0x20000024
 800886c:	ffff0208 	.word	0xffff0208

08008870 <__ssputs_r>:
 8008870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008874:	688e      	ldr	r6, [r1, #8]
 8008876:	4682      	mov	sl, r0
 8008878:	429e      	cmp	r6, r3
 800887a:	460c      	mov	r4, r1
 800887c:	4690      	mov	r8, r2
 800887e:	461f      	mov	r7, r3
 8008880:	d838      	bhi.n	80088f4 <__ssputs_r+0x84>
 8008882:	898a      	ldrh	r2, [r1, #12]
 8008884:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008888:	d032      	beq.n	80088f0 <__ssputs_r+0x80>
 800888a:	6825      	ldr	r5, [r4, #0]
 800888c:	6909      	ldr	r1, [r1, #16]
 800888e:	3301      	adds	r3, #1
 8008890:	eba5 0901 	sub.w	r9, r5, r1
 8008894:	6965      	ldr	r5, [r4, #20]
 8008896:	444b      	add	r3, r9
 8008898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800889c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088a0:	106d      	asrs	r5, r5, #1
 80088a2:	429d      	cmp	r5, r3
 80088a4:	bf38      	it	cc
 80088a6:	461d      	movcc	r5, r3
 80088a8:	0553      	lsls	r3, r2, #21
 80088aa:	d531      	bpl.n	8008910 <__ssputs_r+0xa0>
 80088ac:	4629      	mov	r1, r5
 80088ae:	f000 fb45 	bl	8008f3c <_malloc_r>
 80088b2:	4606      	mov	r6, r0
 80088b4:	b950      	cbnz	r0, 80088cc <__ssputs_r+0x5c>
 80088b6:	230c      	movs	r3, #12
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088bc:	f8ca 3000 	str.w	r3, [sl]
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088cc:	464a      	mov	r2, r9
 80088ce:	6921      	ldr	r1, [r4, #16]
 80088d0:	f7ff ff98 	bl	8008804 <memcpy>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	6126      	str	r6, [r4, #16]
 80088e2:	444e      	add	r6, r9
 80088e4:	6026      	str	r6, [r4, #0]
 80088e6:	463e      	mov	r6, r7
 80088e8:	6165      	str	r5, [r4, #20]
 80088ea:	eba5 0509 	sub.w	r5, r5, r9
 80088ee:	60a5      	str	r5, [r4, #8]
 80088f0:	42be      	cmp	r6, r7
 80088f2:	d900      	bls.n	80088f6 <__ssputs_r+0x86>
 80088f4:	463e      	mov	r6, r7
 80088f6:	4632      	mov	r2, r6
 80088f8:	4641      	mov	r1, r8
 80088fa:	6820      	ldr	r0, [r4, #0]
 80088fc:	f000 fab8 	bl	8008e70 <memmove>
 8008900:	68a3      	ldr	r3, [r4, #8]
 8008902:	6822      	ldr	r2, [r4, #0]
 8008904:	1b9b      	subs	r3, r3, r6
 8008906:	4432      	add	r2, r6
 8008908:	2000      	movs	r0, #0
 800890a:	60a3      	str	r3, [r4, #8]
 800890c:	6022      	str	r2, [r4, #0]
 800890e:	e7db      	b.n	80088c8 <__ssputs_r+0x58>
 8008910:	462a      	mov	r2, r5
 8008912:	f000 fb6d 	bl	8008ff0 <_realloc_r>
 8008916:	4606      	mov	r6, r0
 8008918:	2800      	cmp	r0, #0
 800891a:	d1e1      	bne.n	80088e0 <__ssputs_r+0x70>
 800891c:	4650      	mov	r0, sl
 800891e:	6921      	ldr	r1, [r4, #16]
 8008920:	f000 fac0 	bl	8008ea4 <_free_r>
 8008924:	e7c7      	b.n	80088b6 <__ssputs_r+0x46>
	...

08008928 <_svfiprintf_r>:
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	4698      	mov	r8, r3
 800892e:	898b      	ldrh	r3, [r1, #12]
 8008930:	4607      	mov	r7, r0
 8008932:	061b      	lsls	r3, r3, #24
 8008934:	460d      	mov	r5, r1
 8008936:	4614      	mov	r4, r2
 8008938:	b09d      	sub	sp, #116	; 0x74
 800893a:	d50e      	bpl.n	800895a <_svfiprintf_r+0x32>
 800893c:	690b      	ldr	r3, [r1, #16]
 800893e:	b963      	cbnz	r3, 800895a <_svfiprintf_r+0x32>
 8008940:	2140      	movs	r1, #64	; 0x40
 8008942:	f000 fafb 	bl	8008f3c <_malloc_r>
 8008946:	6028      	str	r0, [r5, #0]
 8008948:	6128      	str	r0, [r5, #16]
 800894a:	b920      	cbnz	r0, 8008956 <_svfiprintf_r+0x2e>
 800894c:	230c      	movs	r3, #12
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008954:	e0d1      	b.n	8008afa <_svfiprintf_r+0x1d2>
 8008956:	2340      	movs	r3, #64	; 0x40
 8008958:	616b      	str	r3, [r5, #20]
 800895a:	2300      	movs	r3, #0
 800895c:	9309      	str	r3, [sp, #36]	; 0x24
 800895e:	2320      	movs	r3, #32
 8008960:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008964:	2330      	movs	r3, #48	; 0x30
 8008966:	f04f 0901 	mov.w	r9, #1
 800896a:	f8cd 800c 	str.w	r8, [sp, #12]
 800896e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008b14 <_svfiprintf_r+0x1ec>
 8008972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008976:	4623      	mov	r3, r4
 8008978:	469a      	mov	sl, r3
 800897a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800897e:	b10a      	cbz	r2, 8008984 <_svfiprintf_r+0x5c>
 8008980:	2a25      	cmp	r2, #37	; 0x25
 8008982:	d1f9      	bne.n	8008978 <_svfiprintf_r+0x50>
 8008984:	ebba 0b04 	subs.w	fp, sl, r4
 8008988:	d00b      	beq.n	80089a2 <_svfiprintf_r+0x7a>
 800898a:	465b      	mov	r3, fp
 800898c:	4622      	mov	r2, r4
 800898e:	4629      	mov	r1, r5
 8008990:	4638      	mov	r0, r7
 8008992:	f7ff ff6d 	bl	8008870 <__ssputs_r>
 8008996:	3001      	adds	r0, #1
 8008998:	f000 80aa 	beq.w	8008af0 <_svfiprintf_r+0x1c8>
 800899c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800899e:	445a      	add	r2, fp
 80089a0:	9209      	str	r2, [sp, #36]	; 0x24
 80089a2:	f89a 3000 	ldrb.w	r3, [sl]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 80a2 	beq.w	8008af0 <_svfiprintf_r+0x1c8>
 80089ac:	2300      	movs	r3, #0
 80089ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089b6:	f10a 0a01 	add.w	sl, sl, #1
 80089ba:	9304      	str	r3, [sp, #16]
 80089bc:	9307      	str	r3, [sp, #28]
 80089be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089c2:	931a      	str	r3, [sp, #104]	; 0x68
 80089c4:	4654      	mov	r4, sl
 80089c6:	2205      	movs	r2, #5
 80089c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089cc:	4851      	ldr	r0, [pc, #324]	; (8008b14 <_svfiprintf_r+0x1ec>)
 80089ce:	f000 fa41 	bl	8008e54 <memchr>
 80089d2:	9a04      	ldr	r2, [sp, #16]
 80089d4:	b9d8      	cbnz	r0, 8008a0e <_svfiprintf_r+0xe6>
 80089d6:	06d0      	lsls	r0, r2, #27
 80089d8:	bf44      	itt	mi
 80089da:	2320      	movmi	r3, #32
 80089dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089e0:	0711      	lsls	r1, r2, #28
 80089e2:	bf44      	itt	mi
 80089e4:	232b      	movmi	r3, #43	; 0x2b
 80089e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ea:	f89a 3000 	ldrb.w	r3, [sl]
 80089ee:	2b2a      	cmp	r3, #42	; 0x2a
 80089f0:	d015      	beq.n	8008a1e <_svfiprintf_r+0xf6>
 80089f2:	4654      	mov	r4, sl
 80089f4:	2000      	movs	r0, #0
 80089f6:	f04f 0c0a 	mov.w	ip, #10
 80089fa:	9a07      	ldr	r2, [sp, #28]
 80089fc:	4621      	mov	r1, r4
 80089fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a02:	3b30      	subs	r3, #48	; 0x30
 8008a04:	2b09      	cmp	r3, #9
 8008a06:	d94e      	bls.n	8008aa6 <_svfiprintf_r+0x17e>
 8008a08:	b1b0      	cbz	r0, 8008a38 <_svfiprintf_r+0x110>
 8008a0a:	9207      	str	r2, [sp, #28]
 8008a0c:	e014      	b.n	8008a38 <_svfiprintf_r+0x110>
 8008a0e:	eba0 0308 	sub.w	r3, r0, r8
 8008a12:	fa09 f303 	lsl.w	r3, r9, r3
 8008a16:	4313      	orrs	r3, r2
 8008a18:	46a2      	mov	sl, r4
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	e7d2      	b.n	80089c4 <_svfiprintf_r+0x9c>
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	1d19      	adds	r1, r3, #4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	9103      	str	r1, [sp, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bfbb      	ittet	lt
 8008a2a:	425b      	neglt	r3, r3
 8008a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a30:	9307      	strge	r3, [sp, #28]
 8008a32:	9307      	strlt	r3, [sp, #28]
 8008a34:	bfb8      	it	lt
 8008a36:	9204      	strlt	r2, [sp, #16]
 8008a38:	7823      	ldrb	r3, [r4, #0]
 8008a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a3c:	d10c      	bne.n	8008a58 <_svfiprintf_r+0x130>
 8008a3e:	7863      	ldrb	r3, [r4, #1]
 8008a40:	2b2a      	cmp	r3, #42	; 0x2a
 8008a42:	d135      	bne.n	8008ab0 <_svfiprintf_r+0x188>
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	3402      	adds	r4, #2
 8008a48:	1d1a      	adds	r2, r3, #4
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	9203      	str	r2, [sp, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	bfb8      	it	lt
 8008a52:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a56:	9305      	str	r3, [sp, #20]
 8008a58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b24 <_svfiprintf_r+0x1fc>
 8008a5c:	2203      	movs	r2, #3
 8008a5e:	4650      	mov	r0, sl
 8008a60:	7821      	ldrb	r1, [r4, #0]
 8008a62:	f000 f9f7 	bl	8008e54 <memchr>
 8008a66:	b140      	cbz	r0, 8008a7a <_svfiprintf_r+0x152>
 8008a68:	2340      	movs	r3, #64	; 0x40
 8008a6a:	eba0 000a 	sub.w	r0, r0, sl
 8008a6e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a72:	9b04      	ldr	r3, [sp, #16]
 8008a74:	3401      	adds	r4, #1
 8008a76:	4303      	orrs	r3, r0
 8008a78:	9304      	str	r3, [sp, #16]
 8008a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7e:	2206      	movs	r2, #6
 8008a80:	4825      	ldr	r0, [pc, #148]	; (8008b18 <_svfiprintf_r+0x1f0>)
 8008a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a86:	f000 f9e5 	bl	8008e54 <memchr>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d038      	beq.n	8008b00 <_svfiprintf_r+0x1d8>
 8008a8e:	4b23      	ldr	r3, [pc, #140]	; (8008b1c <_svfiprintf_r+0x1f4>)
 8008a90:	bb1b      	cbnz	r3, 8008ada <_svfiprintf_r+0x1b2>
 8008a92:	9b03      	ldr	r3, [sp, #12]
 8008a94:	3307      	adds	r3, #7
 8008a96:	f023 0307 	bic.w	r3, r3, #7
 8008a9a:	3308      	adds	r3, #8
 8008a9c:	9303      	str	r3, [sp, #12]
 8008a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa0:	4433      	add	r3, r6
 8008aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa4:	e767      	b.n	8008976 <_svfiprintf_r+0x4e>
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	2001      	movs	r0, #1
 8008aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aae:	e7a5      	b.n	80089fc <_svfiprintf_r+0xd4>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f04f 0c0a 	mov.w	ip, #10
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	3401      	adds	r4, #1
 8008aba:	9305      	str	r3, [sp, #20]
 8008abc:	4620      	mov	r0, r4
 8008abe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ac2:	3a30      	subs	r2, #48	; 0x30
 8008ac4:	2a09      	cmp	r2, #9
 8008ac6:	d903      	bls.n	8008ad0 <_svfiprintf_r+0x1a8>
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d0c5      	beq.n	8008a58 <_svfiprintf_r+0x130>
 8008acc:	9105      	str	r1, [sp, #20]
 8008ace:	e7c3      	b.n	8008a58 <_svfiprintf_r+0x130>
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ad8:	e7f0      	b.n	8008abc <_svfiprintf_r+0x194>
 8008ada:	ab03      	add	r3, sp, #12
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	462a      	mov	r2, r5
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	4b0f      	ldr	r3, [pc, #60]	; (8008b20 <_svfiprintf_r+0x1f8>)
 8008ae4:	a904      	add	r1, sp, #16
 8008ae6:	f3af 8000 	nop.w
 8008aea:	1c42      	adds	r2, r0, #1
 8008aec:	4606      	mov	r6, r0
 8008aee:	d1d6      	bne.n	8008a9e <_svfiprintf_r+0x176>
 8008af0:	89ab      	ldrh	r3, [r5, #12]
 8008af2:	065b      	lsls	r3, r3, #25
 8008af4:	f53f af2c 	bmi.w	8008950 <_svfiprintf_r+0x28>
 8008af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008afa:	b01d      	add	sp, #116	; 0x74
 8008afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b00:	ab03      	add	r3, sp, #12
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	462a      	mov	r2, r5
 8008b06:	4638      	mov	r0, r7
 8008b08:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <_svfiprintf_r+0x1f8>)
 8008b0a:	a904      	add	r1, sp, #16
 8008b0c:	f000 f87c 	bl	8008c08 <_printf_i>
 8008b10:	e7eb      	b.n	8008aea <_svfiprintf_r+0x1c2>
 8008b12:	bf00      	nop
 8008b14:	0800997c 	.word	0x0800997c
 8008b18:	08009986 	.word	0x08009986
 8008b1c:	00000000 	.word	0x00000000
 8008b20:	08008871 	.word	0x08008871
 8008b24:	08009982 	.word	0x08009982

08008b28 <_printf_common>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	4616      	mov	r6, r2
 8008b2e:	4699      	mov	r9, r3
 8008b30:	688a      	ldr	r2, [r1, #8]
 8008b32:	690b      	ldr	r3, [r1, #16]
 8008b34:	4607      	mov	r7, r0
 8008b36:	4293      	cmp	r3, r2
 8008b38:	bfb8      	it	lt
 8008b3a:	4613      	movlt	r3, r2
 8008b3c:	6033      	str	r3, [r6, #0]
 8008b3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b42:	460c      	mov	r4, r1
 8008b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b48:	b10a      	cbz	r2, 8008b4e <_printf_common+0x26>
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	6033      	str	r3, [r6, #0]
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	0699      	lsls	r1, r3, #26
 8008b52:	bf42      	ittt	mi
 8008b54:	6833      	ldrmi	r3, [r6, #0]
 8008b56:	3302      	addmi	r3, #2
 8008b58:	6033      	strmi	r3, [r6, #0]
 8008b5a:	6825      	ldr	r5, [r4, #0]
 8008b5c:	f015 0506 	ands.w	r5, r5, #6
 8008b60:	d106      	bne.n	8008b70 <_printf_common+0x48>
 8008b62:	f104 0a19 	add.w	sl, r4, #25
 8008b66:	68e3      	ldr	r3, [r4, #12]
 8008b68:	6832      	ldr	r2, [r6, #0]
 8008b6a:	1a9b      	subs	r3, r3, r2
 8008b6c:	42ab      	cmp	r3, r5
 8008b6e:	dc28      	bgt.n	8008bc2 <_printf_common+0x9a>
 8008b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b74:	1e13      	subs	r3, r2, #0
 8008b76:	6822      	ldr	r2, [r4, #0]
 8008b78:	bf18      	it	ne
 8008b7a:	2301      	movne	r3, #1
 8008b7c:	0692      	lsls	r2, r2, #26
 8008b7e:	d42d      	bmi.n	8008bdc <_printf_common+0xb4>
 8008b80:	4649      	mov	r1, r9
 8008b82:	4638      	mov	r0, r7
 8008b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b88:	47c0      	blx	r8
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	d020      	beq.n	8008bd0 <_printf_common+0xa8>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	68e5      	ldr	r5, [r4, #12]
 8008b92:	f003 0306 	and.w	r3, r3, #6
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	bf18      	it	ne
 8008b9a:	2500      	movne	r5, #0
 8008b9c:	6832      	ldr	r2, [r6, #0]
 8008b9e:	f04f 0600 	mov.w	r6, #0
 8008ba2:	68a3      	ldr	r3, [r4, #8]
 8008ba4:	bf08      	it	eq
 8008ba6:	1aad      	subeq	r5, r5, r2
 8008ba8:	6922      	ldr	r2, [r4, #16]
 8008baa:	bf08      	it	eq
 8008bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	bfc4      	itt	gt
 8008bb4:	1a9b      	subgt	r3, r3, r2
 8008bb6:	18ed      	addgt	r5, r5, r3
 8008bb8:	341a      	adds	r4, #26
 8008bba:	42b5      	cmp	r5, r6
 8008bbc:	d11a      	bne.n	8008bf4 <_printf_common+0xcc>
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	e008      	b.n	8008bd4 <_printf_common+0xac>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4652      	mov	r2, sl
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	4638      	mov	r0, r7
 8008bca:	47c0      	blx	r8
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d103      	bne.n	8008bd8 <_printf_common+0xb0>
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd8:	3501      	adds	r5, #1
 8008bda:	e7c4      	b.n	8008b66 <_printf_common+0x3e>
 8008bdc:	2030      	movs	r0, #48	; 0x30
 8008bde:	18e1      	adds	r1, r4, r3
 8008be0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bea:	4422      	add	r2, r4
 8008bec:	3302      	adds	r3, #2
 8008bee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bf2:	e7c5      	b.n	8008b80 <_printf_common+0x58>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	47c0      	blx	r8
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d0e6      	beq.n	8008bd0 <_printf_common+0xa8>
 8008c02:	3601      	adds	r6, #1
 8008c04:	e7d9      	b.n	8008bba <_printf_common+0x92>
	...

08008c08 <_printf_i>:
 8008c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	7e27      	ldrb	r7, [r4, #24]
 8008c10:	4691      	mov	r9, r2
 8008c12:	2f78      	cmp	r7, #120	; 0x78
 8008c14:	4680      	mov	r8, r0
 8008c16:	469a      	mov	sl, r3
 8008c18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c1e:	d807      	bhi.n	8008c30 <_printf_i+0x28>
 8008c20:	2f62      	cmp	r7, #98	; 0x62
 8008c22:	d80a      	bhi.n	8008c3a <_printf_i+0x32>
 8008c24:	2f00      	cmp	r7, #0
 8008c26:	f000 80d9 	beq.w	8008ddc <_printf_i+0x1d4>
 8008c2a:	2f58      	cmp	r7, #88	; 0x58
 8008c2c:	f000 80a4 	beq.w	8008d78 <_printf_i+0x170>
 8008c30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c38:	e03a      	b.n	8008cb0 <_printf_i+0xa8>
 8008c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c3e:	2b15      	cmp	r3, #21
 8008c40:	d8f6      	bhi.n	8008c30 <_printf_i+0x28>
 8008c42:	a001      	add	r0, pc, #4	; (adr r0, 8008c48 <_printf_i+0x40>)
 8008c44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c48:	08008ca1 	.word	0x08008ca1
 8008c4c:	08008cb5 	.word	0x08008cb5
 8008c50:	08008c31 	.word	0x08008c31
 8008c54:	08008c31 	.word	0x08008c31
 8008c58:	08008c31 	.word	0x08008c31
 8008c5c:	08008c31 	.word	0x08008c31
 8008c60:	08008cb5 	.word	0x08008cb5
 8008c64:	08008c31 	.word	0x08008c31
 8008c68:	08008c31 	.word	0x08008c31
 8008c6c:	08008c31 	.word	0x08008c31
 8008c70:	08008c31 	.word	0x08008c31
 8008c74:	08008dc3 	.word	0x08008dc3
 8008c78:	08008ce5 	.word	0x08008ce5
 8008c7c:	08008da5 	.word	0x08008da5
 8008c80:	08008c31 	.word	0x08008c31
 8008c84:	08008c31 	.word	0x08008c31
 8008c88:	08008de5 	.word	0x08008de5
 8008c8c:	08008c31 	.word	0x08008c31
 8008c90:	08008ce5 	.word	0x08008ce5
 8008c94:	08008c31 	.word	0x08008c31
 8008c98:	08008c31 	.word	0x08008c31
 8008c9c:	08008dad 	.word	0x08008dad
 8008ca0:	680b      	ldr	r3, [r1, #0]
 8008ca2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ca6:	1d1a      	adds	r2, r3, #4
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	600a      	str	r2, [r1, #0]
 8008cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e0a4      	b.n	8008dfe <_printf_i+0x1f6>
 8008cb4:	6825      	ldr	r5, [r4, #0]
 8008cb6:	6808      	ldr	r0, [r1, #0]
 8008cb8:	062e      	lsls	r6, r5, #24
 8008cba:	f100 0304 	add.w	r3, r0, #4
 8008cbe:	d50a      	bpl.n	8008cd6 <_printf_i+0xce>
 8008cc0:	6805      	ldr	r5, [r0, #0]
 8008cc2:	600b      	str	r3, [r1, #0]
 8008cc4:	2d00      	cmp	r5, #0
 8008cc6:	da03      	bge.n	8008cd0 <_printf_i+0xc8>
 8008cc8:	232d      	movs	r3, #45	; 0x2d
 8008cca:	426d      	negs	r5, r5
 8008ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd0:	230a      	movs	r3, #10
 8008cd2:	485e      	ldr	r0, [pc, #376]	; (8008e4c <_printf_i+0x244>)
 8008cd4:	e019      	b.n	8008d0a <_printf_i+0x102>
 8008cd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008cda:	6805      	ldr	r5, [r0, #0]
 8008cdc:	600b      	str	r3, [r1, #0]
 8008cde:	bf18      	it	ne
 8008ce0:	b22d      	sxthne	r5, r5
 8008ce2:	e7ef      	b.n	8008cc4 <_printf_i+0xbc>
 8008ce4:	680b      	ldr	r3, [r1, #0]
 8008ce6:	6825      	ldr	r5, [r4, #0]
 8008ce8:	1d18      	adds	r0, r3, #4
 8008cea:	6008      	str	r0, [r1, #0]
 8008cec:	0628      	lsls	r0, r5, #24
 8008cee:	d501      	bpl.n	8008cf4 <_printf_i+0xec>
 8008cf0:	681d      	ldr	r5, [r3, #0]
 8008cf2:	e002      	b.n	8008cfa <_printf_i+0xf2>
 8008cf4:	0669      	lsls	r1, r5, #25
 8008cf6:	d5fb      	bpl.n	8008cf0 <_printf_i+0xe8>
 8008cf8:	881d      	ldrh	r5, [r3, #0]
 8008cfa:	2f6f      	cmp	r7, #111	; 0x6f
 8008cfc:	bf0c      	ite	eq
 8008cfe:	2308      	moveq	r3, #8
 8008d00:	230a      	movne	r3, #10
 8008d02:	4852      	ldr	r0, [pc, #328]	; (8008e4c <_printf_i+0x244>)
 8008d04:	2100      	movs	r1, #0
 8008d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d0a:	6866      	ldr	r6, [r4, #4]
 8008d0c:	2e00      	cmp	r6, #0
 8008d0e:	bfa8      	it	ge
 8008d10:	6821      	ldrge	r1, [r4, #0]
 8008d12:	60a6      	str	r6, [r4, #8]
 8008d14:	bfa4      	itt	ge
 8008d16:	f021 0104 	bicge.w	r1, r1, #4
 8008d1a:	6021      	strge	r1, [r4, #0]
 8008d1c:	b90d      	cbnz	r5, 8008d22 <_printf_i+0x11a>
 8008d1e:	2e00      	cmp	r6, #0
 8008d20:	d04d      	beq.n	8008dbe <_printf_i+0x1b6>
 8008d22:	4616      	mov	r6, r2
 8008d24:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d28:	fb03 5711 	mls	r7, r3, r1, r5
 8008d2c:	5dc7      	ldrb	r7, [r0, r7]
 8008d2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d32:	462f      	mov	r7, r5
 8008d34:	42bb      	cmp	r3, r7
 8008d36:	460d      	mov	r5, r1
 8008d38:	d9f4      	bls.n	8008d24 <_printf_i+0x11c>
 8008d3a:	2b08      	cmp	r3, #8
 8008d3c:	d10b      	bne.n	8008d56 <_printf_i+0x14e>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	07df      	lsls	r7, r3, #31
 8008d42:	d508      	bpl.n	8008d56 <_printf_i+0x14e>
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	6861      	ldr	r1, [r4, #4]
 8008d48:	4299      	cmp	r1, r3
 8008d4a:	bfde      	ittt	le
 8008d4c:	2330      	movle	r3, #48	; 0x30
 8008d4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d52:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008d56:	1b92      	subs	r2, r2, r6
 8008d58:	6122      	str	r2, [r4, #16]
 8008d5a:	464b      	mov	r3, r9
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	4640      	mov	r0, r8
 8008d60:	f8cd a000 	str.w	sl, [sp]
 8008d64:	aa03      	add	r2, sp, #12
 8008d66:	f7ff fedf 	bl	8008b28 <_printf_common>
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d14c      	bne.n	8008e08 <_printf_i+0x200>
 8008d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d72:	b004      	add	sp, #16
 8008d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d78:	4834      	ldr	r0, [pc, #208]	; (8008e4c <_printf_i+0x244>)
 8008d7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d7e:	680e      	ldr	r6, [r1, #0]
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d86:	061f      	lsls	r7, r3, #24
 8008d88:	600e      	str	r6, [r1, #0]
 8008d8a:	d514      	bpl.n	8008db6 <_printf_i+0x1ae>
 8008d8c:	07d9      	lsls	r1, r3, #31
 8008d8e:	bf44      	itt	mi
 8008d90:	f043 0320 	orrmi.w	r3, r3, #32
 8008d94:	6023      	strmi	r3, [r4, #0]
 8008d96:	b91d      	cbnz	r5, 8008da0 <_printf_i+0x198>
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	f023 0320 	bic.w	r3, r3, #32
 8008d9e:	6023      	str	r3, [r4, #0]
 8008da0:	2310      	movs	r3, #16
 8008da2:	e7af      	b.n	8008d04 <_printf_i+0xfc>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	f043 0320 	orr.w	r3, r3, #32
 8008daa:	6023      	str	r3, [r4, #0]
 8008dac:	2378      	movs	r3, #120	; 0x78
 8008dae:	4828      	ldr	r0, [pc, #160]	; (8008e50 <_printf_i+0x248>)
 8008db0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008db4:	e7e3      	b.n	8008d7e <_printf_i+0x176>
 8008db6:	065e      	lsls	r6, r3, #25
 8008db8:	bf48      	it	mi
 8008dba:	b2ad      	uxthmi	r5, r5
 8008dbc:	e7e6      	b.n	8008d8c <_printf_i+0x184>
 8008dbe:	4616      	mov	r6, r2
 8008dc0:	e7bb      	b.n	8008d3a <_printf_i+0x132>
 8008dc2:	680b      	ldr	r3, [r1, #0]
 8008dc4:	6826      	ldr	r6, [r4, #0]
 8008dc6:	1d1d      	adds	r5, r3, #4
 8008dc8:	6960      	ldr	r0, [r4, #20]
 8008dca:	600d      	str	r5, [r1, #0]
 8008dcc:	0635      	lsls	r5, r6, #24
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	d501      	bpl.n	8008dd6 <_printf_i+0x1ce>
 8008dd2:	6018      	str	r0, [r3, #0]
 8008dd4:	e002      	b.n	8008ddc <_printf_i+0x1d4>
 8008dd6:	0671      	lsls	r1, r6, #25
 8008dd8:	d5fb      	bpl.n	8008dd2 <_printf_i+0x1ca>
 8008dda:	8018      	strh	r0, [r3, #0]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4616      	mov	r6, r2
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	e7ba      	b.n	8008d5a <_printf_i+0x152>
 8008de4:	680b      	ldr	r3, [r1, #0]
 8008de6:	1d1a      	adds	r2, r3, #4
 8008de8:	600a      	str	r2, [r1, #0]
 8008dea:	681e      	ldr	r6, [r3, #0]
 8008dec:	2100      	movs	r1, #0
 8008dee:	4630      	mov	r0, r6
 8008df0:	6862      	ldr	r2, [r4, #4]
 8008df2:	f000 f82f 	bl	8008e54 <memchr>
 8008df6:	b108      	cbz	r0, 8008dfc <_printf_i+0x1f4>
 8008df8:	1b80      	subs	r0, r0, r6
 8008dfa:	6060      	str	r0, [r4, #4]
 8008dfc:	6863      	ldr	r3, [r4, #4]
 8008dfe:	6123      	str	r3, [r4, #16]
 8008e00:	2300      	movs	r3, #0
 8008e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e06:	e7a8      	b.n	8008d5a <_printf_i+0x152>
 8008e08:	4632      	mov	r2, r6
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	47d0      	blx	sl
 8008e12:	3001      	adds	r0, #1
 8008e14:	d0ab      	beq.n	8008d6e <_printf_i+0x166>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	079b      	lsls	r3, r3, #30
 8008e1a:	d413      	bmi.n	8008e44 <_printf_i+0x23c>
 8008e1c:	68e0      	ldr	r0, [r4, #12]
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	4298      	cmp	r0, r3
 8008e22:	bfb8      	it	lt
 8008e24:	4618      	movlt	r0, r3
 8008e26:	e7a4      	b.n	8008d72 <_printf_i+0x16a>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	4632      	mov	r2, r6
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	4640      	mov	r0, r8
 8008e30:	47d0      	blx	sl
 8008e32:	3001      	adds	r0, #1
 8008e34:	d09b      	beq.n	8008d6e <_printf_i+0x166>
 8008e36:	3501      	adds	r5, #1
 8008e38:	68e3      	ldr	r3, [r4, #12]
 8008e3a:	9903      	ldr	r1, [sp, #12]
 8008e3c:	1a5b      	subs	r3, r3, r1
 8008e3e:	42ab      	cmp	r3, r5
 8008e40:	dcf2      	bgt.n	8008e28 <_printf_i+0x220>
 8008e42:	e7eb      	b.n	8008e1c <_printf_i+0x214>
 8008e44:	2500      	movs	r5, #0
 8008e46:	f104 0619 	add.w	r6, r4, #25
 8008e4a:	e7f5      	b.n	8008e38 <_printf_i+0x230>
 8008e4c:	0800998d 	.word	0x0800998d
 8008e50:	0800999e 	.word	0x0800999e

08008e54 <memchr>:
 8008e54:	4603      	mov	r3, r0
 8008e56:	b510      	push	{r4, lr}
 8008e58:	b2c9      	uxtb	r1, r1
 8008e5a:	4402      	add	r2, r0
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	4618      	mov	r0, r3
 8008e60:	d101      	bne.n	8008e66 <memchr+0x12>
 8008e62:	2000      	movs	r0, #0
 8008e64:	e003      	b.n	8008e6e <memchr+0x1a>
 8008e66:	7804      	ldrb	r4, [r0, #0]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	428c      	cmp	r4, r1
 8008e6c:	d1f6      	bne.n	8008e5c <memchr+0x8>
 8008e6e:	bd10      	pop	{r4, pc}

08008e70 <memmove>:
 8008e70:	4288      	cmp	r0, r1
 8008e72:	b510      	push	{r4, lr}
 8008e74:	eb01 0402 	add.w	r4, r1, r2
 8008e78:	d902      	bls.n	8008e80 <memmove+0x10>
 8008e7a:	4284      	cmp	r4, r0
 8008e7c:	4623      	mov	r3, r4
 8008e7e:	d807      	bhi.n	8008e90 <memmove+0x20>
 8008e80:	1e43      	subs	r3, r0, #1
 8008e82:	42a1      	cmp	r1, r4
 8008e84:	d008      	beq.n	8008e98 <memmove+0x28>
 8008e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e8e:	e7f8      	b.n	8008e82 <memmove+0x12>
 8008e90:	4601      	mov	r1, r0
 8008e92:	4402      	add	r2, r0
 8008e94:	428a      	cmp	r2, r1
 8008e96:	d100      	bne.n	8008e9a <memmove+0x2a>
 8008e98:	bd10      	pop	{r4, pc}
 8008e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ea2:	e7f7      	b.n	8008e94 <memmove+0x24>

08008ea4 <_free_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	2900      	cmp	r1, #0
 8008eaa:	d043      	beq.n	8008f34 <_free_r+0x90>
 8008eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eb0:	1f0c      	subs	r4, r1, #4
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bfb8      	it	lt
 8008eb6:	18e4      	addlt	r4, r4, r3
 8008eb8:	f000 f8d0 	bl	800905c <__malloc_lock>
 8008ebc:	4a1e      	ldr	r2, [pc, #120]	; (8008f38 <_free_r+0x94>)
 8008ebe:	6813      	ldr	r3, [r2, #0]
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	b933      	cbnz	r3, 8008ed2 <_free_r+0x2e>
 8008ec4:	6063      	str	r3, [r4, #4]
 8008ec6:	6014      	str	r4, [r2, #0]
 8008ec8:	4628      	mov	r0, r5
 8008eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ece:	f000 b8cb 	b.w	8009068 <__malloc_unlock>
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	d90a      	bls.n	8008eec <_free_r+0x48>
 8008ed6:	6821      	ldr	r1, [r4, #0]
 8008ed8:	1862      	adds	r2, r4, r1
 8008eda:	4293      	cmp	r3, r2
 8008edc:	bf01      	itttt	eq
 8008ede:	681a      	ldreq	r2, [r3, #0]
 8008ee0:	685b      	ldreq	r3, [r3, #4]
 8008ee2:	1852      	addeq	r2, r2, r1
 8008ee4:	6022      	streq	r2, [r4, #0]
 8008ee6:	6063      	str	r3, [r4, #4]
 8008ee8:	6004      	str	r4, [r0, #0]
 8008eea:	e7ed      	b.n	8008ec8 <_free_r+0x24>
 8008eec:	461a      	mov	r2, r3
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	b10b      	cbz	r3, 8008ef6 <_free_r+0x52>
 8008ef2:	42a3      	cmp	r3, r4
 8008ef4:	d9fa      	bls.n	8008eec <_free_r+0x48>
 8008ef6:	6811      	ldr	r1, [r2, #0]
 8008ef8:	1850      	adds	r0, r2, r1
 8008efa:	42a0      	cmp	r0, r4
 8008efc:	d10b      	bne.n	8008f16 <_free_r+0x72>
 8008efe:	6820      	ldr	r0, [r4, #0]
 8008f00:	4401      	add	r1, r0
 8008f02:	1850      	adds	r0, r2, r1
 8008f04:	4283      	cmp	r3, r0
 8008f06:	6011      	str	r1, [r2, #0]
 8008f08:	d1de      	bne.n	8008ec8 <_free_r+0x24>
 8008f0a:	6818      	ldr	r0, [r3, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	4401      	add	r1, r0
 8008f10:	6011      	str	r1, [r2, #0]
 8008f12:	6053      	str	r3, [r2, #4]
 8008f14:	e7d8      	b.n	8008ec8 <_free_r+0x24>
 8008f16:	d902      	bls.n	8008f1e <_free_r+0x7a>
 8008f18:	230c      	movs	r3, #12
 8008f1a:	602b      	str	r3, [r5, #0]
 8008f1c:	e7d4      	b.n	8008ec8 <_free_r+0x24>
 8008f1e:	6820      	ldr	r0, [r4, #0]
 8008f20:	1821      	adds	r1, r4, r0
 8008f22:	428b      	cmp	r3, r1
 8008f24:	bf01      	itttt	eq
 8008f26:	6819      	ldreq	r1, [r3, #0]
 8008f28:	685b      	ldreq	r3, [r3, #4]
 8008f2a:	1809      	addeq	r1, r1, r0
 8008f2c:	6021      	streq	r1, [r4, #0]
 8008f2e:	6063      	str	r3, [r4, #4]
 8008f30:	6054      	str	r4, [r2, #4]
 8008f32:	e7c9      	b.n	8008ec8 <_free_r+0x24>
 8008f34:	bd38      	pop	{r3, r4, r5, pc}
 8008f36:	bf00      	nop
 8008f38:	200002d8 	.word	0x200002d8

08008f3c <_malloc_r>:
 8008f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3e:	1ccd      	adds	r5, r1, #3
 8008f40:	f025 0503 	bic.w	r5, r5, #3
 8008f44:	3508      	adds	r5, #8
 8008f46:	2d0c      	cmp	r5, #12
 8008f48:	bf38      	it	cc
 8008f4a:	250c      	movcc	r5, #12
 8008f4c:	2d00      	cmp	r5, #0
 8008f4e:	4606      	mov	r6, r0
 8008f50:	db01      	blt.n	8008f56 <_malloc_r+0x1a>
 8008f52:	42a9      	cmp	r1, r5
 8008f54:	d903      	bls.n	8008f5e <_malloc_r+0x22>
 8008f56:	230c      	movs	r3, #12
 8008f58:	6033      	str	r3, [r6, #0]
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f5e:	f000 f87d 	bl	800905c <__malloc_lock>
 8008f62:	4921      	ldr	r1, [pc, #132]	; (8008fe8 <_malloc_r+0xac>)
 8008f64:	680a      	ldr	r2, [r1, #0]
 8008f66:	4614      	mov	r4, r2
 8008f68:	b99c      	cbnz	r4, 8008f92 <_malloc_r+0x56>
 8008f6a:	4f20      	ldr	r7, [pc, #128]	; (8008fec <_malloc_r+0xb0>)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	b923      	cbnz	r3, 8008f7a <_malloc_r+0x3e>
 8008f70:	4621      	mov	r1, r4
 8008f72:	4630      	mov	r0, r6
 8008f74:	f000 f862 	bl	800903c <_sbrk_r>
 8008f78:	6038      	str	r0, [r7, #0]
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f000 f85d 	bl	800903c <_sbrk_r>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	d123      	bne.n	8008fce <_malloc_r+0x92>
 8008f86:	230c      	movs	r3, #12
 8008f88:	4630      	mov	r0, r6
 8008f8a:	6033      	str	r3, [r6, #0]
 8008f8c:	f000 f86c 	bl	8009068 <__malloc_unlock>
 8008f90:	e7e3      	b.n	8008f5a <_malloc_r+0x1e>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	1b5b      	subs	r3, r3, r5
 8008f96:	d417      	bmi.n	8008fc8 <_malloc_r+0x8c>
 8008f98:	2b0b      	cmp	r3, #11
 8008f9a:	d903      	bls.n	8008fa4 <_malloc_r+0x68>
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	441c      	add	r4, r3
 8008fa0:	6025      	str	r5, [r4, #0]
 8008fa2:	e004      	b.n	8008fae <_malloc_r+0x72>
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	42a2      	cmp	r2, r4
 8008fa8:	bf0c      	ite	eq
 8008faa:	600b      	streq	r3, [r1, #0]
 8008fac:	6053      	strne	r3, [r2, #4]
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f000 f85a 	bl	8009068 <__malloc_unlock>
 8008fb4:	f104 000b 	add.w	r0, r4, #11
 8008fb8:	1d23      	adds	r3, r4, #4
 8008fba:	f020 0007 	bic.w	r0, r0, #7
 8008fbe:	1ac2      	subs	r2, r0, r3
 8008fc0:	d0cc      	beq.n	8008f5c <_malloc_r+0x20>
 8008fc2:	1a1b      	subs	r3, r3, r0
 8008fc4:	50a3      	str	r3, [r4, r2]
 8008fc6:	e7c9      	b.n	8008f5c <_malloc_r+0x20>
 8008fc8:	4622      	mov	r2, r4
 8008fca:	6864      	ldr	r4, [r4, #4]
 8008fcc:	e7cc      	b.n	8008f68 <_malloc_r+0x2c>
 8008fce:	1cc4      	adds	r4, r0, #3
 8008fd0:	f024 0403 	bic.w	r4, r4, #3
 8008fd4:	42a0      	cmp	r0, r4
 8008fd6:	d0e3      	beq.n	8008fa0 <_malloc_r+0x64>
 8008fd8:	1a21      	subs	r1, r4, r0
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f000 f82e 	bl	800903c <_sbrk_r>
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d1dd      	bne.n	8008fa0 <_malloc_r+0x64>
 8008fe4:	e7cf      	b.n	8008f86 <_malloc_r+0x4a>
 8008fe6:	bf00      	nop
 8008fe8:	200002d8 	.word	0x200002d8
 8008fec:	200002dc 	.word	0x200002dc

08008ff0 <_realloc_r>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	4607      	mov	r7, r0
 8008ff4:	4614      	mov	r4, r2
 8008ff6:	460e      	mov	r6, r1
 8008ff8:	b921      	cbnz	r1, 8009004 <_realloc_r+0x14>
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009000:	f7ff bf9c 	b.w	8008f3c <_malloc_r>
 8009004:	b922      	cbnz	r2, 8009010 <_realloc_r+0x20>
 8009006:	f7ff ff4d 	bl	8008ea4 <_free_r>
 800900a:	4625      	mov	r5, r4
 800900c:	4628      	mov	r0, r5
 800900e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009010:	f000 f830 	bl	8009074 <_malloc_usable_size_r>
 8009014:	42a0      	cmp	r0, r4
 8009016:	d20f      	bcs.n	8009038 <_realloc_r+0x48>
 8009018:	4621      	mov	r1, r4
 800901a:	4638      	mov	r0, r7
 800901c:	f7ff ff8e 	bl	8008f3c <_malloc_r>
 8009020:	4605      	mov	r5, r0
 8009022:	2800      	cmp	r0, #0
 8009024:	d0f2      	beq.n	800900c <_realloc_r+0x1c>
 8009026:	4631      	mov	r1, r6
 8009028:	4622      	mov	r2, r4
 800902a:	f7ff fbeb 	bl	8008804 <memcpy>
 800902e:	4631      	mov	r1, r6
 8009030:	4638      	mov	r0, r7
 8009032:	f7ff ff37 	bl	8008ea4 <_free_r>
 8009036:	e7e9      	b.n	800900c <_realloc_r+0x1c>
 8009038:	4635      	mov	r5, r6
 800903a:	e7e7      	b.n	800900c <_realloc_r+0x1c>

0800903c <_sbrk_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	2300      	movs	r3, #0
 8009040:	4d05      	ldr	r5, [pc, #20]	; (8009058 <_sbrk_r+0x1c>)
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	f7f8 fe44 	bl	8001cd4 <_sbrk>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d102      	bne.n	8009056 <_sbrk_r+0x1a>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	b103      	cbz	r3, 8009056 <_sbrk_r+0x1a>
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	20004500 	.word	0x20004500

0800905c <__malloc_lock>:
 800905c:	4801      	ldr	r0, [pc, #4]	; (8009064 <__malloc_lock+0x8>)
 800905e:	f000 b811 	b.w	8009084 <__retarget_lock_acquire_recursive>
 8009062:	bf00      	nop
 8009064:	20004508 	.word	0x20004508

08009068 <__malloc_unlock>:
 8009068:	4801      	ldr	r0, [pc, #4]	; (8009070 <__malloc_unlock+0x8>)
 800906a:	f000 b80c 	b.w	8009086 <__retarget_lock_release_recursive>
 800906e:	bf00      	nop
 8009070:	20004508 	.word	0x20004508

08009074 <_malloc_usable_size_r>:
 8009074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009078:	1f18      	subs	r0, r3, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	bfbc      	itt	lt
 800907e:	580b      	ldrlt	r3, [r1, r0]
 8009080:	18c0      	addlt	r0, r0, r3
 8009082:	4770      	bx	lr

08009084 <__retarget_lock_acquire_recursive>:
 8009084:	4770      	bx	lr

08009086 <__retarget_lock_release_recursive>:
 8009086:	4770      	bx	lr

08009088 <_init>:
 8009088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908a:	bf00      	nop
 800908c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908e:	bc08      	pop	{r3}
 8009090:	469e      	mov	lr, r3
 8009092:	4770      	bx	lr

08009094 <_fini>:
 8009094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009096:	bf00      	nop
 8009098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909a:	bc08      	pop	{r3}
 800909c:	469e      	mov	lr, r3
 800909e:	4770      	bx	lr
